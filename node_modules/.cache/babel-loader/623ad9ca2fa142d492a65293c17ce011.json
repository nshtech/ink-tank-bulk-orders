{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToggleButton = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Tooltip = _interopRequireDefault(require(\"../tooltip/Tooltip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ToggleButton = /*#__PURE__*/function (_Component) {\n  _inherits(ToggleButton, _Component);\n\n  function ToggleButton(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToggleButton).call(this, props));\n    _this.state = {};\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"toggle\",\n    value: function toggle(e) {\n      if (this.props.onChange) {\n        this.props.onChange({\n          originalEvent: e,\n          value: !this.props.checked,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: !this.props.checked\n          }\n        });\n        this.input.focus();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.setState({\n        focused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      if (event.key === 'Enter') {\n        this.toggle(event);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.tooltip && prevProps.tooltip !== this.props.tooltip) {\n        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = new _Tooltip.default({\n        target: this.container,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var className = (0, _classnames.default)('p-button p-togglebutton p-component', this.props.className, {\n        'p-button-text-icon-left': this.props.onIcon && this.props.offIcon,\n        'p-button-text-only': !this.props.onIcon && !this.props.offIcon && (this.props.onLabel || this.props.offLabel),\n        'p-highlight': this.props.checked,\n        'p-disabled': this.props.disabled,\n        'p-focus': this.state.focused\n      }),\n          iconStyleClass = null;\n\n      if (this.props.onIcon || this.props.offIcon) {\n        iconStyleClass = (0, _classnames.default)('p-c', this.props.checked ? this.props.onIcon : this.props.offIcon, {\n          'p-button-icon-only': this.props.onIcon && this.props.offIcon && (!this.props.onLabel || !this.props.offLabel),\n          'p-button-icon-left': this.props.onIcon && this.props.offIcon\n        });\n      }\n\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this2.container = el;\n        },\n        id: this.props.id,\n        className: className,\n        style: this.props.style,\n        onClick: this.toggle\n      }, _react.default.createElement(\"div\", {\n        className: \"p-hidden-accessible\"\n      }, _react.default.createElement(\"input\", {\n        ref: function ref(el) {\n          return _this2.input = el;\n        },\n        type: \"checkbox\",\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown\n      })), this.props.onIcon && this.props.offIcon && _react.default.createElement(\"span\", {\n        className: iconStyleClass\n      }), _react.default.createElement(\"span\", {\n        className: \"p-button-text p-unselectable-text\"\n      }, this.props.checked ? this.props.onLabel : this.props.offLabel));\n    }\n  }]);\n\n  return ToggleButton;\n}(_react.Component);\n\nexports.ToggleButton = ToggleButton;\n\n_defineProperty(ToggleButton, \"defaultProps\", {\n  id: null,\n  onIcon: null,\n  offIcon: null,\n  onLabel: 'Yes',\n  offLabel: 'No',\n  style: null,\n  className: null,\n  checked: false,\n  tooltip: null,\n  tooltipOptions: null,\n  onChange: null\n});\n\n_defineProperty(ToggleButton, \"propTypes\", {\n  id: _propTypes.default.string,\n  onIcon: _propTypes.default.string,\n  offIcon: _propTypes.default.string,\n  onLabel: _propTypes.default.string,\n  offLabel: _propTypes.default.string,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  checked: _propTypes.default.bool,\n  tooltip: _propTypes.default.string,\n  tooltipOptions: _propTypes.default.object,\n  onChange: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}