{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUpload = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Button = require(\"../button/Button\");\n\nvar _Messages = require(\"../messages/Messages\");\n\nvar _ProgressBar = require(\"../progressbar/ProgressBar\");\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar FileUpload = /*#__PURE__*/function (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload(props) {\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUpload).call(this, props));\n    _this.state = {\n      files: [],\n      msgs: []\n    };\n    _this.upload = _this.upload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clear = _this.clear.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFileSelect = _this.onFileSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragEnter = _this.onDragEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragOver = _this.onDragOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragLeave = _this.onDragLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDrop = _this.onDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSimpleUploaderClick = _this.onSimpleUploaderClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(FileUpload, [{\n    key: \"hasFiles\",\n    value: function hasFiles() {\n      return this.state.files && this.state.files.length > 0;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(file) {\n      return /^image\\//.test(file.type);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this.clearInputElement();\n\n      var currentFiles = _toConsumableArray(this.state.files);\n\n      currentFiles.splice(index, 1);\n      this.setState({\n        files: currentFiles\n      });\n    }\n  }, {\n    key: \"clearInputElement\",\n    value: function clearInputElement() {\n      this.fileInput.value = '';\n\n      if (this.props.mode === 'basic') {\n        this.fileInput.style.display = 'inline';\n      }\n    }\n  }, {\n    key: \"formatSize\",\n    value: function formatSize(bytes) {\n      if (bytes === 0) {\n        return '0 B';\n      }\n\n      var k = 1000,\n          dm = 3,\n          sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n          i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n  }, {\n    key: \"onFileSelect\",\n    value: function onFileSelect(event) {\n      var _this2 = this;\n\n      this.setState({\n        msgs: []\n      });\n      this.files = this.state.files || [];\n      var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n\n      for (var i = 0; i < files.length; i++) {\n        var file = files[i];\n\n        if (!this.isFileSelected(file)) {\n          if (this.validate(file)) {\n            if (this.isImage(file)) {\n              file.objectURL = window.URL.createObjectURL(file);\n            }\n\n            this.files.push(file);\n          }\n        }\n      }\n\n      this.setState({\n        files: this.files\n      }, function () {\n        if (_this2.hasFiles() && _this2.props.auto) {\n          _this2.upload();\n        }\n      });\n\n      if (this.props.onSelect) {\n        this.props.onSelect({\n          originalEvent: event,\n          files: files\n        });\n      }\n\n      this.clearInputElement();\n\n      if (this.props.mode === 'basic') {\n        this.fileInput.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"isFileSelected\",\n    value: function isFileSelected(file) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var sFile = _step.value;\n          if (sFile.name + sFile.type + sFile.size === file.name + file.type + file.size) return true;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(file) {\n      if (this.props.maxFileSize && file.size > this.props.maxFileSize) {\n        var message = {\n          severity: 'error',\n          summary: this.props.invalidFileSizeMessageSummary.replace('{0}', file.name),\n          detail: this.props.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.props.maxFileSize))\n        };\n\n        if (this.props.mode === 'advanced') {\n          this.messagesUI.show(message);\n        }\n\n        if (this.props.onValidationFail) {\n          this.props.onValidationFail(file);\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"upload\",\n    value: function upload() {\n      var _this3 = this;\n\n      this.setState({\n        msgs: []\n      });\n      var xhr = new XMLHttpRequest();\n      var formData = new FormData();\n\n      if (this.props.onBeforeUpload) {\n        this.props.onBeforeUpload({\n          'xhr': xhr,\n          'formData': formData\n        });\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.state.files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var file = _step2.value;\n          formData.append(this.props.name, file, file.name);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      xhr.upload.addEventListener('progress', function (event) {\n        if (event.lengthComputable) {\n          _this3.setState({\n            progress: Math.round(event.loaded * 100 / event.total)\n          });\n        }\n\n        if (_this3.props.onProgress) {\n          _this3.props.onProgress({\n            originalEvent: event,\n            progress: _this3.progress\n          });\n        }\n\n        ;\n      });\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          _this3.setState({\n            progress: 0\n          });\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            if (_this3.props.onUpload) {\n              _this3.props.onUpload({\n                xhr: xhr,\n                files: _this3.files\n              });\n            }\n          } else {\n            if (_this3.props.onError) {\n              _this3.props.onError({\n                xhr: xhr,\n                files: _this3.files\n              });\n            }\n          }\n\n          _this3.clear();\n        }\n      };\n\n      xhr.open('POST', this.props.url, true);\n\n      if (this.props.onBeforeSend) {\n        this.props.onBeforeSend({\n          'xhr': xhr,\n          'formData': formData\n        });\n      }\n\n      xhr.withCredentials = this.props.withCredentials;\n      xhr.send(formData);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.setState({\n        files: []\n      });\n\n      if (this.props.onClear) {\n        this.props.onClear();\n      }\n\n      this.clearInputElement();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      _DomHandler.default.addClass(event.currentTarget.parentElement, 'p-focus');\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      _DomHandler.default.removeClass(event.currentTarget.parentElement, 'p-focus');\n    }\n  }, {\n    key: \"onDragEnter\",\n    value: function onDragEnter(event) {\n      if (!this.props.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(event) {\n      if (!this.props.disabled) {\n        _DomHandler.default.addClass(this.content, 'p-fileupload-highlight');\n\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave(event) {\n      if (!this.props.disabled) {\n        _DomHandler.default.removeClass(this.content, 'p-fileupload-highlight');\n      }\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(event) {\n      if (!this.props.disabled) {\n        _DomHandler.default.removeClass(this.content, 'p-fileupload-highlight');\n\n        event.stopPropagation();\n        event.preventDefault();\n        var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n        var allowDrop = this.props.multiple || files && files.length === 1;\n\n        if (allowDrop) {\n          this.onFileSelect(event);\n        }\n      }\n    }\n  }, {\n    key: \"onSimpleUploaderClick\",\n    value: function onSimpleUploaderClick() {\n      if (this.hasFiles()) {\n        this.upload();\n      }\n    }\n  }, {\n    key: \"renderChooseButton\",\n    value: function renderChooseButton() {\n      var _this4 = this;\n\n      var className = (0, _classnames.default)('p-button p-fileupload-choose p-component p-button-text-icon-left');\n      return _react.default.createElement(\"span\", {\n        icon: \"pi pi-plus\",\n        className: className\n      }, _react.default.createElement(\"input\", {\n        ref: function ref(el) {\n          return _this4.fileInput = el;\n        },\n        type: \"file\",\n        onChange: this.onFileSelect,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        multiple: this.props.multiple,\n        accept: this.props.accept,\n        disabled: this.props.disabled\n      }), _react.default.createElement(\"span\", {\n        className: \"p-button-icon p-button-icon-left p-clickable pi pi-fw pi-plus\"\n      }), _react.default.createElement(\"span\", {\n        className: \"p-button-text p-clickable\"\n      }, this.props.chooseLabel));\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var _this5 = this;\n\n      return _react.default.createElement(\"div\", {\n        className: \"p-fileupload-files\"\n      }, this.state.files.map(function (file, index) {\n        var preview = _this5.isImage(file) ? _react.default.createElement(\"div\", null, _react.default.createElement(\"img\", {\n          alt: file.name,\n          role: \"presentation\",\n          src: file.objectURL,\n          width: _this5.props.previewWidth\n        })) : null;\n\n        var fileName = _react.default.createElement(\"div\", null, file.name);\n\n        var size = _react.default.createElement(\"div\", null, _this5.formatSize(file.size));\n\n        var removeButton = _react.default.createElement(\"div\", null, _react.default.createElement(_Button.Button, {\n          type: \"button\",\n          icon: \"pi pi-times\",\n          onClick: function onClick() {\n            return _this5.remove(index);\n          }\n        }));\n\n        return _react.default.createElement(\"div\", {\n          className: \"p-fileupload-row\",\n          key: file.name + file.type + file.size\n        }, preview, fileName, size, removeButton);\n      }));\n    }\n  }, {\n    key: \"renderAdvanced\",\n    value: function renderAdvanced() {\n      var _this6 = this;\n\n      var className = (0, _classnames.default)('p-fileupload p-component', this.props.className);\n      var uploadButton, cancelButton, filesList, progressBar;\n      var chooseButton = this.renderChooseButton();\n\n      if (!this.props.auto) {\n        uploadButton = _react.default.createElement(_Button.Button, {\n          label: this.props.uploadLabel,\n          icon: \"pi pi-upload\",\n          onClick: this.upload,\n          disabled: this.props.disabled || !this.hasFiles()\n        });\n        cancelButton = _react.default.createElement(_Button.Button, {\n          label: this.props.cancelLabel,\n          icon: \"pi pi-times\",\n          onClick: this.clear,\n          disabled: this.props.disabled || !this.hasFiles()\n        });\n      }\n\n      if (this.hasFiles()) {\n        filesList = this.renderFiles();\n        progressBar = _react.default.createElement(_ProgressBar.ProgressBar, {\n          value: this.state.progress,\n          showValue: false\n        });\n      }\n\n      return _react.default.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        style: this.props.style\n      }, _react.default.createElement(\"div\", {\n        className: \"p-fileupload-buttonbar\"\n      }, chooseButton, uploadButton, cancelButton), _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          _this6.content = el;\n        },\n        className: \"p-fileupload-content\",\n        onDragEnter: this.onDragEnter,\n        onDragOver: this.onDragOver,\n        onDragLeave: this.onDragLeave,\n        onDrop: this.onDrop\n      }, progressBar, _react.default.createElement(_Messages.Messages, {\n        ref: function ref(el) {\n          return _this6.messagesUI = el;\n        }\n      }), filesList));\n    }\n  }, {\n    key: \"renderBasic\",\n    value: function renderBasic() {\n      var _this7 = this;\n\n      var buttonClassName = (0, _classnames.default)('p-button p-fileupload-choose p-component p-button-text-icon-left', {\n        'p-fileupload-choose-selected': this.hasFiles()\n      });\n      var iconClassName = (0, _classnames.default)('p-button-icon-left pi', {\n        'pi-plus': !this.hasFiles() || this.props.auto,\n        'pi-upload': this.hasFiles() && !this.props.auto\n      });\n      return _react.default.createElement(\"span\", {\n        className: buttonClassName,\n        onMouseUp: this.onSimpleUploaderClick\n      }, _react.default.createElement(\"span\", {\n        className: iconClassName\n      }), _react.default.createElement(\"span\", {\n        className: \"p-button-text p-clickable\"\n      }, this.props.auto ? this.props.chooseLabel : this.hasFiles() ? this.state.files[0].name : this.props.chooseLabel), _react.default.createElement(\"input\", {\n        ref: function ref(el) {\n          return _this7.fileInput = el;\n        },\n        type: \"file\",\n        multiple: this.props.multiple,\n        accept: this.props.accept,\n        disabled: this.props.disabled,\n        onChange: this.onFileSelect,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.mode === 'advanced') return this.renderAdvanced();else if (this.props.mode === 'basic') return this.renderBasic();\n    }\n  }]);\n\n  return FileUpload;\n}(_react.Component);\n\nexports.FileUpload = FileUpload;\n\n_defineProperty(FileUpload, \"defaultProps\", {\n  id: null,\n  name: null,\n  url: null,\n  mode: 'advanced',\n  multiple: false,\n  accept: null,\n  disabled: false,\n  auto: false,\n  maxFileSize: null,\n  invalidFileSizeMessageSummary: '{0}: Invalid file size, ',\n  invalidFileSizeMessageDetail: 'maximum upload size is {0}.',\n  style: null,\n  className: null,\n  widthCredentials: false,\n  previewWidth: 50,\n  chooseLabel: 'Choose',\n  uploadLabel: 'Upload',\n  cancelLabel: 'Cancel',\n  onBeforeUpload: null,\n  onBeforeSend: null,\n  onUpload: null,\n  onError: null,\n  onClear: null,\n  onSelect: null,\n  onProgress: null,\n  onValidationFail: null\n});\n\n_defineProperty(FileUpload, \"propTypes\", {\n  id: _propTypes.default.string,\n  name: _propTypes.default.string,\n  url: _propTypes.default.string,\n  mode: _propTypes.default.string,\n  multiple: _propTypes.default.bool,\n  accept: _propTypes.default.string,\n  disabled: _propTypes.default.bool,\n  auto: _propTypes.default.bool,\n  maxFileSize: _propTypes.default.number,\n  invalidFileSizeMessageSummary: _propTypes.default.string,\n  invalidFileSizeMessageDetail: _propTypes.default.string,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  widthCredentials: _propTypes.default.bool,\n  previewWidth: _propTypes.default.number,\n  chooseLabel: _propTypes.default.string,\n  uploadLabel: _propTypes.default.string,\n  cancelLabel: _propTypes.default.string,\n  onBeforeUpload: _propTypes.default.func,\n  onBeforeSend: _propTypes.default.func,\n  onUpload: _propTypes.default.func,\n  onError: _propTypes.default.func,\n  onClear: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  onProgress: _propTypes.default.func,\n  onValidationFail: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}