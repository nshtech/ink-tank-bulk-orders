{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiSelect = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _ObjectUtils = _interopRequireDefault(require(\"../utils/ObjectUtils\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _MultiSelectPanel = require(\"./MultiSelectPanel\");\n\nvar _MultiSelectItem = require(\"./MultiSelectItem\");\n\nvar _MultiSelectHeader = require(\"./MultiSelectHeader\");\n\nvar _Tooltip = _interopRequireDefault(require(\"../tooltip/Tooltip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar MultiSelect = /*#__PURE__*/function (_Component) {\n  _inherits(MultiSelect, _Component);\n\n  function MultiSelect(props) {\n    var _this;\n\n    _classCallCheck(this, MultiSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiSelect).call(this, props));\n    _this.state = {\n      filter: ''\n    };\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onPanelClick = _this.onPanelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onOptionClick = _this.onOptionClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onOptionKeyDown = _this.onOptionKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFilter = _this.onFilter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCloseClick = _this.onCloseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onToggleAll = _this.onToggleAll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MultiSelect, [{\n    key: \"onOptionClick\",\n    value: function onOptionClick(event) {\n      var optionValue = this.getOptionValue(event.option);\n      var selectionIndex = this.findSelectionIndex(optionValue);\n      var newValue;\n      if (selectionIndex !== -1) newValue = this.props.value.filter(function (val, i) {\n        return i !== selectionIndex;\n      });else newValue = [].concat(_toConsumableArray(this.props.value || []), [optionValue]);\n      this.updateModel(event.originalEvent, newValue);\n    }\n  }, {\n    key: \"onOptionKeyDown\",\n    value: function onOptionKeyDown(event) {\n      var listItem = event.originalEvent.currentTarget;\n\n      switch (event.originalEvent.which) {\n        //down\n        case 40:\n          var nextItem = this.findNextItem(listItem);\n\n          if (nextItem) {\n            nextItem.focus();\n          }\n\n          event.originalEvent.preventDefault();\n          break;\n        //up\n\n        case 38:\n          var prevItem = this.findPrevItem(listItem);\n\n          if (prevItem) {\n            prevItem.focus();\n          }\n\n          event.originalEvent.preventDefault();\n          break;\n        //enter\n\n        case 13:\n          this.onOptionClick(event);\n          event.originalEvent.preventDefault();\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"findNextItem\",\n    value: function findNextItem(item) {\n      var nextItem = item.nextElementSibling;\n      if (nextItem) return !_DomHandler.default.hasClass(nextItem, 'p-multiselect-item') ? this.findNextItem(nextItem) : nextItem;else return null;\n    }\n  }, {\n    key: \"findPrevItem\",\n    value: function findPrevItem(item) {\n      var prevItem = item.previousElementSibling;\n      if (prevItem) return !_DomHandler.default.hasClass(prevItem, 'p-multiselect-item') ? this.findPrevItem(prevItem) : prevItem;else return null;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      if (this.props.disabled) {\n        return;\n      }\n\n      if (this.documentClickListener) {\n        this.selfClick = true;\n      }\n\n      if (!this.panelClick) {\n        if (this.panel.element.offsetParent) {\n          this.hide();\n        } else {\n          this.focusInput.focus();\n          this.show();\n        }\n      }\n    }\n  }, {\n    key: \"onToggleAll\",\n    value: function onToggleAll(event) {\n      var newValue;\n\n      if (event.checked) {\n        newValue = [];\n      } else {\n        var options = this.hasFilter() ? this.filterOptions(this.props.options) : this.props.options;\n\n        if (options) {\n          newValue = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var option = _step.value;\n              newValue.push(this.getOptionValue(option));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      this.updateModel(event.originalEvent, newValue);\n    }\n  }, {\n    key: \"updateModel\",\n    value: function updateModel(event, value) {\n      if (this.props.onChange) {\n        this.props.onChange({\n          originalEvent: event,\n          value: value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onFilter\",\n    value: function onFilter(event) {\n      this.setState({\n        filter: event.query\n      });\n    }\n  }, {\n    key: \"onPanelClick\",\n    value: function onPanelClick() {\n      this.panelClick = true;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this2 = this;\n\n      if (this.props.options && this.props.options.length) {\n        this.panel.element.style.zIndex = String(_DomHandler.default.generateZIndex());\n        this.panel.element.style.display = 'block';\n        setTimeout(function () {\n          _DomHandler.default.addClass(_this2.panel.element, 'p-input-overlay-visible');\n\n          _DomHandler.default.removeClass(_this2.panel.element, 'p-input-overlay-hidden');\n        }, 1);\n        this.alignPanel();\n        this.bindDocumentClickListener();\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _this3 = this;\n\n      _DomHandler.default.addClass(this.panel.element, 'p-input-overlay-hidden');\n\n      _DomHandler.default.removeClass(this.panel.element, 'p-input-overlay-visible');\n\n      this.unbindDocumentClickListener();\n      this.clearClickState();\n      setTimeout(function () {\n        _this3.panel.element.style.display = 'none';\n\n        _DomHandler.default.removeClass(_this3.panel.element, 'p-input-overlay-hidden');\n      }, 150);\n    }\n  }, {\n    key: \"alignPanel\",\n    value: function alignPanel() {\n      if (this.props.appendTo) {\n        this.panel.element.style.minWidth = _DomHandler.default.getWidth(this.container) + 'px';\n\n        _DomHandler.default.absolutePosition(this.panel.element, this.container);\n      } else {\n        _DomHandler.default.relativePosition(this.panel.element, this.container);\n      }\n    }\n  }, {\n    key: \"onCloseClick\",\n    value: function onCloseClick(event) {\n      this.hide();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }, {\n    key: \"findSelectionIndex\",\n    value: function findSelectionIndex(value) {\n      var index = -1;\n\n      if (this.props.value) {\n        for (var i = 0; i < this.props.value.length; i++) {\n          if (_ObjectUtils.default.equals(this.props.value[i], value, this.props.dataKey)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(option) {\n      return this.findSelectionIndex(this.getOptionValue(option)) !== -1;\n    }\n  }, {\n    key: \"findLabelByValue\",\n    value: function findLabelByValue(val) {\n      var label = null;\n\n      for (var i = 0; i < this.props.options.length; i++) {\n        var option = this.props.options[i];\n        var optionValue = this.getOptionValue(option);\n\n        if (_ObjectUtils.default.equals(optionValue, val)) {\n          label = this.getOptionLabel(option);\n          break;\n        }\n      }\n\n      return label;\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      _DomHandler.default.addClass(this.container, 'p-focus');\n\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      _DomHandler.default.removeClass(this.container, 'p-focus');\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    }\n  }, {\n    key: \"bindDocumentClickListener\",\n    value: function bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        this.documentClickListener = this.onDocumentClick.bind(this);\n        document.addEventListener('click', this.documentClickListener);\n      }\n    }\n  }, {\n    key: \"unbindDocumentClickListener\",\n    value: function unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        document.removeEventListener('click', this.documentClickListener);\n        this.documentClickListener = null;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.tooltip && prevProps.tooltip !== this.props.tooltip) {\n        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindDocumentClickListener();\n\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"onDocumentClick\",\n    value: function onDocumentClick() {\n      if (!this.selfClick && !this.panelClick && this.panel.element.offsetParent) {\n        this.hide();\n      }\n\n      this.clearClickState();\n    }\n  }, {\n    key: \"clearClickState\",\n    value: function clearClickState() {\n      this.selfClick = false;\n      this.panelClick = false;\n    }\n  }, {\n    key: \"filterOption\",\n    value: function filterOption(option) {\n      var filterValue = this.state.filter.trim().toLowerCase();\n      var optionLabel = this.getOptionLabel(option);\n      return optionLabel.toLowerCase().indexOf(filterValue.toLowerCase()) > -1;\n    }\n  }, {\n    key: \"hasFilter\",\n    value: function hasFilter() {\n      return this.state.filter && this.state.filter.trim().length > 0;\n    }\n  }, {\n    key: \"isAllChecked\",\n    value: function isAllChecked(visibleOptions) {\n      if (this.hasFilter()) return this.props.value && visibleOptions && visibleOptions.length && this.props.value.length === visibleOptions.length;else return this.props.value && this.props.options && this.props.value.length === this.props.options.length;\n    }\n  }, {\n    key: \"filterOptions\",\n    value: function filterOptions(options) {\n      var _this4 = this;\n\n      return options.filter(function (option) {\n        return _this4.filterOption(option);\n      });\n    }\n  }, {\n    key: \"getOptionValue\",\n    value: function getOptionValue(option) {\n      return this.props.optionLabel ? option : option.value;\n    }\n  }, {\n    key: \"getOptionLabel\",\n    value: function getOptionLabel(option) {\n      return this.props.optionLabel ? _ObjectUtils.default.resolveFieldData(option, this.props.optionLabel) : option.label;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.props.value || this.props.value.length === 0;\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      var label;\n\n      if (!this.isEmpty() && !this.props.fixedPlaceholder) {\n        label = '';\n\n        for (var i = 0; i < this.props.value.length; i++) {\n          if (i !== 0) {\n            label += ',';\n          }\n\n          label += this.findLabelByValue(this.props.value[i]);\n        }\n      }\n\n      return label;\n    }\n  }, {\n    key: \"getLabelContent\",\n    value: function getLabelContent() {\n      var _this5 = this;\n\n      if (this.props.selectedItemTemplate) {\n        if (this.props.value && this.props.value.length) {\n          return this.props.value.map(function (val, index) {\n            return _react.default.createElement(_react.default.Fragment, {\n              key: index\n            }, _this5.props.selectedItemTemplate(val));\n          });\n        } else {\n          return this.props.selectedItemTemplate();\n        }\n      } else {\n        return this.getLabel();\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = new _Tooltip.default({\n        target: this.container,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader(items) {\n      return _react.default.createElement(_MultiSelectHeader.MultiSelectHeader, {\n        filter: this.props.filter,\n        filterValue: this.state.filter,\n        onFilter: this.onFilter,\n        onClose: this.onCloseClick,\n        onToggleAll: this.onToggleAll,\n        allChecked: this.isAllChecked(items)\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var empty = this.isEmpty();\n      var content = this.getLabelContent();\n      var className = (0, _classnames.default)('p-multiselect-label', {\n        'p-placeholder': empty && this.props.placeholder,\n        'p-multiselect-label-empty': empty && !this.props.placeholder && !this.props.selectedItemTemplate\n      });\n      return _react.default.createElement(\"div\", {\n        className: \"p-multiselect-label-container\"\n      }, _react.default.createElement(\"label\", {\n        className: className\n      }, content || this.props.placeholder || 'empty'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var className = (0, _classnames.default)('p-multiselect p-component', this.props.className, {\n        'p-disabled': this.props.disabled\n      });\n      var label = this.renderLabel();\n      var items = this.props.options;\n\n      if (items) {\n        if (this.hasFilter()) {\n          items = this.filterOptions(items);\n        }\n\n        items = items.map(function (option, index) {\n          var optionLabel = _this6.getOptionLabel(option);\n\n          return _react.default.createElement(_MultiSelectItem.MultiSelectItem, {\n            key: optionLabel + '_' + index,\n            label: optionLabel,\n            option: option,\n            template: _this6.props.itemTemplate,\n            selected: _this6.isSelected(option),\n            onClick: _this6.onOptionClick,\n            onKeyDown: _this6.onOptionKeyDown,\n            tabIndex: _this6.props.tabIndex\n          });\n        });\n      }\n\n      var header = this.renderHeader(items);\n      return _react.default.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        onClick: this.onClick,\n        ref: function ref(el) {\n          return _this6.container = el;\n        },\n        style: this.props.style\n      }, _react.default.createElement(\"div\", {\n        className: \"p-hidden-accessible\"\n      }, _react.default.createElement(\"input\", {\n        readOnly: true,\n        type: \"text\",\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        ref: function ref(el) {\n          return _this6.focusInput = el;\n        }\n      })), label, _react.default.createElement(\"div\", {\n        className: \"p-multiselect-trigger\"\n      }, _react.default.createElement(\"span\", {\n        className: \"p-multiselect-trigger-icon pi pi-chevron-down p-c\"\n      })), _react.default.createElement(_MultiSelectPanel.MultiSelectPanel, {\n        ref: function ref(el) {\n          return _this6.panel = el;\n        },\n        header: header,\n        appendTo: this.props.appendTo,\n        onClick: this.onPanelClick,\n        scrollHeight: this.props.scrollHeight\n      }, items));\n    }\n  }]);\n\n  return MultiSelect;\n}(_react.Component);\n\nexports.MultiSelect = MultiSelect;\n\n_defineProperty(MultiSelect, \"defaultProps\", {\n  id: null,\n  value: null,\n  options: null,\n  optionLabel: null,\n  style: null,\n  className: null,\n  scrollHeight: '200px',\n  placeholder: null,\n  fixedPlaceholder: false,\n  disabled: false,\n  filter: false,\n  tabIndex: '0',\n  dataKey: null,\n  appendTo: null,\n  tooltip: null,\n  tooltipOptions: null,\n  itemTemplate: null,\n  selectedItemTemplate: null,\n  onChange: null,\n  onFocus: null,\n  onBlur: null\n});\n\n_defineProperty(MultiSelect, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.any,\n  options: _propTypes.default.array,\n  optionLabel: _propTypes.default.string,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  scrollHeight: _propTypes.default.string,\n  placeholder: _propTypes.default.string,\n  fixedPlaceholder: _propTypes.default.bool,\n  disabled: _propTypes.default.bool,\n  filter: _propTypes.default.bool,\n  tabIndex: _propTypes.default.string,\n  dataKey: _propTypes.default.string,\n  appendTo: _propTypes.default.object,\n  tooltip: _propTypes.default.string,\n  tooltipOptions: _propTypes.default.object,\n  itemTemplate: _propTypes.default.func,\n  selectedItemTemplate: _propTypes.default.func,\n  onChange: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n  onBlur: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}