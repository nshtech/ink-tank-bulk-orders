{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tree = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _ObjectUtils = _interopRequireDefault(require(\"../utils/ObjectUtils\"));\n\nvar _UITreeNode = require(\"./UITreeNode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Tree = /*#__PURE__*/function (_Component) {\n  _inherits(Tree, _Component);\n\n  function Tree(props) {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tree).call(this, props));\n\n    if (!_this.props.onToggle) {\n      _this.state = {\n        expandedKeys: _this.props.expandedKeys,\n        filter: ''\n      };\n    }\n\n    _this.isNodeLeaf = _this.isNodeLeaf.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onToggle = _this.onToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragStart = _this.onDragStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDrop = _this.onDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDropPoint = _this.onDropPoint.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFilterInputChange = _this.onFilterInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFilterInputKeyDown = _this.onFilterInputKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"getExpandedKeys\",\n    value: function getExpandedKeys() {\n      return this.props.onToggle ? this.props.expandedKeys : this.state.expandedKeys;\n    }\n  }, {\n    key: \"getRootNode\",\n    value: function getRootNode() {\n      return this.props.filter && this.filteredNodes ? this.filteredNodes : this.props.value;\n    }\n  }, {\n    key: \"onToggle\",\n    value: function onToggle(event) {\n      if (this.props.onToggle) {\n        this.props.onToggle(event);\n      } else {\n        this.setState({\n          expandedKeys: event.value\n        });\n      }\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      this.dragState = {\n        path: event.path,\n        index: event.index\n      };\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd() {\n      this.dragState = null;\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(event) {\n      if (this.validateDropNode(this.dragState.path, event.path)) {\n        var value = JSON.parse(JSON.stringify(this.props.value));\n        var dragPaths = this.dragState.path.split('-');\n        dragPaths.pop();\n        var dragNodeParent = this.findNode(value, dragPaths);\n        var dragNode = dragNodeParent ? dragNodeParent.children[this.dragState.index] : value[this.dragState.index];\n        var dropNode = this.findNode(value, event.path.split('-'));\n        if (dropNode.children) dropNode.children.push(dragNode);else dropNode.children = [dragNode];\n        if (dragNodeParent) dragNodeParent.children.splice(this.dragState.index, 1);else value.splice(this.dragState.index, 1);\n\n        if (this.props.onDragDrop) {\n          this.props.onDragDrop({\n            originalEvent: event.originalEvent,\n            value: value\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onDropPoint\",\n    value: function onDropPoint(event) {\n      if (this.validateDropPoint(event)) {\n        var value = JSON.parse(JSON.stringify(this.props.value));\n        var dragPaths = this.dragState.path.split('-');\n        dragPaths.pop();\n        var dropPaths = event.path.split('-');\n        dropPaths.pop();\n        var dragNodeParent = this.findNode(value, dragPaths);\n        var dropNodeParent = this.findNode(value, dropPaths);\n        var dragNode = dragNodeParent ? dragNodeParent.children[this.dragState.index] : value[this.dragState.index];\n        var siblings = this.areSiblings(this.dragState.path, event.path);\n        if (dragNodeParent) dragNodeParent.children.splice(this.dragState.index, 1);else value.splice(this.dragState.index, 1);\n\n        if (event.position < 0) {\n          var dropIndex = siblings ? this.dragState.index > event.index ? event.index : event.index - 1 : event.index;\n          if (dropNodeParent) dropNodeParent.children.splice(dropIndex, 0, dragNode);else value.splice(dropIndex, 0, dragNode);\n        } else {\n          if (dropNodeParent) dropNodeParent.children.push(dragNode);else value.push(dragNode);\n        }\n\n        if (this.props.onDragDrop) {\n          this.props.onDragDrop({\n            originalEvent: event.originalEvent,\n            value: value\n          });\n        }\n      }\n    }\n  }, {\n    key: \"validateDrop\",\n    value: function validateDrop(dragPath, dropPath) {\n      if (!dragPath) {\n        return false;\n      } else {\n        //same node\n        if (dragPath === dropPath) {\n          return false;\n        } //parent dropped on an descendant\n\n\n        if (dropPath.indexOf(dragPath) === 0) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n  }, {\n    key: \"validateDropNode\",\n    value: function validateDropNode(dragPath, dropPath) {\n      var validateDrop = this.validateDrop(dragPath, dropPath);\n\n      if (validateDrop) {\n        //child dropped on parent\n        if (dragPath.indexOf('-') > 0 && dragPath.substring(0, dragPath.lastIndexOf('-')) === dropPath) {\n          return false;\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"validateDropPoint\",\n    value: function validateDropPoint(event) {\n      var validateDrop = this.validateDrop(this.dragState.path, event.path);\n\n      if (validateDrop) {\n        //child dropped to next sibling's drop point\n        if (event.position === -1 && this.areSiblings(this.dragState.path, event.path) && this.dragState.index + 1 === event.index) {\n          return false;\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"areSiblings\",\n    value: function areSiblings(path1, path2) {\n      if (path1.length === 1 && path2.length === 1) return true;else return path1.substring(0, path1.lastIndexOf('-')) === path2.substring(0, path2.lastIndexOf('-'));\n    }\n  }, {\n    key: \"findNode\",\n    value: function findNode(value, path) {\n      if (path.length === 0) {\n        return null;\n      } else {\n        var index = parseInt(path[0], 10);\n        var nextSearchRoot = value.children ? value.children[index] : value[index];\n\n        if (path.length === 1) {\n          return nextSearchRoot;\n        } else {\n          path.shift();\n          return this.findNode(nextSearchRoot, path);\n        }\n      }\n    }\n  }, {\n    key: \"isNodeLeaf\",\n    value: function isNodeLeaf(node) {\n      return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n  }, {\n    key: \"onFilterInputKeyDown\",\n    value: function onFilterInputKeyDown(event) {\n      //enter\n      if (event.which === 13) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onFilterInputChange\",\n    value: function onFilterInputChange(event) {\n      this.filterChanged = true;\n      this.setState({\n        filter: event.target.value\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      if (!this.filterChanged) {\n        return;\n      }\n\n      if (this.state.filter === '') {\n        this.filteredNodes = this.props.value;\n      } else {\n        this.filteredNodes = [];\n        var searchFields = this.props.filterBy.split(',');\n        var filterText = this.state.filter.toLowerCase();\n        var isStrictMode = this.props.filterMode === 'strict';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.props.value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            var copyNode = _objectSpread({}, node);\n\n            var paramsWithoutNode = {\n              searchFields: searchFields,\n              filterText: filterText,\n              isStrictMode: isStrictMode\n            };\n\n            if (isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n              this.filteredNodes.push(copyNode);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      this.filterChanged = false;\n    }\n  }, {\n    key: \"findFilteredNodes\",\n    value: function findFilteredNodes(node, paramsWithoutNode) {\n      if (node) {\n        var matched = false;\n\n        if (node.children) {\n          var childNodes = _toConsumableArray(node.children);\n\n          node.children = [];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = childNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var childNode = _step2.value;\n\n              var copyChildNode = _objectSpread({}, childNode);\n\n              if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                matched = true;\n                node.children.push(copyChildNode);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n\n        if (matched) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isFilterMatched\",\n    value: function isFilterMatched(node, _ref) {\n      var searchFields = _ref.searchFields,\n          filterText = _ref.filterText,\n          isStrictMode = _ref.isStrictMode;\n      var matched = false;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = searchFields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var field = _step3.value;\n          var fieldValue = String(_ObjectUtils.default.resolveFieldData(node, field)).toLowerCase();\n\n          if (fieldValue.indexOf(filterText) > -1) {\n            matched = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n        matched = this.findFilteredNodes(node, {\n          searchFields: searchFields,\n          filterText: filterText,\n          isStrictMode: isStrictMode\n        }) || matched;\n      }\n\n      return matched;\n    }\n  }, {\n    key: \"renderRootChild\",\n    value: function renderRootChild(node, index, last) {\n      return _react.default.createElement(_UITreeNode.UITreeNode, {\n        key: node.key || node.label,\n        node: node,\n        index: index,\n        last: last,\n        path: String(index),\n        selectionMode: this.props.selectionMode,\n        selectionKeys: this.props.selectionKeys,\n        onSelectionChange: this.props.onSelectionChange,\n        metaKeySelection: this.props.metaKeySelection,\n        contextMenuSelectionKey: this.props.contextMenuSelectionKey,\n        onContextMenuSelectionChange: this.props.onContextMenuSelectionChange,\n        onContextMenu: this.props.onContextMenu,\n        propagateSelectionDown: this.props.propagateSelectionDown,\n        propagateSelectionUp: this.props.propagateSelectionUp,\n        onExpand: this.props.onExpand,\n        onCollapse: this.props.onCollapse,\n        onSelect: this.props.onSelect,\n        onUnselect: this.props.onUnselect,\n        expandedKeys: this.getExpandedKeys(),\n        onToggle: this.onToggle,\n        nodeTemplate: this.props.nodeTemplate,\n        isNodeLeaf: this.isNodeLeaf,\n        dragdropScope: this.props.dragdropScope,\n        onDragStart: this.onDragStart,\n        onDragEnd: this.onDragEnd,\n        onDrop: this.onDrop,\n        onDropPoint: this.onDropPoint\n      });\n    }\n  }, {\n    key: \"renderRootChildren\",\n    value: function renderRootChildren() {\n      var _this2 = this;\n\n      if (this.props.filter) {\n        this.filter();\n      }\n\n      var value = this.getRootNode();\n      return value.map(function (node, index) {\n        return _this2.renderRootChild(node, index, index === value.length - 1);\n      });\n    }\n  }, {\n    key: \"renderModel\",\n    value: function renderModel() {\n      if (this.props.value) {\n        var rootNodes = this.renderRootChildren();\n        var contentClass = (0, _classnames.default)('p-tree-container', this.props.contentClassName);\n        return _react.default.createElement(\"ul\", {\n          className: contentClass,\n          role: \"tree\",\n          \"aria-label\": this.props.ariaLabel,\n          \"aria-labelledby\": this.props.ariaLabelledBy,\n          style: this.props.contentStyle\n        }, rootNodes);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderLoader\",\n    value: function renderLoader() {\n      if (this.props.loading) {\n        var icon = (0, _classnames.default)('p-tree-loading-icon pi-spin', this.props.loadingIcon);\n        return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"div\", {\n          className: \"p-tree-loading-mask p-component-overlay\"\n        }), _react.default.createElement(\"div\", {\n          className: \"p-tree-loading-content\"\n        }, _react.default.createElement(\"i\", {\n          className: icon\n        })));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderFilter\",\n    value: function renderFilter() {\n      if (this.props.filter) {\n        return _react.default.createElement(\"div\", {\n          className: \"p-tree-filter-container\"\n        }, _react.default.createElement(\"input\", {\n          type: \"text\",\n          autoComplete: \"off\",\n          className: \"p-tree-filter p-inputtext p-component\",\n          placeholder: this.props.filterPlaceholder,\n          onKeyDown: this.onFilterInputKeyDown,\n          onChange: this.onFilterInputChange\n        }), _react.default.createElement(\"span\", {\n          className: \"p-tree-filter-icon pi pi-search\"\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = (0, _classnames.default)('p-tree p-component', {\n        'p-tree-selectable': this.props.selectionMode,\n        'p-tree-loading': this.props.loading\n      });\n      var loader = this.renderLoader();\n      var content = this.renderModel();\n      var filter = this.renderFilter();\n      return _react.default.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        style: this.props.style\n      }, loader, filter, content);\n    }\n  }]);\n\n  return Tree;\n}(_react.Component);\n\nexports.Tree = Tree;\n\n_defineProperty(Tree, \"defaultProps\", {\n  id: null,\n  value: null,\n  selectionMode: null,\n  selectionKeys: null,\n  onSelectionChange: null,\n  contextMenuSelectionKey: null,\n  onContextMenuSelectionChange: null,\n  expandedKeys: null,\n  style: null,\n  className: null,\n  contentStyle: null,\n  contentClassName: null,\n  metaKeySelection: true,\n  propagateSelectionUp: true,\n  propagateSelectionDown: true,\n  loading: false,\n  loadingIcon: 'pi pi-spinner',\n  dragdropScope: null,\n  filter: false,\n  filterBy: 'label',\n  filterMode: 'lenient',\n  filterPlaceholder: null,\n  nodeTemplate: null,\n  onSelect: null,\n  onUnselect: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null,\n  onDragDrop: null,\n  onContextMenu: null\n});\n\n_defineProperty(Tree, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.any,\n  selectionMode: _propTypes.default.string,\n  selectionKeys: _propTypes.default.any,\n  onSelectionChange: _propTypes.default.func,\n  contextMenuSelectionKey: _propTypes.default.any,\n  onContextMenuSelectionChange: _propTypes.default.func,\n  expandedKeys: _propTypes.default.object,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  contentStyle: _propTypes.default.object,\n  contentClassName: _propTypes.default.string,\n  metaKeySelection: _propTypes.default.bool,\n  propagateSelectionUp: _propTypes.default.bool,\n  propagateSelectionDown: _propTypes.default.bool,\n  loading: _propTypes.default.bool,\n  loadingIcon: _propTypes.default.string,\n  dragdropScope: _propTypes.default.string,\n  filter: _propTypes.default.bool,\n  filterBy: _propTypes.default.any,\n  filterMode: _propTypes.default.string,\n  filterPlaceholder: _propTypes.default.string,\n  nodeTemplate: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  onUnselect: _propTypes.default.func,\n  onExpand: _propTypes.default.func,\n  onCollapse: _propTypes.default.func,\n  onToggle: _propTypes.default.func,\n  onDragDrop: _propTypes.default.func,\n  onContextMenu: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}