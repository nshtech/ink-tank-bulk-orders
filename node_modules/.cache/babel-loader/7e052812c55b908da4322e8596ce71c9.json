{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorPicker = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _ColorPickerPanel = require(\"./ColorPickerPanel\");\n\nvar _Tooltip = _interopRequireDefault(require(\"../tooltip/Tooltip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ColorPicker = /*#__PURE__*/function (_Component) {\n  _inherits(ColorPicker, _Component);\n\n  function ColorPicker(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorPicker).call(this, props));\n    _this.onPanelClick = _this.onPanelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputClick = _this.onInputClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputKeydown = _this.onInputKeydown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: \"onHueMousedown\",\n    value: function onHueMousedown(event) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.hueDragging = true;\n      this.bindDocumentMouseMoveListener();\n      this.bindDocumentMouseUpListener();\n      this.pickHue(event);\n\n      _DomHandler.default.addClass(this.container, 'p-colorpicker-dragging');\n    }\n  }, {\n    key: \"pickHue\",\n    value: function pickHue(event) {\n      var top = this.hueView.getBoundingClientRect().top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n      this.hsbValue = this.validateHSB({\n        h: Math.floor(360 * (150 - Math.max(0, Math.min(150, event.pageY - top))) / 150),\n        s: 100,\n        b: 100\n      });\n      this.updateColorSelector();\n      this.updateHue();\n      this.updateModel();\n    }\n  }, {\n    key: \"onColorMousedown\",\n    value: function onColorMousedown(event) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.colorDragging = true;\n      this.bindDocumentMouseMoveListener();\n      this.bindDocumentMouseUpListener();\n      this.pickColor(event);\n\n      _DomHandler.default.addClass(this.container, 'p-colorpicker-dragging');\n    }\n  }, {\n    key: \"pickColor\",\n    value: function pickColor(event) {\n      var rect = this.colorSelector.getBoundingClientRect();\n      var top = rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n      var left = rect.left + document.body.scrollLeft;\n      var saturation = Math.floor(100 * Math.max(0, Math.min(150, event.pageX - left)) / 150);\n      var brightness = Math.floor(100 * (150 - Math.max(0, Math.min(150, event.pageY - top))) / 150);\n      this.hsbValue = this.validateHSB({\n        h: this.hsbValue.h,\n        s: saturation,\n        b: brightness\n      });\n      this.updateColorHandle();\n      this.updateInput();\n      this.updateModel();\n    }\n  }, {\n    key: \"updateModel\",\n    value: function updateModel() {\n      switch (this.props.format) {\n        case 'hex':\n          this.onChange(this.HSBtoHEX(this.hsbValue));\n          break;\n\n        case 'rgb':\n          this.onChange(this.HSBtoRGB(this.hsbValue));\n          break;\n\n        case 'hsb':\n          this.onChange(this.hsbValue);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"toHSB\",\n    value: function toHSB(value) {\n      var hsb;\n\n      if (value) {\n        switch (this.props.format) {\n          case 'hex':\n            hsb = this.HEXtoHSB(value);\n            break;\n\n          case 'rgb':\n            hsb = this.RGBtoHSB(value);\n            break;\n\n          case 'hsb':\n            hsb = value;\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        hsb = this.HEXtoHSB(this.props.defaultColor);\n      }\n\n      return hsb;\n    }\n  }, {\n    key: \"updateHSBValue\",\n    value: function updateHSBValue(value) {\n      this.hsbValue = this.toHSB(value);\n    }\n  }, {\n    key: \"areHSBEqual\",\n    value: function areHSBEqual(val1, val2) {\n      return val1.h === val2.h && val1.s === val2.s && val1.b === val2.b;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(value) {\n      if (this.props.onChange) {\n        this.props.onChange({\n          value: value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateColorSelector\",\n    value: function updateColorSelector() {\n      var hsbValue = this.validateHSB({\n        h: this.hsbValue.h,\n        s: 100,\n        b: 100\n      });\n      this.colorSelector.style.backgroundColor = '#' + this.HSBtoHEX(hsbValue);\n    }\n  }, {\n    key: \"updateColorHandle\",\n    value: function updateColorHandle() {\n      this.colorHandle.style.left = Math.floor(150 * this.hsbValue.s / 100) + 'px';\n      this.colorHandle.style.top = Math.floor(150 * (100 - this.hsbValue.b) / 100) + 'px';\n    }\n  }, {\n    key: \"updateHue\",\n    value: function updateHue() {\n      this.hueHandle.style.top = Math.floor(150 - 150 * this.hsbValue.h / 360) + 'px';\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput() {\n      if (this.input) {\n        this.input.style.backgroundColor = '#' + this.HSBtoHEX(this.hsbValue);\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this2 = this;\n\n      this.panel.element.style.zIndex = String(_DomHandler.default.generateZIndex());\n      this.panel.element.style.display = 'block';\n      setTimeout(function () {\n        _DomHandler.default.addClass(_this2.panel.element, 'p-input-overlay-visible');\n\n        _DomHandler.default.removeClass(_this2.panel.element, 'p-input-overlay-hidden');\n      }, 1);\n      this.alignPanel();\n      this.bindDocumentClickListener();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _this3 = this;\n\n      _DomHandler.default.addClass(this.panel.element, 'p-input-overlay-hidden');\n\n      _DomHandler.default.removeClass(this.panel.element, 'p-input-overlay-visible');\n\n      this.unbindDocumentClickListener();\n      setTimeout(function () {\n        _this3.panel.element.style.display = 'none';\n\n        _DomHandler.default.removeClass(_this3.panel.element, 'p-input-overlay-hidden');\n      }, 150);\n    }\n  }, {\n    key: \"onInputClick\",\n    value: function onInputClick() {\n      if (this.documentClickListener) {\n        this.selfClick = true;\n      }\n\n      this.togglePanel();\n    }\n  }, {\n    key: \"togglePanel\",\n    value: function togglePanel() {\n      if (!this.panel.element.offsetParent) this.show();else this.hide();\n    }\n  }, {\n    key: \"onInputKeydown\",\n    value: function onInputKeydown(event) {\n      switch (event.which) {\n        //space\n        case 32:\n          this.togglePanel();\n          event.preventDefault();\n          break;\n        //escape and tab\n\n        case 27:\n        case 9:\n          this.hide();\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"onPanelClick\",\n    value: function onPanelClick() {\n      this.selfClick = true;\n    }\n  }, {\n    key: \"bindDocumentClickListener\",\n    value: function bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        this.documentClickListener = this.onDocumentClick.bind(this);\n        document.addEventListener('click', this.documentClickListener);\n      }\n    }\n  }, {\n    key: \"onDocumentClick\",\n    value: function onDocumentClick() {\n      if (!this.selfClick) {\n        this.hide();\n        this.unbindDocumentClickListener();\n      }\n\n      this.selfClick = false;\n    }\n  }, {\n    key: \"unbindDocumentClickListener\",\n    value: function unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        document.removeEventListener('click', this.documentClickListener);\n        this.documentClickListener = null;\n      }\n    }\n  }, {\n    key: \"bindDocumentMouseMoveListener\",\n    value: function bindDocumentMouseMoveListener() {\n      if (!this.documentMouseMoveListener) {\n        this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n        document.addEventListener('mousemove', this.documentMouseMoveListener);\n      }\n    }\n  }, {\n    key: \"onDocumentMouseMove\",\n    value: function onDocumentMouseMove(event) {\n      if (this.colorDragging) {\n        this.pickColor(event);\n      }\n\n      if (this.hueDragging) {\n        this.pickHue(event);\n      }\n    }\n  }, {\n    key: \"unbindDocumentMouseMoveListener\",\n    value: function unbindDocumentMouseMoveListener() {\n      if (this.documentMouseMoveListener) {\n        document.removeEventListener('mousemove', this.documentMouseMoveListener);\n        this.documentMouseMoveListener = null;\n      }\n    }\n  }, {\n    key: \"bindDocumentMouseUpListener\",\n    value: function bindDocumentMouseUpListener() {\n      if (!this.documentMouseUpListener) {\n        this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n        document.addEventListener('mouseup', this.documentMouseUpListener);\n      }\n    }\n  }, {\n    key: \"onDocumentMouseUp\",\n    value: function onDocumentMouseUp() {\n      this.colorDragging = false;\n      this.hueDragging = false;\n\n      _DomHandler.default.removeClass(this.container, 'p-colorpicker-dragging');\n\n      this.unbindDocumentMouseMoveListener();\n      this.unbindDocumentMouseUpListener();\n    }\n  }, {\n    key: \"unbindDocumentMouseUpListener\",\n    value: function unbindDocumentMouseUpListener() {\n      if (this.documentMouseUpListener) {\n        document.removeEventListener('mouseup', this.documentMouseUpListener);\n        this.documentMouseUpListener = null;\n      }\n    }\n  }, {\n    key: \"validateHSB\",\n    value: function validateHSB(hsb) {\n      return {\n        h: Math.min(360, Math.max(0, hsb.h)),\n        s: Math.min(100, Math.max(0, hsb.s)),\n        b: Math.min(100, Math.max(0, hsb.b))\n      };\n    }\n  }, {\n    key: \"validateRGB\",\n    value: function validateRGB(rgb) {\n      return {\n        r: Math.min(255, Math.max(0, rgb.r)),\n        g: Math.min(255, Math.max(0, rgb.g)),\n        b: Math.min(255, Math.max(0, rgb.b))\n      };\n    }\n  }, {\n    key: \"validateHEX\",\n    value: function validateHEX(hex) {\n      var len = 6 - hex.length;\n\n      if (len > 0) {\n        var o = [];\n\n        for (var i = 0; i < len; i++) {\n          o.push('0');\n        }\n\n        o.push(hex);\n        hex = o.join('');\n      }\n\n      return hex;\n    }\n  }, {\n    key: \"HEXtoRGB\",\n    value: function HEXtoRGB(hex) {\n      var hexValue = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n      return {\n        r: hexValue >> 16,\n        g: (hexValue & 0x00FF00) >> 8,\n        b: hexValue & 0x0000FF\n      };\n    }\n  }, {\n    key: \"HEXtoHSB\",\n    value: function HEXtoHSB(hex) {\n      return this.RGBtoHSB(this.HEXtoRGB(hex));\n    }\n  }, {\n    key: \"RGBtoHSB\",\n    value: function RGBtoHSB(rgb) {\n      var hsb = {\n        h: 0,\n        s: 0,\n        b: 0\n      };\n      var min = Math.min(rgb.r, rgb.g, rgb.b);\n      var max = Math.max(rgb.r, rgb.g, rgb.b);\n      var delta = max - min;\n      hsb.b = max;\n\n      if (max !== 0) {}\n\n      hsb.s = max !== 0 ? 255 * delta / max : 0;\n\n      if (hsb.s !== 0) {\n        if (rgb.r === max) {\n          hsb.h = (rgb.g - rgb.b) / delta;\n        } else if (rgb.g === max) {\n          hsb.h = 2 + (rgb.b - rgb.r) / delta;\n        } else {\n          hsb.h = 4 + (rgb.r - rgb.g) / delta;\n        }\n      } else {\n        hsb.h = -1;\n      }\n\n      hsb.h *= 60;\n\n      if (hsb.h < 0) {\n        hsb.h += 360;\n      }\n\n      hsb.s *= 100 / 255;\n      hsb.b *= 100 / 255;\n      return hsb;\n    }\n  }, {\n    key: \"HSBtoRGB\",\n    value: function HSBtoRGB(hsb) {\n      var rgb = {\n        r: null,\n        g: null,\n        b: null\n      };\n      var h = Math.round(hsb.h);\n      var s = Math.round(hsb.s * 255 / 100);\n      var v = Math.round(hsb.b * 255 / 100);\n\n      if (s === 0) {\n        rgb = {\n          r: v,\n          g: v,\n          b: v\n        };\n      } else {\n        var t1 = v;\n        var t2 = (255 - s) * v / 255;\n        var t3 = (t1 - t2) * (h % 60) / 60;\n        if (h === 360) h = 0;\n\n        if (h < 60) {\n          rgb.r = t1;\n          rgb.b = t2;\n          rgb.g = t2 + t3;\n        } else if (h < 120) {\n          rgb.g = t1;\n          rgb.b = t2;\n          rgb.r = t1 - t3;\n        } else if (h < 180) {\n          rgb.g = t1;\n          rgb.r = t2;\n          rgb.b = t2 + t3;\n        } else if (h < 240) {\n          rgb.b = t1;\n          rgb.r = t2;\n          rgb.g = t1 - t3;\n        } else if (h < 300) {\n          rgb.b = t1;\n          rgb.g = t2;\n          rgb.r = t2 + t3;\n        } else if (h < 360) {\n          rgb.r = t1;\n          rgb.g = t2;\n          rgb.b = t1 - t3;\n        } else {\n          rgb.r = 0;\n          rgb.g = 0;\n          rgb.b = 0;\n        }\n      }\n\n      return {\n        r: Math.round(rgb.r),\n        g: Math.round(rgb.g),\n        b: Math.round(rgb.b)\n      };\n    }\n  }, {\n    key: \"RGBtoHEX\",\n    value: function RGBtoHEX(rgb) {\n      var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];\n\n      for (var key in hex) {\n        if (hex[key].length === 1) {\n          hex[key] = '0' + hex[key];\n        }\n      }\n\n      return hex.join('');\n    }\n  }, {\n    key: \"HSBtoHEX\",\n    value: function HSBtoHEX(hsb) {\n      return this.RGBtoHEX(this.HSBtoRGB(hsb));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateHSBValue(this.props.value);\n      this.updateUI();\n\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.updateUI();\n\n      if (this.props.tooltip && prevProps.tooltip !== this.props.tooltip) {\n        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentMouseMoveListener();\n      this.unbindDocumentMouseUpListener();\n\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.colorDragging) {\n        return false;\n      } else {\n        var oldValue = this.hsbValue;\n        this.updateHSBValue(nextProps.value);\n        var newValue = this.toHSB(nextProps.value);\n        var equals = newValue.h === oldValue.h && newValue.s === oldValue.s && newValue.b === oldValue.b;\n        return !equals;\n      }\n    }\n  }, {\n    key: \"updateUI\",\n    value: function updateUI() {\n      this.updateHue();\n      this.updateColorHandle();\n      this.updateInput();\n      this.updateColorSelector();\n    }\n  }, {\n    key: \"alignPanel\",\n    value: function alignPanel() {\n      if (this.props.appendTo) {\n        this.panel.element.style.minWidth = _DomHandler.default.getWidth(this.container) + 'px';\n\n        _DomHandler.default.absolutePosition(this.panel.element, this.container);\n      } else {\n        _DomHandler.default.relativePosition(this.panel.element, this.container);\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = new _Tooltip.default({\n        target: this.container,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderColorSelector\",\n    value: function renderColorSelector() {\n      var _this4 = this;\n\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this4.colorSelector = el;\n        },\n        className: \"p-colorpicker-color-selector\",\n        onMouseDown: this.onColorMousedown.bind(this)\n      }, _react.default.createElement(\"div\", {\n        className: \"p-colorpicker-color\"\n      }, _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this4.colorHandle = el;\n        },\n        className: \"p-colorpicker-color-handle\"\n      })));\n    }\n  }, {\n    key: \"renderHue\",\n    value: function renderHue() {\n      var _this5 = this;\n\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this5.hueView = el;\n        },\n        className: \"p-colorpicker-hue\",\n        onMouseDown: this.onHueMousedown.bind(this)\n      }, _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this5.hueHandle = el;\n        },\n        className: \"p-colorpicker-hue-handle\"\n      }));\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var colorSelector = this.renderColorSelector();\n      var hue = this.renderHue();\n      return _react.default.createElement(\"div\", {\n        className: \"p-colorpicker-content\"\n      }, colorSelector, hue);\n    }\n  }, {\n    key: \"renderInput\",\n    value: function renderInput() {\n      var _this6 = this;\n\n      if (!this.props.inline) {\n        var inputClassName = (0, _classnames.default)('p-colorpicker-preview p-inputtext', {\n          'p-disabled': this.props.disabled\n        });\n        return _react.default.createElement(\"input\", {\n          ref: function ref(el) {\n            return _this6.input = el;\n          },\n          type: \"text\",\n          className: inputClassName,\n          readOnly: \"readonly\",\n          id: this.props.inputId,\n          tabIndex: this.props.tabIndex,\n          disabled: this.props.disabled,\n          onClick: this.onInputClick,\n          onKeyDown: this.onInputKeydown\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var className = (0, _classnames.default)('p-colorpicker p-component', this.props.className, {\n        'p-colorpicker-overlay': !this.props.inline\n      });\n      var content = this.renderContent();\n      var input = this.renderInput();\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this7.container = el;\n        },\n        id: this.props.id,\n        style: this.props.style,\n        className: className\n      }, input, _react.default.createElement(_ColorPickerPanel.ColorPickerPanel, {\n        ref: function ref(el) {\n          return _this7.panel = el;\n        },\n        appendTo: this.props.appendTo,\n        onClick: this.onPanelClick,\n        inline: this.props.inline,\n        disabled: this.props.disabled\n      }, content));\n    }\n  }]);\n\n  return ColorPicker;\n}(_react.Component);\n\nexports.ColorPicker = ColorPicker;\n\n_defineProperty(ColorPicker, \"defaultProps\", {\n  id: null,\n  value: null,\n  style: null,\n  className: null,\n  defaultColor: 'ff0000',\n  inline: false,\n  format: \"hex\",\n  appendTo: null,\n  disabled: false,\n  tabIndex: null,\n  inputId: null,\n  tooltip: null,\n  tooltipOptions: null,\n  onChange: null\n});\n\n_defineProperty(ColorPicker, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.any,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  defaultColor: _propTypes.default.string,\n  inline: _propTypes.default.bool,\n  format: _propTypes.default.string,\n  appendTo: _propTypes.default.any,\n  disabled: _propTypes.default.bool,\n  tabIndex: _propTypes.default.string,\n  inputId: _propTypes.default.string,\n  tooltip: _propTypes.default.string,\n  tooltipOptions: _propTypes.default.object,\n  onChange: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}