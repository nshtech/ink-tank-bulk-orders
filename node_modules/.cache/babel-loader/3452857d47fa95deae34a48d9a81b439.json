{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollableView = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ScrollableView = /*#__PURE__*/function (_Component) {\n  _inherits(ScrollableView, _Component);\n\n  function ScrollableView(props) {\n    var _this;\n\n    _classCallCheck(this, ScrollableView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollableView).call(this, props));\n    _this.onHeaderScroll = _this.onHeaderScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBodyScroll = _this.onBodyScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ScrollableView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setScrollHeight();\n\n      if (!this.props.frozen) {\n        this.alignScrollBar();\n      } else {\n        this.scrollBody.style.paddingBottom = _DomHandler.default.calculateScrollbarWidth() + 'px';\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (this.props.scrollHeight !== prevProps.scrollHeight) {\n        this.setScrollHeight();\n      }\n\n      if (!this.props.frozen) {\n        this.alignScrollBar();\n\n        if (this.props.virtualScroll) {\n          this.virtualScroller.style.height = this.props.totalRecords * this.props.virtualRowHeight + 'px';\n        }\n      }\n\n      if (this.virtualScrollCallback && !this.props.loading) {\n        this.virtualScrollCallback();\n        this.virtualScrollCallback = null;\n      }\n    }\n  }, {\n    key: \"setScrollHeight\",\n    value: function setScrollHeight() {\n      if (this.props.scrollHeight) {\n        if (this.props.scrollHeight.indexOf('%') !== -1) {\n          var datatableContainer = this.findDataTableContainer(this.container);\n          this.scrollBody.style.visibility = 'hidden';\n          this.scrollBody.style.height = '100px'; //temporary height to calculate static height\n\n          var containerHeight = _DomHandler.default.getOuterHeight(datatableContainer);\n\n          var relativeHeight = _DomHandler.default.getOuterHeight(datatableContainer.parentElement) * parseInt(this.props.scrollHeight, 10) / 100;\n          var staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n\n          var scrollBodyHeight = relativeHeight - staticHeight;\n          this.scrollBody.style.height = 'auto';\n          this.scrollBody.style.maxHeight = scrollBodyHeight + 'px';\n          this.scrollBody.style.visibility = 'visible';\n        } else {\n          this.scrollBody.style.maxHeight = this.props.scrollHeight;\n        }\n      }\n    }\n  }, {\n    key: \"findDataTableContainer\",\n    value: function findDataTableContainer(element) {\n      if (element) {\n        var el = element;\n\n        while (el && !_DomHandler.default.hasClass(el, 'p-datatable')) {\n          el = el.parentElement;\n        }\n\n        return el;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"onHeaderScroll\",\n    value: function onHeaderScroll() {\n      this.scrollHeader.scrollLeft = 0;\n    }\n  }, {\n    key: \"onBodyScroll\",\n    value: function onBodyScroll() {\n      var _this2 = this;\n\n      var frozenView = this.container.previousElementSibling;\n      var frozenScrollBody;\n\n      if (frozenView) {\n        frozenScrollBody = _DomHandler.default.findSingle(frozenView, '.p-datatable-scrollable-body');\n      }\n\n      this.scrollHeaderBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\n\n      if (this.scrollFooterBox) {\n        this.scrollFooterBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\n      }\n\n      if (frozenScrollBody) {\n        frozenScrollBody.scrollTop = this.scrollBody.scrollTop;\n      }\n\n      if (this.props.virtualScroll) {\n        var viewport = _DomHandler.default.getClientHeight(this.scrollBody);\n\n        var tableHeight = _DomHandler.default.getOuterHeight(this.scrollTable);\n\n        var pageHeight = this.props.virtualRowHeight * this.props.rows;\n\n        var virtualTableHeight = _DomHandler.default.getOuterHeight(this.virtualScroller);\n\n        var pageCount = virtualTableHeight / pageHeight || 1;\n        var scrollBodyTop = this.scrollTable.style.top || '0';\n\n        if (this.scrollBody.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight || this.scrollBody.scrollTop < parseFloat(scrollBodyTop)) {\n          if (this.loadingTable) {\n            this.loadingTable.style.display = 'table';\n            this.loadingTable.style.top = this.scrollBody.scrollTop + 'px';\n          }\n\n          var page = Math.floor(this.scrollBody.scrollTop * pageCount / this.scrollBody.scrollHeight) + 1;\n\n          if (this.props.onVirtualScroll) {\n            this.props.onVirtualScroll({\n              page: page\n            });\n\n            this.virtualScrollCallback = function () {\n              if (_this2.loadingTable) {\n                _this2.loadingTable.style.display = 'none';\n              }\n\n              _this2.scrollTable.style.top = (page - 1) * pageHeight + 'px';\n            };\n          }\n        }\n      }\n    }\n  }, {\n    key: \"hasVerticalOverflow\",\n    value: function hasVerticalOverflow() {\n      return _DomHandler.default.getOuterHeight(this.scrollTable) > _DomHandler.default.getOuterHeight(this.scrollBody);\n    }\n  }, {\n    key: \"alignScrollBar\",\n    value: function alignScrollBar() {\n      var scrollBarWidth = this.hasVerticalOverflow() ? _DomHandler.default.calculateScrollbarWidth() : 0;\n      this.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';\n\n      if (this.scrollFooterBox) {\n        this.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';\n      }\n    }\n  }, {\n    key: \"renderColGroup\",\n    value: function renderColGroup() {\n      if (this.props.columns && this.props.columns.length) {\n        return _react.default.createElement(\"colgroup\", {\n          className: \"p-datatable-scrollable-colgroup\"\n        }, this.props.columns.map(function (col, i) {\n          return _react.default.createElement(\"col\", {\n            key: col.props.field + '_' + i,\n            style: col.props.headerStyle || col.props.style\n          });\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderLoadingTable\",\n    value: function renderLoadingTable(colGroup) {\n      var _this3 = this;\n\n      if (this.props.virtualScroll) {\n        return _react.default.createElement(\"table\", {\n          ref: function ref(el) {\n            return _this3.loadingTable = el;\n          },\n          style: {\n            top: '0',\n            display: 'none'\n          },\n          className: \"p-datatable-scrollable-body-table p-datatable-loading-virtual-table p-datatable-virtual-table\"\n        }, colGroup, this.props.loadingBody);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var className = (0, _classnames.default)('p-datatable-scrollable-view', {\n        'p-datatable-frozen-view': this.props.frozen,\n        'p-datatable-unfrozen-view': !this.props.frozen && this.props.frozenWidth\n      });\n      var tableBodyClassName = (0, _classnames.default)('p-datatable-scrollable-body-table', this.props.tableClassName, {\n        'p-datatable-virtual-table': this.props.virtualScroll\n      });\n      var tableHeaderClassName = (0, _classnames.default)('p-datatable-scrollable-header-table', this.props.tableClassName);\n      var tableFooterClassName = (0, _classnames.default)('p-datatable-scrollable-footer-table', this.props.tableClassName);\n      var tableBodyStyle = Object.assign({\n        top: '0'\n      }, this.props.tableStyle);\n      var width = this.props.frozen ? this.props.frozenWidth : 'calc(100% - ' + this.props.frozenWidth + ')';\n      var left = this.props.frozen ? null : this.props.frozenWidth;\n      var colGroup = this.renderColGroup();\n      var loadingTable = this.renderLoadingTable(colGroup);\n      return _react.default.createElement(\"div\", {\n        className: className,\n        style: {\n          width: width,\n          left: left\n        },\n        ref: function ref(el) {\n          _this4.container = el;\n        }\n      }, _react.default.createElement(\"div\", {\n        className: \"p-datatable-scrollable-header\",\n        ref: function ref(el) {\n          _this4.scrollHeader = el;\n        },\n        onScroll: this.onHeaderScroll\n      }, _react.default.createElement(\"div\", {\n        className: \"p-datatable-scrollable-header-box\",\n        ref: function ref(el) {\n          _this4.scrollHeaderBox = el;\n        }\n      }, _react.default.createElement(\"table\", {\n        className: tableHeaderClassName,\n        style: this.props.tableStyle\n      }, colGroup, this.props.header, this.props.frozenBody))), _react.default.createElement(\"div\", {\n        className: \"p-datatable-scrollable-body\",\n        ref: function ref(el) {\n          _this4.scrollBody = el;\n        },\n        onScroll: this.onBodyScroll\n      }, _react.default.createElement(\"table\", {\n        ref: function ref(el) {\n          return _this4.scrollTable = el;\n        },\n        style: tableBodyStyle,\n        className: tableBodyClassName\n      }, colGroup, this.props.body), loadingTable, _react.default.createElement(\"div\", {\n        className: \"p-datatable-virtual-scroller\",\n        ref: function ref(el) {\n          _this4.virtualScroller = el;\n        }\n      })), _react.default.createElement(\"div\", {\n        className: \"p-datatable-scrollable-footer\",\n        ref: function ref(el) {\n          _this4.scrollFooter = el;\n        }\n      }, _react.default.createElement(\"div\", {\n        className: \"p-datatable-scrollable-footer-box\",\n        ref: function ref(el) {\n          _this4.scrollFooterBox = el;\n        }\n      }, _react.default.createElement(\"table\", {\n        className: tableFooterClassName,\n        style: this.props.tableStyle\n      }, colGroup, this.props.footer))));\n    }\n  }]);\n\n  return ScrollableView;\n}(_react.Component);\n\nexports.ScrollableView = ScrollableView;\n\n_defineProperty(ScrollableView, \"defaultProps\", {\n  header: null,\n  body: null,\n  footer: null,\n  columns: null,\n  frozen: null,\n  frozenWidth: null,\n  frozenBody: null,\n  virtualScroll: false,\n  virtualRowHeight: null,\n  rows: null,\n  totalRecords: null,\n  loading: false,\n  tableStyle: null,\n  tableClassName: null,\n  onVirtualScroll: null\n});\n\n_defineProperty(ScrollableView, \"propTypes\", {\n  header: _propTypes.default.any,\n  body: _propTypes.default.any,\n  footer: _propTypes.default.any,\n  columns: _propTypes.default.array,\n  frozen: _propTypes.default.bool,\n  frozenWidth: _propTypes.default.string,\n  frozenBody: _propTypes.default.any,\n  virtualScroll: _propTypes.default.bool,\n  virtualRowHeight: _propTypes.default.number,\n  rows: _propTypes.default.number,\n  totalRcords: _propTypes.default.number,\n  loading: _propTypes.default.bool,\n  tableStyle: _propTypes.default.any,\n  tableClassName: _propTypes.default.string,\n  onVirtualScroll: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}