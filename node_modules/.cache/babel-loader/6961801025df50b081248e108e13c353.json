{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoComplete = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _InputText = require(\"../inputtext/InputText\");\n\nvar _Button = require(\"../button/Button\");\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _ObjectUtils = _interopRequireDefault(require(\"../utils/ObjectUtils\"));\n\nvar _AutoCompletePanel = require(\"./AutoCompletePanel\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Tooltip = _interopRequireDefault(require(\"../tooltip/Tooltip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AutoComplete = /*#__PURE__*/function (_Component) {\n  _inherits(AutoComplete, _Component);\n\n  function AutoComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).call(this, props));\n    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputFocus = _this.onInputFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputBlur = _this.onInputBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputClick = _this.onInputClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputKeyDown = _this.onInputKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDropdownClick = _this.onDropdownClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMultiContainerClick = _this.onMultiContainerClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMultiInputFocus = _this.onMultiInputFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMultiInputBlur = _this.onMultiInputBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectItem = _this.selectItem.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"onInputChange\",\n    value: function onInputChange(event) {\n      var _this2 = this; //Cancel the search request if user types within the timeout\n\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      var query = event.target.value;\n\n      if (!this.props.multiple) {\n        this.updateModel(event, query);\n      }\n\n      if (query.length === 0) {\n        this.hidePanel();\n\n        if (this.props.onClear) {\n          this.props.onClear(event);\n        }\n      } else {\n        if (query.length >= this.props.minLength) {\n          this.timeout = setTimeout(function () {\n            _this2.search(event, query, 'input');\n          }, this.props.delay);\n        } else {\n          this.hidePanel();\n        }\n      }\n    }\n  }, {\n    key: \"onInputClick\",\n    value: function onInputClick(event) {\n      if (this.documentClickListener) {\n        this.inputClick = true;\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(event);\n      }\n    }\n  }, {\n    key: \"search\",\n    value: function search(event, query, source) {\n      //allow empty string but not undefined or null\n      if (query === undefined || query === null) {\n        return;\n      } //do not search blank values on input change\n\n\n      if (source === 'input' && query.trim().length === 0) {\n        return;\n      }\n\n      if (this.props.completeMethod) {\n        this.searching = true;\n        this.showLoader();\n        this.props.completeMethod({\n          originalEvent: event,\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"selectItem\",\n    value: function selectItem(event, option) {\n      if (this.props.multiple) {\n        this.inputEl.value = '';\n\n        if (!this.isSelected(option)) {\n          var newValue = this.props.value ? [].concat(_toConsumableArray(this.props.value), [option]) : [option];\n          this.updateModel(event, newValue);\n        }\n      } else {\n        this.updateInputField(option);\n        this.updateModel(event, option);\n      }\n\n      if (this.props.onSelect) {\n        this.props.onSelect({\n          originalEvent: event,\n          value: option\n        });\n      }\n\n      this.inputEl.focus();\n    }\n  }, {\n    key: \"updateModel\",\n    value: function updateModel(event, value) {\n      if (this.props.onChange) {\n        this.props.onChange({\n          originalEvent: event,\n          value: value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      if (value) {\n        if (this.props.selectedItemTemplate) {\n          var resolvedFieldData = this.props.selectedItemTemplate(value);\n          return resolvedFieldData ? resolvedFieldData : value;\n        } else if (this.props.field) {\n          var _resolvedFieldData = _ObjectUtils.default.resolveFieldData(value, this.props.field);\n\n          return _resolvedFieldData !== null && _resolvedFieldData !== undefined ? _resolvedFieldData : value;\n        } else return value;\n      } else return '';\n    }\n  }, {\n    key: \"updateInputField\",\n    value: function updateInputField(value) {\n      var formattedValue = this.formatValue(value);\n      this.inputEl.value = formattedValue;\n    }\n  }, {\n    key: \"showPanel\",\n    value: function showPanel() {\n      var _this3 = this;\n\n      if (this.focus) {\n        this.alignPanel();\n\n        if (this.panel && this.panel.element && !this.panel.element.offsetParent) {\n          this.panel.element.style.zIndex = String(_DomHandler.default.generateZIndex());\n          this.panel.element.style.display = \"block\";\n          setTimeout(function () {\n            if (_this3.panel && _this3.panel.element) {\n              _DomHandler.default.addClass(_this3.panel.element, 'p-input-overlay-visible');\n\n              _DomHandler.default.removeClass(_this3.panel.element, 'p-input-overlay-hidden');\n            }\n          }, 1);\n          this.alignPanel();\n          this.bindDocumentClickListener();\n        }\n      }\n    }\n  }, {\n    key: \"alignPanel\",\n    value: function alignPanel() {\n      if (this.panel.element.offsetParent) {\n        var target = this.props.multiple ? this.multiContainer : this.inputEl;\n\n        if (this.props.appendTo) {\n          this.panel.element.style.minWidth = _DomHandler.default.getWidth(target) + 'px';\n\n          _DomHandler.default.absolutePosition(this.panel.element, target);\n        } else {\n          _DomHandler.default.relativePosition(this.panel.element, target);\n        }\n      }\n    }\n  }, {\n    key: \"hidePanel\",\n    value: function hidePanel() {\n      var _this4 = this;\n\n      _DomHandler.default.addClass(this.panel.element, 'p-input-overlay-hidden');\n\n      _DomHandler.default.removeClass(this.panel.element, 'p-input-overlay-visible');\n\n      setTimeout(function () {\n        if (_this4.panel && _this4.panel.element) {\n          _this4.panel.element.style.display = 'none';\n\n          _DomHandler.default.removeClass(_this4.panel.element, 'p-input-overlay-hidden');\n        }\n      }, 150);\n      this.unbindDocumentClickListener();\n    }\n  }, {\n    key: \"onDropdownClick\",\n    value: function onDropdownClick(event) {\n      this.inputEl.focus();\n\n      if (this.documentClickListener) {\n        this.dropdownClick = true;\n      }\n\n      if (this.props.dropdownMode === 'blank') this.search(event, '', 'dropdown');else if (this.props.dropdownMode === 'current') this.search(event, this.inputEl.value, 'dropdown');\n\n      if (this.props.onDropdownClick) {\n        this.props.onDropdownClick({\n          originalEvent: event,\n          query: this.inputEl.value\n        });\n      }\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(event, index) {\n      var removedValue = this.props.value[index];\n      var newValue = this.props.value.filter(function (val, i) {\n        return index !== i;\n      });\n      this.updateModel(event, newValue);\n\n      if (this.props.onUnselect) {\n        this.props.onUnselect({\n          originalEvent: event,\n          value: removedValue\n        });\n      }\n    }\n  }, {\n    key: \"onInputKeyDown\",\n    value: function onInputKeyDown(event) {\n      if (this.isPanelVisible()) {\n        var highlightItem = _DomHandler.default.findSingle(this.panel.element, 'li.p-highlight');\n\n        switch (event.which) {\n          //down\n          case 40:\n            if (highlightItem) {\n              var nextElement = highlightItem.nextElementSibling;\n\n              if (nextElement) {\n                _DomHandler.default.addClass(nextElement, 'p-highlight');\n\n                _DomHandler.default.removeClass(highlightItem, 'p-highlight');\n\n                _DomHandler.default.scrollInView(this.panel.element, nextElement);\n              }\n            } else {\n              _DomHandler.default.addClass(this.panel.element.firstChild.firstChild, 'p-highlight');\n            }\n\n            event.preventDefault();\n            break;\n          //up\n\n          case 38:\n            if (highlightItem) {\n              var previousElement = highlightItem.previousElementSibling;\n\n              if (previousElement) {\n                _DomHandler.default.addClass(previousElement, 'p-highlight');\n\n                _DomHandler.default.removeClass(highlightItem, 'p-highlight');\n\n                _DomHandler.default.scrollInView(this.panel.element, previousElement);\n              }\n            }\n\n            event.preventDefault();\n            break;\n          //enter,tab\n\n          case 13:\n            if (highlightItem) {\n              this.selectItem(event, this.props.suggestions[_DomHandler.default.index(highlightItem)]);\n              this.hidePanel();\n            }\n\n            event.preventDefault();\n            break;\n          //escape\n\n          case 27:\n            this.hidePanel();\n            event.preventDefault();\n            break;\n          //tab\n\n          case 9:\n            if (highlightItem) {\n              this.selectItem(event, this.props.suggestions[_DomHandler.default.index(highlightItem)]);\n            }\n\n            this.hidePanel();\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.props.multiple) {\n        switch (event.which) {\n          //backspace\n          case 8:\n            if (this.props.value && this.props.value.length && !this.inputEl.value) {\n              var removedValue = this.props.value[this.props.value.length - 1];\n              var newValue = this.props.value.slice(0, -1);\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  value: removedValue\n                });\n              }\n\n              this.updateModel(event, newValue);\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      this.focus = true;\n\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n\n      _DomHandler.default.addClass(this.container, 'p-inputwrapper-focus');\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      this.focus = false;\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n\n      _DomHandler.default.removeClass(this.container, 'p-inputwrapper-focus');\n    }\n  }, {\n    key: \"onMultiContainerClick\",\n    value: function onMultiContainerClick(event) {\n      this.inputEl.focus();\n\n      if (this.documentClickListener) {\n        this.inputClick = true;\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(event);\n      }\n    }\n  }, {\n    key: \"onMultiInputFocus\",\n    value: function onMultiInputFocus(event) {\n      this.onInputFocus(event);\n\n      _DomHandler.default.addClass(this.multiContainer, 'p-focus');\n    }\n  }, {\n    key: \"onMultiInputBlur\",\n    value: function onMultiInputBlur(event) {\n      this.onInputBlur(event);\n\n      _DomHandler.default.removeClass(this.multiContainer, 'p-focus');\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(val) {\n      var selected = false;\n\n      if (this.props.value && this.props.value.length) {\n        for (var i = 0; i < this.props.value.length; i++) {\n          if (_ObjectUtils.default.equals(this.props.value[i], val)) {\n            selected = true;\n            break;\n          }\n        }\n      }\n\n      return selected;\n    }\n  }, {\n    key: \"findOptionIndex\",\n    value: function findOptionIndex(option) {\n      var index = -1;\n\n      if (this.suggestions) {\n        for (var i = 0; i < this.suggestions.length; i++) {\n          if (_ObjectUtils.default.equals(option, this.suggestions[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindDocumentClickListener();\n\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.searching) {\n        if (this.props.suggestions && this.props.suggestions.length) this.showPanel();else this.hidePanel();\n        this.hideLoader();\n      }\n\n      this.searching = false;\n\n      if (this.inputEl && !this.props.multiple) {\n        this.updateInputField(this.props.value);\n      }\n\n      if (this.props.tooltip && prevProps.tooltip !== this.props.tooltip) {\n        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"showLoader\",\n    value: function showLoader() {\n      this.loader.style.visibility = 'visible';\n    }\n  }, {\n    key: \"hideLoader\",\n    value: function hideLoader() {\n      this.loader.style.visibility = 'hidden';\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = new _Tooltip.default({\n        target: this.container,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderSimpleAutoComplete\",\n    value: function renderSimpleAutoComplete() {\n      var _this5 = this;\n\n      var inputClassName = (0, _classnames.default)('p-autocomplete-input', this.props.inputClassName, {\n        'p-autocomplete-dd-input': this.props.dropdown\n      });\n      return _react.default.createElement(_InputText.InputText, {\n        ref: function ref(el) {\n          return _this5.inputEl = _reactDom.default.findDOMNode(el);\n        },\n        id: this.props.inputId,\n        type: \"text\",\n        name: this.props.name,\n        defaultValue: this.formatValue(this.props.value),\n        className: inputClassName,\n        style: this.props.inputStyle,\n        autoComplete: \"off\",\n        readOnly: this.props.readonly,\n        disabled: this.props.disabled,\n        placeholder: this.props.placeholder,\n        size: this.props.size,\n        maxLength: this.props.maxlength,\n        tabIndex: this.props.tabindex,\n        onBlur: this.onInputBlur,\n        onFocus: this.onInputFocus,\n        onChange: this.onInputChange,\n        onMouseDown: this.props.onMouseDown,\n        onKeyUp: this.props.onKeyUp,\n        onKeyDown: this.onInputKeyDown,\n        onKeyPress: this.props.onKeyPress,\n        onContextMenu: this.props.onContextMenu,\n        onClick: this.onInputClick,\n        onDoubleClick: this.props.onDblClick\n      });\n    }\n  }, {\n    key: \"renderChips\",\n    value: function renderChips() {\n      var _this6 = this;\n\n      if (this.props.value && this.props.value.length) {\n        return this.props.value.map(function (val, index) {\n          return _react.default.createElement(\"li\", {\n            key: index + 'multi-item',\n            className: \"p-autocomplete-token p-highlight\"\n          }, _react.default.createElement(\"span\", {\n            className: \"p-autocomplete-token-icon pi pi-fw pi-times\",\n            onClick: function onClick(e) {\n              return _this6.removeItem(e, index);\n            }\n          }), _react.default.createElement(\"span\", {\n            className: \"p-autocomplete-token-label\"\n          }, _this6.formatValue(val)));\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderMultiInput\",\n    value: function renderMultiInput() {\n      var _this7 = this;\n\n      return _react.default.createElement(\"li\", {\n        className: \"p-autocomplete-input-token\"\n      }, _react.default.createElement(\"input\", {\n        ref: function ref(el) {\n          return _this7.inputEl = el;\n        },\n        type: \"text\",\n        disabled: this.props.disabled,\n        placeholder: this.props.placeholder,\n        autoComplete: \"off\",\n        tabIndex: this.props.tabindex,\n        onChange: this.onInputChange,\n        id: this.props.inputId,\n        name: this.props.name,\n        style: this.props.inputStyle,\n        className: this.props.inputClassName,\n        onKeyUp: this.props.onKeyUp,\n        onKeyDown: this.onInputKeyDown,\n        onKeyPress: this.props.onKeyPress,\n        onFocus: this.onMultiInputFocus,\n        onBlur: this.onMultiInputBlur\n      }));\n    }\n  }, {\n    key: \"renderMultipleAutoComplete\",\n    value: function renderMultipleAutoComplete() {\n      var _this8 = this;\n\n      var multiContainerClass = (0, _classnames.default)(\"p-autocomplete-multiple-container p-component p-inputtext\", {\n        'p-disabled': this.props.disabled\n      });\n      var tokens = this.renderChips();\n      var input = this.renderMultiInput();\n      return _react.default.createElement(\"ul\", {\n        ref: function ref(el) {\n          _this8.multiContainer = el;\n        },\n        className: multiContainerClass,\n        onContextMenu: this.props.onContextMenu,\n        onMouseDown: this.props.onMouseDown,\n        onClick: this.onMultiContainerClick,\n        onDoubleClick: this.props.onDblClick\n      }, tokens, input);\n    }\n  }, {\n    key: \"renderDropdown\",\n    value: function renderDropdown() {\n      return _react.default.createElement(_Button.Button, {\n        type: \"button\",\n        icon: \"pi pi-fw pi-chevron-down\",\n        className: \"p-autocomplete-dropdown\",\n        disabled: this.props.disabled,\n        onClick: this.onDropdownClick\n      });\n    }\n  }, {\n    key: \"renderLoader\",\n    value: function renderLoader() {\n      var _this9 = this;\n\n      return _react.default.createElement(\"i\", {\n        ref: function ref(el) {\n          return _this9.loader = el;\n        },\n        className: \"p-autocomplete-loader pi pi-spinner pi-spin\",\n        style: {\n          visibility: 'hidden'\n        }\n      });\n    }\n  }, {\n    key: \"bindDocumentClickListener\",\n    value: function bindDocumentClickListener() {\n      var _this10 = this;\n\n      if (!this.documentClickListener) {\n        this.documentClickListener = function (event) {\n          if (event.which === 3) {\n            return;\n          }\n\n          if (!_this10.inputClick && !_this10.dropdownClick) {\n            _this10.hidePanel();\n          }\n\n          _this10.inputClick = false;\n          _this10.dropdownClick = false;\n        };\n\n        document.addEventListener('click', this.documentClickListener);\n      }\n    }\n  }, {\n    key: \"unbindDocumentClickListener\",\n    value: function unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        document.removeEventListener('click', this.documentClickListener);\n        this.documentClickListener = null;\n      }\n    }\n  }, {\n    key: \"isPanelVisible\",\n    value: function isPanelVisible() {\n      return this.panel.element.offsetParent != null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this11 = this;\n\n      var input, dropdown;\n      var className = (0, _classnames.default)('p-autocomplete p-component', this.props.className, {\n        'p-autocomplete-dd': this.props.dropdown,\n        'p-autocomplete-multiple': this.props.multiple,\n        'p-inputwrapper-filled': this.props.value,\n        'p-inputwrapper-focus': this.focus\n      });\n      var loader = this.renderLoader();\n      if (this.props.multiple) input = this.renderMultipleAutoComplete();else input = this.renderSimpleAutoComplete();\n\n      if (this.props.dropdown) {\n        dropdown = this.renderDropdown();\n      }\n\n      return _react.default.createElement(\"span\", {\n        ref: function ref(el) {\n          return _this11.container = el;\n        },\n        id: this.props.id,\n        style: this.props.style,\n        className: className\n      }, input, loader, dropdown, _react.default.createElement(_AutoCompletePanel.AutoCompletePanel, {\n        ref: function ref(el) {\n          return _this11.panel = el;\n        },\n        suggestions: this.props.suggestions,\n        field: this.props.field,\n        appendTo: this.props.appendTo,\n        itemTemplate: this.props.itemTemplate,\n        onItemClick: this.selectItem\n      }));\n    }\n  }]);\n\n  return AutoComplete;\n}(_react.Component);\n\nexports.AutoComplete = AutoComplete;\n\n_defineProperty(AutoComplete, \"defaultProps\", {\n  id: null,\n  value: null,\n  name: null,\n  suggestions: null,\n  field: null,\n  scrollHeight: '200px',\n  dropdown: false,\n  dropdownMode: 'blank',\n  multiple: false,\n  minLength: 1,\n  delay: 300,\n  style: null,\n  className: null,\n  inputId: null,\n  inputStyle: null,\n  inputClassName: null,\n  placeholder: null,\n  readonly: false,\n  disabled: false,\n  maxlength: null,\n  size: null,\n  appendTo: null,\n  tabindex: null,\n  tooltip: null,\n  tooltipOptions: null,\n  completeMethod: null,\n  itemTemplate: null,\n  selectedItemTemplate: null,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  onSelect: null,\n  onUnselect: null,\n  onDropdownClick: null,\n  onClick: null,\n  onDblClick: null,\n  onMouseDown: null,\n  onKeyUp: null,\n  onKeyPress: null,\n  onContextMenu: null,\n  onClear: null\n});\n\n_defineProperty(AutoComplete, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.any,\n  name: _propTypes.default.string,\n  suggestions: _propTypes.default.array,\n  field: _propTypes.default.string,\n  scrollHeight: _propTypes.default.string,\n  dropdown: _propTypes.default.bool,\n  dropdownMode: _propTypes.default.string,\n  multiple: _propTypes.default.bool,\n  minLength: _propTypes.default.number,\n  delay: _propTypes.default.number,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  inputId: _propTypes.default.string,\n  inputStyle: _propTypes.default.object,\n  inputClassName: _propTypes.default.string,\n  placeholder: _propTypes.default.string,\n  readonly: _propTypes.default.bool,\n  disabled: _propTypes.default.bool,\n  maxlength: _propTypes.default.number,\n  size: _propTypes.default.number,\n  appendTo: _propTypes.default.any,\n  tabindex: _propTypes.default.number,\n  tooltip: _propTypes.default.string,\n  tooltipOptions: _propTypes.default.object,\n  completeMethod: _propTypes.default.func,\n  itemTemplate: _propTypes.default.func,\n  selectedItemTemplate: _propTypes.default.func,\n  onChange: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n  onBlur: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  onUnselect: _propTypes.default.func,\n  onDropdownClick: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n  onDblClick: _propTypes.default.func,\n  onMouseDown: _propTypes.default.func,\n  onKeyUp: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  onContextMenu: _propTypes.default.func,\n  onClear: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}