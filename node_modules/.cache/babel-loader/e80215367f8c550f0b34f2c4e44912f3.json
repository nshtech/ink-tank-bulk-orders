{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeTableBodyCell = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _ObjectUtils = _interopRequireDefault(require(\"../utils/ObjectUtils\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar TreeTableBodyCell = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableBodyCell, _Component);\n\n  function TreeTableBodyCell(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableBodyCell);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeTableBodyCell).call(this, props));\n\n    if (_this.props.editor) {\n      _this.state = {};\n    }\n\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onEditorFocus = _this.onEditorFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TreeTableBodyCell, [{\n    key: \"onClick\",\n    value: function onClick() {\n      if (this.props.editor) {\n        this.setState({\n          editing: true\n        });\n        if (this.documentEditListener) this.cellClick = true;else this.bindDocumentEditListener();\n      }\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      if (event.which === 13 || event.which === 9) {\n        this.switchCellToViewMode();\n      }\n    }\n  }, {\n    key: \"bindDocumentEditListener\",\n    value: function bindDocumentEditListener() {\n      var _this2 = this;\n\n      if (!this.documentEditListener) {\n        this.documentEditListener = function (event) {\n          if (!_this2.cellClick) {\n            _this2.switchCellToViewMode();\n          }\n\n          _this2.cellClick = false;\n        };\n\n        document.addEventListener('click', this.documentEditListener);\n      }\n    }\n  }, {\n    key: \"unbindDocumentEditListener\",\n    value: function unbindDocumentEditListener() {\n      if (this.documentEditListener) {\n        document.removeEventListener('click', this.documentEditListener);\n        this.documentEditListener = null;\n      }\n    }\n  }, {\n    key: \"closeCell\",\n    value: function closeCell() {\n      this.setState({\n        editing: false\n      });\n      this.unbindDocumentEditListener();\n    }\n  }, {\n    key: \"onEditorFocus\",\n    value: function onEditorFocus(event) {\n      this.onClick(event);\n    }\n  }, {\n    key: \"switchCellToViewMode\",\n    value: function switchCellToViewMode() {\n      if (this.props.editorValidator) {\n        var valid = this.props.editorValidator(this.props);\n\n        if (valid) {\n          this.closeCell();\n        }\n      } else {\n        this.closeCell();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      if (this.container && this.props.editor) {\n        if (this.state && this.state.editing) {\n          var focusable = _DomHandler.default.findSingle(this.container, 'input');\n\n          if (focusable) {\n            focusable.setAttribute('data-isCellEditing', true);\n            focusable.focus();\n          }\n\n          this.keyHelper.tabIndex = -1;\n        } else {\n          setTimeout(function () {\n            if (_this3.keyHelper) {\n              _this3.keyHelper.removeAttribute('tabindex');\n            }\n          }, 50);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var className = (0, _classnames.default)(this.props.bodyClassName || this.props.className, {\n        'p-editable-column': this.props.editor,\n        'p-cell-editing': this.props.editor ? this.state.editing : false\n      });\n      var style = this.props.bodyStyle || this.props.style;\n      var content;\n\n      if (this.state && this.state.editing) {\n        if (this.props.editor) content = this.props.editor(this.props);else throw new Error(\"Editor is not found on column.\");\n      } else {\n        if (this.props.body) content = this.props.body(this.props.node, this.props.column);else content = _ObjectUtils.default.resolveFieldData(this.props.node.data, this.props.field);\n      }\n      /* eslint-disable */\n\n\n      var editorKeyHelper = this.props.editor && _react.default.createElement(\"a\", {\n        tabIndex: \"0\",\n        ref: function ref(el) {\n          _this4.keyHelper = el;\n        },\n        className: \"p-cell-editor-key-helper p-hidden-accessible\",\n        onFocus: this.onEditorFocus\n      }, _react.default.createElement(\"span\", null));\n      /* eslint-enable */\n\n\n      return _react.default.createElement(\"td\", {\n        ref: function ref(el) {\n          return _this4.container = el;\n        },\n        className: className,\n        style: style,\n        onClick: this.onClick,\n        onKeyDown: this.onKeyDown\n      }, this.props.children, editorKeyHelper, content);\n    }\n  }]);\n\n  return TreeTableBodyCell;\n}(_react.Component);\n\nexports.TreeTableBodyCell = TreeTableBodyCell;","map":null,"metadata":{},"sourceType":"script"}