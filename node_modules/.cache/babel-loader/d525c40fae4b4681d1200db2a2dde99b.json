{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeTableRow = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _TreeTableBodyCell = require(\"./TreeTableBodyCell\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TreeTableRow = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableRow, _Component);\n\n  function TreeTableRow(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeTableRow).call(this, props));\n    _this.onTogglerClick = _this.onTogglerClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onTouchEnd = _this.onTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.propagateUp = _this.propagateUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCheckboxChange = _this.onCheckboxChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCheckboxFocus = _this.onCheckboxFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCheckboxBlur = _this.onCheckboxBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onRightClick = _this.onRightClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TreeTableRow, [{\n    key: \"isLeaf\",\n    value: function isLeaf() {\n      return this.props.node.leaf === false ? false : !(this.props.node.children && this.props.node.children.length);\n    }\n  }, {\n    key: \"onTogglerClick\",\n    value: function onTogglerClick(event) {\n      if (this.isExpanded()) this.collapse(event);else this.expand(event);\n      event.preventDefault();\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      var expandedKeys = this.props.expandedKeys ? _objectSpread({}, this.props.expandedKeys) : {};\n      expandedKeys[this.props.node.key] = true;\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, true);\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      var expandedKeys = _objectSpread({}, this.props.expandedKeys);\n\n      delete expandedKeys[this.props.node.key];\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, false);\n    }\n  }, {\n    key: \"invokeToggleEvents\",\n    value: function invokeToggleEvents(event, expanded) {\n      if (expanded) {\n        if (this.props.onExpand) {\n          this.props.onExpand({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      } else {\n        if (this.props.onCollapse) {\n          this.props.onCollapse({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.props.onRowClick) {\n        this.props.onRowClick({\n          originalEvent: event,\n          node: this.props.node\n        });\n      }\n\n      var targetNode = event.target.nodeName;\n\n      if (targetNode === 'INPUT' || targetNode === 'BUTTON' || targetNode === 'A' || _DomHandler.default.hasClass(event.target, 'p-clickable') || _DomHandler.default.hasClass(event.target, 'p-treetable-toggler') || _DomHandler.default.hasClass(event.target.parentElement, 'p-treetable-toggler')) {\n        return;\n      }\n\n      if ((this.isSingleSelectionMode() || this.isMultipleSelectionMode()) && this.props.node.selectable !== false) {\n        var selectionKeys;\n        var selected = this.isSelected();\n        var metaSelection = this.nodeTouched ? false : this.props.metaKeySelection;\n\n        if (metaSelection) {\n          var metaKey = event.metaKey || event.ctrlKey;\n\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              selectionKeys = null;\n            } else {\n              selectionKeys = _objectSpread({}, this.props.selectionKeys);\n              delete selectionKeys[this.props.node.key];\n            }\n\n            if (this.props.onUnselect) {\n              this.props.onUnselect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          } else {\n            if (this.isSingleSelectionMode()) {\n              selectionKeys = this.props.node.key;\n            } else if (this.isMultipleSelectionMode()) {\n              selectionKeys = !metaKey ? {} : this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n              selectionKeys[this.props.node.key] = true;\n            }\n\n            if (this.props.onSelect) {\n              this.props.onSelect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              selectionKeys = null;\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            } else {\n              selectionKeys = this.props.node.key;\n\n              if (this.props.onSelect) {\n                this.props.onSelect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            }\n          } else {\n            if (selected) {\n              selectionKeys = _objectSpread({}, this.props.selectionKeys);\n              delete selectionKeys[this.props.node.key];\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            } else {\n              selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n              selectionKeys[this.props.node.key] = true;\n\n              if (this.props.onSelect) {\n                this.props.onSelect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            }\n          }\n        }\n\n        if (this.props.onSelectionChange) {\n          this.props.onSelectionChange({\n            originalEvent: event,\n            value: selectionKeys\n          });\n        }\n      }\n\n      this.nodeTouched = false;\n    }\n  }, {\n    key: \"onTouchEnd\",\n    value: function onTouchEnd() {\n      this.nodeTouched = true;\n    }\n  }, {\n    key: \"onCheckboxChange\",\n    value: function onCheckboxChange(event) {\n      var checked = this.isChecked();\n      var selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n\n      if (checked) {\n        if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, false, selectionKeys);else delete selectionKeys[this.props.node.key];\n\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n          this.props.onPropagateUp({\n            originalEvent: event,\n            check: false,\n            selectionKeys: selectionKeys\n          });\n        }\n\n        if (this.props.onUnselect) {\n          this.props.onUnselect({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      } else {\n        if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, true, selectionKeys);else selectionKeys[this.props.node.key] = {\n          checked: true\n        };\n\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n          this.props.onPropagateUp({\n            originalEvent: event,\n            check: true,\n            selectionKeys: selectionKeys\n          });\n        }\n\n        if (this.props.onSelect) {\n          this.props.onSelect({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      }\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange({\n          originalEvent: event,\n          value: selectionKeys\n        });\n      }\n\n      _DomHandler.default.clearSelection();\n    }\n  }, {\n    key: \"onCheckboxFocus\",\n    value: function onCheckboxFocus() {\n      _DomHandler.default.addClass(this.checkboxBox, 'p-focus');\n    }\n  }, {\n    key: \"onCheckboxBlur\",\n    value: function onCheckboxBlur() {\n      _DomHandler.default.removeClass(this.checkboxBox, 'p-focus');\n    }\n  }, {\n    key: \"propagateUp\",\n    value: function propagateUp(event) {\n      var check = event.check;\n      var selectionKeys = event.selectionKeys;\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.props.node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n          if (selectionKeys[child.key] && selectionKeys[child.key].checked) checkedChildCount++;else if (selectionKeys[child.key] && selectionKeys[child.key].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (check && checkedChildCount === this.props.node.children.length) {\n        selectionKeys[this.props.node.key] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete selectionKeys[this.props.node.key];\n        }\n\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.props.node.children.length) selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: true\n        };else selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n\n      if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n        this.props.onPropagateUp(event);\n      }\n    }\n  }, {\n    key: \"propagateDown\",\n    value: function propagateDown(node, check, selectionKeys) {\n      if (check) selectionKeys[node.key] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[node.key];\n\n      if (node.children && node.children.length) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.propagateDown(node.children[i], check, selectionKeys);\n        }\n      }\n    }\n  }, {\n    key: \"onRightClick\",\n    value: function onRightClick(event) {\n      _DomHandler.default.clearSelection();\n\n      if (this.props.onContextMenuSelectionChange) {\n        this.props.onContextMenuSelectionChange({\n          originalEvent: event,\n          value: this.props.node.key\n        });\n      }\n\n      if (this.props.onContextMenu) {\n        this.props.onContextMenu({\n          originalEvent: event,\n          node: this.props.node\n        });\n      }\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      if (event.target === this.container) {\n        var rowElement = event.currentTarget;\n\n        switch (event.which) {\n          //down arrow\n          case 40:\n            var nextRow = rowElement.nextElementSibling;\n\n            if (nextRow) {\n              nextRow.focus();\n            }\n\n            event.preventDefault();\n            break;\n          //up arrow\n\n          case 38:\n            var previousRow = rowElement.previousElementSibling;\n\n            if (previousRow) {\n              previousRow.focus();\n            }\n\n            event.preventDefault();\n            break;\n          //right arrow\n\n          case 39:\n            if (!this.isExpanded()) {\n              this.expand(event);\n            }\n\n            event.preventDefault();\n            break;\n          //left arrow\n\n          case 37:\n            if (this.isExpanded()) {\n              this.collapse(event);\n            }\n\n            event.preventDefault();\n            break;\n          //enter\n\n          case 13:\n            this.onClick(event);\n            event.preventDefault();\n            break;\n\n          default:\n            //no op\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"isSingleSelectionMode\",\n    value: function isSingleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'single';\n    }\n  }, {\n    key: \"isMultipleSelectionMode\",\n    value: function isMultipleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'multiple';\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded() {\n      return this.props.expandedKeys ? this.props.expandedKeys[this.props.node.key] !== undefined : false;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      if ((this.props.selectionMode === 'single' || this.props.selectionMode === 'multiple') && this.props.selectionKeys) return this.props.selectionMode === 'single' ? this.props.selectionKeys === this.props.node.key : this.props.selectionKeys[this.props.node.key] !== undefined;else return false;\n    }\n  }, {\n    key: \"isChecked\",\n    value: function isChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].checked : false;\n    }\n  }, {\n    key: \"isPartialChecked\",\n    value: function isPartialChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].partialChecked : false;\n    }\n  }, {\n    key: \"renderToggler\",\n    value: function renderToggler() {\n      var expanded = this.isExpanded();\n      var iconClassName = (0, _classnames.default)('\"p-treetable-toggler-icon pi pi-fw', {\n        'pi-chevron-right': !expanded,\n        'pi-chevron-down': expanded\n      });\n      var style = {\n        marginLeft: this.props.level * 16 + 'px',\n        visibility: this.props.node.leaf === false || this.props.node.children && this.props.node.children.length ? 'visible' : 'hidden'\n      };\n      return _react.default.createElement(\"span\", {\n        className: \"p-treetable-toggler p-unselectable-text\",\n        onClick: this.onTogglerClick,\n        style: style\n      }, _react.default.createElement(\"i\", {\n        className: iconClassName\n      }));\n    }\n  }, {\n    key: \"renderCheckbox\",\n    value: function renderCheckbox() {\n      var _this2 = this;\n\n      if (this.props.selectionMode === 'checkbox' && this.props.node.selectable !== false) {\n        var checked = this.isChecked();\n        var partialChecked = this.isPartialChecked();\n        var className = (0, _classnames.default)('p-checkbox-box', {\n          'p-highlight': checked\n        });\n        var icon = (0, _classnames.default)('p-checkbox-icon p-c', {\n          'pi pi-check': checked,\n          'pi pi-minus': partialChecked\n        });\n        return _react.default.createElement(\"div\", {\n          className: \"p-checkbox p-treetable-checkbox p-component\",\n          onClick: this.onCheckboxChange\n        }, _react.default.createElement(\"div\", {\n          className: \"p-hidden-accessible\"\n        }, _react.default.createElement(\"input\", {\n          type: \"checkbox\",\n          onFocus: this.onCheckboxFocus,\n          onBlur: this.onCheckboxBlur\n        })), _react.default.createElement(\"div\", {\n          className: className,\n          ref: function ref(el) {\n            return _this2.checkboxBox = el;\n          }\n        }, _react.default.createElement(\"span\", {\n          className: icon\n        })));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(column) {\n      var toggler, checkbox;\n\n      if (column.props.expander) {\n        toggler = this.renderToggler();\n        checkbox = this.renderCheckbox();\n      }\n\n      return _react.default.createElement(_TreeTableBodyCell.TreeTableBodyCell, _extends({\n        key: column.props.columnKey || column.props.field\n      }, column.props, {\n        node: this.props.node\n      }), toggler, checkbox);\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      if (this.isExpanded() && this.props.node.children) {\n        return this.props.node.children.map(function (childNode) {\n          return _react.default.createElement(TreeTableRow, {\n            key: childNode.key || JSON.stringify(childNode.data),\n            level: _this3.props.level + 1,\n            node: childNode,\n            columns: _this3.props.columns,\n            expandedKeys: _this3.props.expandedKeys,\n            onToggle: _this3.props.onToggle,\n            onExpand: _this3.props.onExpand,\n            onCollapse: _this3.props.onCollapse,\n            selectionMode: _this3.props.selectionMode,\n            selectionKeys: _this3.props.selectionKeys,\n            onSelectionChange: _this3.props.onSelectionChange,\n            metaKeySelection: _this3.props.metaKeySelection,\n            onRowClick: _this3.props.onRowClick,\n            onSelect: _this3.props.onSelect,\n            onUnselect: _this3.props.onUnselect,\n            propagateSelectionUp: _this3.props.propagateSelectionUp,\n            propagateSelectionDown: _this3.props.propagateSelectionDown,\n            onPropagateUp: _this3.propagateUp,\n            rowClassName: _this3.props.rowClassName,\n            contextMenuSelectionKey: _this3.props.contextMenuSelectionKey,\n            onContextMenuSelectionChange: _this3.props.onContextMenuSelectionChange,\n            onContextMenu: _this3.props.onContextMenu\n          });\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var cells = this.props.columns.map(function (col) {\n        return _this4.renderCell(col);\n      });\n      var children = this.renderChildren();\n      var className = {\n        'p-highlight': this.isSelected(),\n        'p-highlight-contextmenu': this.props.contextMenuSelectionKey && this.props.contextMenuSelectionKey === this.props.node.key\n      };\n\n      if (this.props.rowClassName) {\n        var rowClassName = this.props.rowClassName(this.props.node);\n        className = _objectSpread({}, className, rowClassName);\n      }\n\n      className = (0, _classnames.default)(className);\n      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"tr\", {\n        ref: function ref(el) {\n          return _this4.container = el;\n        },\n        tabIndex: \"0\",\n        className: className,\n        onClick: this.onClick,\n        onTouchEnd: this.onTouchEnd,\n        onContextMenu: this.onRightClick,\n        onKeyDown: this.onKeyDown\n      }, cells), children);\n    }\n  }]);\n\n  return TreeTableRow;\n}(_react.Component);\n\nexports.TreeTableRow = TreeTableRow;\n\n_defineProperty(TreeTableRow, \"defaultProps\", {\n  node: null,\n  level: null,\n  columns: null,\n  expandedKeys: null,\n  contextMenuSelectionKey: null,\n  selectionMode: null,\n  selectionKeys: null,\n  metaKeySelection: true,\n  propagateSelectionUp: true,\n  propagateSelectionDown: true,\n  rowClassName: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null,\n  onRowClick: null,\n  onSelect: null,\n  onUnselect: null,\n  onSelectionChange: null,\n  onPropagateUp: null,\n  onContextMenuSelectionChange: null,\n  onContextMenu: null\n});\n\n_defineProperty(TreeTableRow, \"propTypes\", {\n  node: _propTypes.default.any,\n  level: _propTypes.default.number,\n  columns: _propTypes.default.array,\n  expandedKeys: _propTypes.default.object,\n  contextMenuSelectionKey: _propTypes.default.any,\n  selectionMode: _propTypes.default.string,\n  selectionKeys: _propTypes.default.any,\n  metaKeySelection: _propTypes.default.bool,\n  propagateSelectionUp: _propTypes.default.bool,\n  propagateSelectionDown: _propTypes.default.bool,\n  rowClassName: _propTypes.default.func,\n  onExpand: _propTypes.default.func,\n  onCollapse: _propTypes.default.func,\n  onToggle: _propTypes.default.func,\n  onRowClick: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  onUnselect: _propTypes.default.func,\n  onSelectionChange: _propTypes.default.func,\n  onPropagateUp: _propTypes.default.func,\n  onContextMenuSelectionChange: _propTypes.default.func,\n  onContextMenu: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}