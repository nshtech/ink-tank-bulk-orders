{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverlayPanel = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar OverlayPanel = /*#__PURE__*/function (_Component) {\n  _inherits(OverlayPanel, _Component);\n\n  function OverlayPanel(props) {\n    var _this;\n\n    _classCallCheck(this, OverlayPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OverlayPanel).call(this, props));\n    _this.onCloseClick = _this.onCloseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(OverlayPanel, [{\n    key: \"bindDocumentClickListener\",\n    value: function bindDocumentClickListener() {\n      if (!this.documentClickListener && this.props.dismissable) {\n        this.documentClickListener = this.onDocumentClick.bind(this);\n        document.addEventListener('click', this.documentClickListener);\n      }\n    }\n  }, {\n    key: \"unbindDocumentClickListener\",\n    value: function unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        document.removeEventListener('click', this.documentClickListener);\n        this.documentClickListener = null;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindDocumentClickListener();\n    }\n  }, {\n    key: \"onDocumentClick\",\n    value: function onDocumentClick(event) {\n      if (!this.container.contains(event.target) && this.target && this.target !== event.target && !this.target.contains(event.target)) {\n        this.hide();\n      }\n    }\n  }, {\n    key: \"onCloseClick\",\n    value: function onCloseClick(event) {\n      this.hide();\n      event.preventDefault();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event, target) {\n      var _this2 = this;\n\n      if (this.isVisible()) {\n        this.hide();\n\n        if (this.hasTargetChanged(event, target)) {\n          this.target = target || event.currentTarget || event.target;\n          setTimeout(function () {\n            _this2.show(event, _this2.target);\n          }, 200);\n        }\n      } else {\n        this.show(event, target);\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show(event, target) {\n      this.target = target || event.currentTarget || event.target;\n      this.bindDocumentClickListener();\n      this.container.style.zIndex = String(_DomHandler.default.generateZIndex());\n\n      if (this.isVisible()) {\n        this.align();\n      } else {\n        this.container.style.display = 'block';\n        this.align();\n\n        _DomHandler.default.fadeIn(this.container, 250);\n      }\n    }\n  }, {\n    key: \"align\",\n    value: function align() {\n      if (this.target) {\n        _DomHandler.default.absolutePosition(this.container, this.target);\n\n        if (_DomHandler.default.getOffset(this.container).top < _DomHandler.default.getOffset(this.target).top) {\n          _DomHandler.default.addClass(this.container, 'p-overlaypanel-flipped');\n        }\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (this.isVisible()) {\n        this.container.style.display = 'none';\n\n        _DomHandler.default.removeClass(this.container, 'p-overlaypanel-flipped');\n\n        this.unbindDocumentClickListener();\n\n        if (this.props.onHide) {\n          this.props.onHide();\n        }\n      }\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.container && this.container.offsetParent;\n    }\n  }, {\n    key: \"hasTargetChanged\",\n    value: function hasTargetChanged(event, target) {\n      return this.target != null && this.target !== (target || event.currentTarget || event.target);\n    }\n  }, {\n    key: \"renderCloseIcon\",\n    value: function renderCloseIcon() {\n      if (this.props.showCloseIcon) {\n        return _react.default.createElement(\"button\", {\n          className: \"p-overlaypanel-close p-link\",\n          onClick: this.onCloseClick\n        }, _react.default.createElement(\"span\", {\n          className: \"p-overlaypanel-close-icon pi pi-times\"\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement() {\n      var _this3 = this;\n\n      var className = (0, _classnames.default)('p-overlaypanel p-component', this.props.className);\n      var closeIcon = this.renderCloseIcon();\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this3.container = el;\n        },\n        id: this.props.id,\n        className: className,\n        style: this.props.style\n      }, _react.default.createElement(\"div\", {\n        className: \"p-overlaypanel-content\"\n      }, this.props.children), closeIcon);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var element = this.renderElement();\n\n      if (this.props.appendTo) {\n        return _reactDom.default.createPortal(element, this.props.appendTo);\n      } else {\n        return element;\n      }\n    }\n  }]);\n\n  return OverlayPanel;\n}(_react.Component);\n\nexports.OverlayPanel = OverlayPanel;\n\n_defineProperty(OverlayPanel, \"defaultProps\", {\n  id: null,\n  dismissable: true,\n  showCloseIcon: false,\n  style: null,\n  className: null,\n  appendTo: null,\n  onHide: null\n});\n\n_defineProperty(OverlayPanel, \"propTypes\", {\n  id: _propTypes.default.string,\n  dismissable: _propTypes.default.bool,\n  showCloseIcon: _propTypes.default.bool,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  appendTo: _propTypes.default.any,\n  onHide: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}