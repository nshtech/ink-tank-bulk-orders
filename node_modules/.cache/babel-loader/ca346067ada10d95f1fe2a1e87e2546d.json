{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dialog = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _UniqueComponentId = _interopRequireDefault(require(\"../utils/UniqueComponentId\"));\n\nvar _reactTransitionGroup = require(\"react-transition-group\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Dialog = /*#__PURE__*/function (_Component) {\n  _inherits(Dialog, _Component);\n\n  function Dialog(props) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dialog).call(this, props));\n    _this.state = {\n      maximized: false\n    };\n    _this.onClose = _this.onClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleMaximize = _this.toggleMaximize.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.id = _this.props.id || (0, _UniqueComponentId.default)();\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"onClose\",\n    value: function onClose(event) {\n      this.props.onHide();\n      event.preventDefault();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.unbindMaskClickListener();\n      this.unbindGlobalListeners();\n      this.props.onHide();\n\n      if (this.props.modal) {\n        this.disableModality();\n      }\n\n      if (this.state.maximized) {\n        _DomHandler.default.removeClass(document.body, 'p-overflow-hidden');\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var focusable = _DomHandler.default.findSingle(this.container, 'button');\n\n      if (focusable) {\n        focusable.focus();\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.bindGlobalListeners();\n\n      if (this.props.onShow) {\n        this.props.onShow();\n      }\n\n      this.container.style.zIndex = String(this.props.baseZIndex + _DomHandler.default.generateZIndex());\n      this.focus();\n\n      if (this.props.modal) {\n        this.enableModality();\n      }\n\n      if (this.state.maximized) {\n        _DomHandler.default.removeClass(document.body, 'p-overflow-hidden');\n      }\n    }\n  }, {\n    key: \"toggleMaximize\",\n    value: function toggleMaximize(event) {\n      this.setState({\n        maximized: !this.state.maximized\n      });\n      event.preventDefault();\n    }\n  }, {\n    key: \"maximize\",\n    value: function maximize() {\n      _DomHandler.default.addClass(this.container, 'p-dialog-maximized');\n\n      _DomHandler.default.addClass(document.body, 'p-overflow-hidden');\n\n      var diffHeight = _DomHandler.default.getOuterHeight(this.headerElement) + _DomHandler.default.getOuterHeight(this.footerElement);\n\n      this.contentElement.style.minHeight = 'calc(100vh - ' + diffHeight + 'px)';\n    }\n  }, {\n    key: \"restoreMaximize\",\n    value: function restoreMaximize() {\n      _DomHandler.default.removeClass(this.container, 'p-dialog-maximized');\n\n      _DomHandler.default.removeClass(document.body, 'p-overflow-hidden');\n\n      this.contentElement.style.minHeight = 'auto';\n    }\n  }, {\n    key: \"enableModality\",\n    value: function enableModality() {\n      var _this2 = this;\n\n      if (!this.mask) {\n        this.mask = document.createElement('div');\n        this.mask.style.zIndex = String(parseInt(this.container.style.zIndex, 10) - 1);\n\n        _DomHandler.default.addMultipleClasses(this.mask, 'p-component-overlay p-dialog-mask');\n\n        if (this.props.closable && this.props.dismissableMask) {\n          this.maskClickListener = function (event) {\n            _this2.onClose(event);\n          };\n\n          this.mask.addEventListener('click', this.maskClickListener);\n        }\n\n        document.body.appendChild(this.mask);\n\n        if (this.props.blockScroll) {\n          _DomHandler.default.addClass(document.body, 'p-overflow-hidden');\n        }\n      }\n    }\n  }, {\n    key: \"disableModality\",\n    value: function disableModality() {\n      if (this.mask) {\n        this.unbindMaskClickListener();\n        document.body.removeChild(this.mask);\n\n        if (this.props.blockScroll) {\n          _DomHandler.default.removeClass(document.body, 'p-overflow-hidden');\n        }\n\n        this.mask = null;\n      }\n    }\n  }, {\n    key: \"unbindMaskClickListener\",\n    value: function unbindMaskClickListener() {\n      if (this.maskClickListener) {\n        this.mask.removeEventListener('click', this.maskClickListener);\n        this.maskClickListener = null;\n      }\n    }\n  }, {\n    key: \"bindGlobalListeners\",\n    value: function bindGlobalListeners() {\n      if (this.props.closeOnEscape && this.props.closable) {\n        this.bindDocumentEscapeListener();\n      }\n    }\n  }, {\n    key: \"unbindGlobalListeners\",\n    value: function unbindGlobalListeners() {\n      this.unbindDocumentEscapeListener();\n    }\n  }, {\n    key: \"bindDocumentEscapeListener\",\n    value: function bindDocumentEscapeListener() {\n      var _this3 = this;\n\n      this.documentEscapeListener = function (event) {\n        if (event.which === 27) {\n          if (parseInt(_this3.container.style.zIndex, 10) === _DomHandler.default.getCurrentZIndex()) {\n            _this3.onClose(event);\n          }\n        }\n      };\n\n      document.addEventListener('keydown', this.documentEscapeListener);\n    }\n  }, {\n    key: \"unbindDocumentEscapeListener\",\n    value: function unbindDocumentEscapeListener() {\n      if (this.documentEscapeListener) {\n        document.removeEventListener('keydown', this.documentEscapeListener);\n        this.documentEscapeListener = null;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.visible) {\n        this.show();\n        this.currentHeight = _DomHandler.default.getOuterHeight(this.container);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) this.show();else this.hide();\n      }\n\n      if (prevState.maximized !== this.state.maximized) {\n        if (this.state.maximized) {\n          this.maximize();\n        } else {\n          this.restoreMaximize();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.disableModality();\n      this.unbindGlobalListeners();\n      this.unbindMaskClickListener();\n    }\n  }, {\n    key: \"renderCloseIcon\",\n    value: function renderCloseIcon() {\n      if (this.props.closable) {\n        return _react.default.createElement(\"button\", {\n          className: \"p-dialog-titlebar-icon p-dialog-titlebar-close p-link\",\n          \"aria-label\": this.props.ariaCloseIconLabel,\n          onClick: this.onClose\n        }, _react.default.createElement(\"span\", {\n          className: \"p-dialog-titlebar-close-icon pi pi-times\"\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderMaximizeIcon\",\n    value: function renderMaximizeIcon() {\n      var iconClassName = (0, _classnames.default)('p-dialog-titlebar-maximize-icon pi', {\n        'pi-window-maximize': !this.state.maximized,\n        'pi-window-minimize': this.state.maximized\n      });\n\n      if (this.props.maximizable) {\n        return _react.default.createElement(\"button\", {\n          className: \"p-dialog-titlebar-icon p-dialog-titlebar-maximize p-link\",\n          onClick: this.toggleMaximize\n        }, _react.default.createElement(\"span\", {\n          className: iconClassName\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderIconsTemplate\",\n    value: function renderIconsTemplate() {\n      if (this.props.iconsTemplate) {\n        return this.props.iconsTemplate(this);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var _this4 = this;\n\n      if (this.props.showHeader) {\n        var closeIcon = this.renderCloseIcon();\n        var maximizeIcon = this.renderMaximizeIcon();\n        var iconsTemplate = this.renderIconsTemplate();\n        return _react.default.createElement(\"div\", {\n          ref: function ref(el) {\n            return _this4.headerElement = el;\n          },\n          className: \"p-dialog-titlebar\"\n        }, _react.default.createElement(\"span\", {\n          id: this.id + '_label',\n          className: \"p-dialog-title\"\n        }, this.props.header), _react.default.createElement(\"div\", {\n          className: \"p-dialog-titlebar-icons\"\n        }, iconsTemplate, maximizeIcon, closeIcon));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this5 = this;\n\n      return _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this5.contentElement = el;\n        },\n        className: \"p-dialog-content\",\n        style: this.props.contentStyle\n      }, this.props.children);\n    }\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var _this6 = this;\n\n      if (this.props.footer) {\n        return _react.default.createElement(\"div\", {\n          ref: function ref(el) {\n            return _this6.footerElement = el;\n          },\n          className: \"p-dialog-footer\"\n        }, this.props.footer);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement() {\n      var _this7 = this;\n\n      var className = (0, _classnames.default)('p-dialog p-component', this.props.className, {\n        'p-dialog-rtl': this.props.rtl,\n        'p-dialog-visible': this.props.visible\n      });\n      var header = this.renderHeader();\n      var content = this.renderContent();\n      var footer = this.renderFooter();\n      return _react.default.createElement(_reactTransitionGroup.CSSTransition, {\n        classNames: \"p-dialog\",\n        timeout: {\n          enter: 150,\n          exit: 75\n        },\n        in: this.props.visible\n      }, _react.default.createElement(\"div\", {\n        id: this.id,\n        className: className,\n        style: this.props.style,\n        ref: function ref(el) {\n          return _this7.container = el;\n        },\n        \"aria-labelledby\": this.id + '_label',\n        role: \"dialog\"\n      }, header, content, footer));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var element = this.renderElement();\n      if (this.props.appendTo) return _reactDom.default.createPortal(element, this.props.appendTo);else return element;\n    }\n  }]);\n\n  return Dialog;\n}(_react.Component);\n\nexports.Dialog = Dialog;\n\n_defineProperty(Dialog, \"defaultProps\", {\n  id: null,\n  header: null,\n  footer: null,\n  visible: false,\n  modal: true,\n  onHide: null,\n  onShow: null,\n  contentStyle: null,\n  closeOnEscape: true,\n  dismissableMask: false,\n  rtl: false,\n  closable: true,\n  style: null,\n  className: null,\n  showHeader: true,\n  appendTo: null,\n  baseZIndex: 0,\n  maximizable: false,\n  blockScroll: true,\n  iconsTemplate: null,\n  ariaCloseIconLabel: 'Close'\n});\n\n_defineProperty(Dialog, \"propTypes\", {\n  id: _propTypes.default.string,\n  header: _propTypes.default.any,\n  footer: _propTypes.default.any,\n  visible: _propTypes.default.bool,\n  modal: _propTypes.default.bool,\n  onHide: _propTypes.default.func.isRequired,\n  onShow: _propTypes.default.func,\n  contentStyle: _propTypes.default.object,\n  closeOnEscape: _propTypes.default.bool,\n  dismissableMask: _propTypes.default.bool,\n  rtl: _propTypes.default.bool,\n  closable: _propTypes.default.bool,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  showHeader: _propTypes.default.bool,\n  appendTo: _propTypes.default.object,\n  baseZIndex: _propTypes.default.number,\n  maximizable: _propTypes.default.bool,\n  blockScroll: _propTypes.default.bool,\n  iconsTemplate: _propTypes.default.func,\n  ariaCloseIconLabel: _propTypes.default.string\n});","map":null,"metadata":{},"sourceType":"script"}