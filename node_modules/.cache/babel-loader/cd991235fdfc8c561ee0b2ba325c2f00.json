{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataTable = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Paginator = require(\"../paginator/Paginator\");\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nvar _ObjectUtils = _interopRequireDefault(require(\"../utils/ObjectUtils\"));\n\nvar _ScrollableView = require(\"./ScrollableView\");\n\nvar _TableBody = require(\"./TableBody\");\n\nvar _TableFooter = require(\"./TableFooter\");\n\nvar _TableHeader = require(\"./TableHeader\");\n\nvar _TableLoadingBody = require(\"./TableLoadingBody\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DataTable = /*#__PURE__*/function (_Component) {\n  _inherits(DataTable, _Component);\n\n  function DataTable(props) {\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, props));\n    var state = {};\n\n    if (!_this.props.onPage) {\n      state.first = props.first;\n      state.rows = props.rows;\n    }\n\n    if (!_this.props.onSort) {\n      state.sortField = props.sortField;\n      state.sortOrder = props.sortOrder;\n      state.multiSortMeta = props.multiSortMeta;\n    }\n\n    if (!_this.props.onFilter) {\n      state.filters = props.filters;\n    }\n\n    if (_this.isStateful()) {\n      _this.restoreState(state);\n    }\n\n    if (Object.keys(state).length) {\n      _this.state = state;\n    }\n\n    _this.onPageChange = _this.onPageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSort = _this.onSort.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFilter = _this.onFilter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onColumnResizeStart = _this.onColumnResizeStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onHeaderCheckboxClick = _this.onHeaderCheckboxClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onColumnDragStart = _this.onColumnDragStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onColumnDragOver = _this.onColumnDragOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onColumnDragLeave = _this.onColumnDragLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onColumnDrop = _this.onColumnDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onVirtualScroll = _this.onVirtualScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.frozenSelectionMode = null;\n    return _this;\n  }\n\n  _createClass(DataTable, [{\n    key: \"getFirst\",\n    value: function getFirst() {\n      return this.props.onPage ? this.props.first : this.state.first;\n    }\n  }, {\n    key: \"getRows\",\n    value: function getRows() {\n      return this.props.onPage ? this.props.rows : this.state.rows;\n    }\n  }, {\n    key: \"getSortField\",\n    value: function getSortField() {\n      return this.props.onSort ? this.props.sortField : this.state.sortField;\n    }\n  }, {\n    key: \"getSortOrder\",\n    value: function getSortOrder() {\n      return this.props.onSort ? this.props.sortOrder : this.state.sortOrder;\n    }\n  }, {\n    key: \"getMultiSortMeta\",\n    value: function getMultiSortMeta() {\n      return this.props.onSort ? this.props.multiSortMeta : this.state.multiSortMeta;\n    }\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return this.props.onFilter ? this.props.filters : this.state.filters;\n    }\n  }, {\n    key: \"getStorage\",\n    value: function getStorage() {\n      switch (this.props.stateStorage) {\n        case 'local':\n          return window.localStorage;\n\n        case 'session':\n          return window.sessionStorage;\n\n        default:\n          throw new Error(this.props.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    }\n  }, {\n    key: \"isStateful\",\n    value: function isStateful() {\n      return this.props.stateKey != null;\n    }\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var storage = this.getStorage();\n      var state = {};\n\n      if (this.props.paginator) {\n        state.first = this.getFirst();\n        state.rows = this.getRows();\n      }\n\n      if (this.getSortField()) {\n        state.sortField = this.getSortField();\n        state.sortOrder = this.getSortOrder();\n        state.multiSortMeta = this.getMultiSortMeta();\n      }\n\n      if (this.hasFilter()) {\n        state.filters = this.getFilters();\n      }\n\n      if (this.props.resizableColumns) {\n        this.saveColumnWidths(state);\n      }\n\n      if (this.props.reorderableColumns) {\n        state.columnOrder = this.state.columnOrder;\n      }\n\n      if (this.props.expandedRows) {\n        state.expandedRows = this.props.expandedRows;\n      }\n\n      if (this.props.selection && this.props.onSelectionChange) {\n        state.selection = this.props.selection;\n      }\n\n      if (Object.keys(state).length) {\n        storage.setItem(this.props.stateKey, JSON.stringify(state));\n      }\n    }\n  }, {\n    key: \"clearState\",\n    value: function clearState() {\n      var storage = this.getStorage();\n\n      if (this.props.stateKey) {\n        storage.removeItem(this.props.stateKey);\n      }\n    }\n  }, {\n    key: \"restoreState\",\n    value: function restoreState(state) {\n      var storage = this.getStorage();\n      var stateString = storage.getItem(this.props.stateKey);\n\n      if (stateString) {\n        var restoredState = JSON.parse(stateString);\n\n        if (this.props.paginator) {\n          if (this.props.onPage) {\n            this.props.onPage({\n              first: restoredState.first,\n              rows: restoredState.rows\n            });\n          } else {\n            state.first = restoredState.first;\n            state.rows = restoredState.rows;\n          }\n        }\n\n        if (restoredState.sortField) {\n          if (this.props.onSort) {\n            this.props.onSort({\n              sortField: restoredState.sortField,\n              sortOrder: restoredState.sortOrder,\n              multiSortMeta: restoredState.multiSortMeta\n            });\n          } else {\n            state.sortField = restoredState.sortField;\n            state.sortOrder = restoredState.sortOrder;\n            state.multiSortMeta = restoredState.multiSortMeta;\n          }\n        }\n\n        if (restoredState.filters) {\n          if (this.props.onFilter) {\n            this.props.onFilter({\n              filters: restoredState.filters\n            });\n          } else {\n            state.filters = restoredState.filters;\n          }\n        }\n\n        if (this.props.resizableColumns) {\n          this.columnWidthsState = restoredState.columnWidths;\n          this.tableWidthState = restoredState.tableWidth;\n        }\n\n        if (this.props.reorderableColumns) {\n          state.columnOrder = restoredState.columnOrder;\n        }\n\n        if (restoredState.expandedRows && this.props.onRowToggle) {\n          this.props.onRowToggle({\n            data: restoredState.expandedRows\n          });\n        }\n\n        if (restoredState.selection && this.props.onSelectionChange) {\n          this.props.onSelectionChange({\n            value: restoredState.selection\n          });\n        }\n      }\n    }\n  }, {\n    key: \"saveColumnWidths\",\n    value: function saveColumnWidths(state) {\n      var widths = [];\n\n      var headers = _DomHandler.default.find(this.container, '.p-datatable-thead > tr > th');\n\n      headers.map(function (header) {\n        return widths.push(_DomHandler.default.getOuterWidth(header));\n      });\n      state.columnWidths = widths.join(',');\n\n      if (this.props.columnResizeMode === 'expand') {\n        state.tableWidth = this.props.scrollable ? _DomHandler.default.findSingle(this.container, '.p-datatable-scrollable-header-table').style.width : _DomHandler.default.getOuterWidth(this.table) + 'px';\n      }\n    }\n  }, {\n    key: \"restoreColumnWidths\",\n    value: function restoreColumnWidths() {\n      if (this.columnWidthsState) {\n        var widths = this.columnWidthsState.split(',');\n\n        if (this.props.columnResizeMode === 'expand' && this.tableWidthState) {\n          if (this.props.scrollable) {\n            this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n          } else {\n            this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n            this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n          }\n        }\n\n        if (this.props.scrollable) {\n          var headerCols = _DomHandler.default.find(this.container, '.p-datatable-scrollable-header-table > colgroup > col');\n\n          var bodyCols = _DomHandler.default.find(this.container, '.p-datatable-scrollable-body-table > colgroup > col');\n\n          headerCols.map(function (col, index) {\n            return col.style.width = widths[index] + 'px';\n          });\n          bodyCols.map(function (col, index) {\n            return col.style.width = widths[index] + 'px';\n          });\n        } else {\n          var headers = _DomHandler.default.find(this.table, '.p-datatable-thead > tr > th');\n\n          headers.map(function (header, index) {\n            return header.style.width = widths[index] + 'px';\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onPageChange\",\n    value: function onPageChange(event) {\n      if (this.props.onPage) this.props.onPage(event);else this.setState({\n        first: event.first,\n        rows: event.rows\n      });\n\n      if (this.props.onValueChange) {\n        this.props.onValueChange();\n      }\n    }\n  }, {\n    key: \"createPaginator\",\n    value: function createPaginator(position, totalRecords, data) {\n      var className = 'p-paginator-' + position;\n      return _react.default.createElement(_Paginator.Paginator, {\n        first: this.getFirst(),\n        rows: this.getRows(),\n        pageLinkSize: this.props.pageLinkSize,\n        className: className,\n        onPageChange: this.onPageChange,\n        template: this.props.paginatorTemplate,\n        totalRecords: totalRecords,\n        rowsPerPageOptions: this.props.rowsPerPageOptions,\n        currentPageReportTemplate: this.props.currentPageReportTemplate,\n        leftContent: this.props.paginatorLeft,\n        rightContent: this.props.paginatorRight,\n        alwaysShow: this.props.alwaysShowPaginator\n      });\n    }\n  }, {\n    key: \"onSort\",\n    value: function onSort(event) {\n      var sortField = event.sortField;\n      var sortOrder = this.getSortField() === event.sortField ? this.getSortOrder() * -1 : this.props.defaultSortOrder;\n      var multiSortMeta;\n      this.columnSortable = event.sortable;\n      this.columnSortFunction = event.sortFunction;\n\n      if (this.props.sortMode === 'multiple') {\n        var metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n        multiSortMeta = this.getMultiSortMeta();\n\n        if (!multiSortMeta || !metaKey) {\n          multiSortMeta = [];\n        }\n\n        this.addSortMeta({\n          field: sortField,\n          order: sortOrder\n        }, multiSortMeta);\n      }\n\n      if (this.props.onSort) {\n        this.props.onSort({\n          sortField: sortField,\n          sortOrder: sortOrder,\n          multiSortMeta: multiSortMeta\n        });\n      } else {\n        this.setState({\n          sortField: sortField,\n          sortOrder: sortOrder,\n          first: 0,\n          multiSortMeta: multiSortMeta\n        });\n      }\n\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.processData({\n          sortField: sortField,\n          sortOrder: sortOrder,\n          multiSortMeta: multiSortMeta\n        }));\n      }\n    }\n  }, {\n    key: \"addSortMeta\",\n    value: function addSortMeta(meta, multiSortMeta) {\n      var index = -1;\n\n      for (var i = 0; i < multiSortMeta.length; i++) {\n        if (multiSortMeta[i].field === meta.field) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index >= 0) multiSortMeta[index] = meta;else multiSortMeta.push(meta);\n    }\n  }, {\n    key: \"sortSingle\",\n    value: function sortSingle(data, sortField, sortOrder) {\n      var value = _toConsumableArray(data);\n\n      if (this.columnSortable && this.columnSortFunction) {\n        value = this.columnSortFunction({\n          field: this.getSortField(),\n          order: this.getSortOrder()\n        });\n      } else {\n        value.sort(function (data1, data2) {\n          var value1 = _ObjectUtils.default.resolveFieldData(data1, sortField);\n\n          var value2 = _ObjectUtils.default.resolveFieldData(data2, sortField);\n\n          var result = null;\n          if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n            numeric: true\n          });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n          return sortOrder * result;\n        });\n      }\n\n      return value;\n    }\n  }, {\n    key: \"sortMultiple\",\n    value: function sortMultiple(data, multiSortMeta) {\n      var _this2 = this;\n\n      var value = _toConsumableArray(data);\n\n      value.sort(function (data1, data2) {\n        return _this2.multisortField(data1, data2, multiSortMeta, 0);\n      });\n      return value;\n    }\n  }, {\n    key: \"multisortField\",\n    value: function multisortField(data1, data2, multiSortMeta, index) {\n      var value1 = _ObjectUtils.default.resolveFieldData(data1, multiSortMeta[index].field);\n\n      var value2 = _ObjectUtils.default.resolveFieldData(data2, multiSortMeta[index].field);\n\n      var result = null;\n\n      if (typeof value1 === 'string' || value1 instanceof String) {\n        if (value1.localeCompare && value1 !== value2) {\n          return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n            numeric: true\n          });\n        }\n      } else {\n        result = value1 < value2 ? -1 : 1;\n      }\n\n      if (value1 === value2) {\n        return multiSortMeta.length - 1 > index ? this.multisortField(data1, data2, multiSortMeta, index + 1) : 0;\n      }\n\n      return multiSortMeta[index].order * result;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value, field, mode) {\n      this.onFilter({\n        value: value,\n        field: field,\n        matchMode: mode\n      });\n    }\n  }, {\n    key: \"onFilter\",\n    value: function onFilter(event) {\n      var currentFilters = this.getFilters();\n      var newFilters = currentFilters ? _objectSpread({}, currentFilters) : {};\n      if (!this.isFilterBlank(event.value)) newFilters[event.field] = {\n        value: event.value,\n        matchMode: event.matchMode\n      };else if (newFilters[event.field]) delete newFilters[event.field];\n\n      if (this.props.onFilter) {\n        this.props.onFilter({\n          filters: newFilters\n        });\n      } else {\n        this.setState({\n          first: 0,\n          filters: newFilters\n        });\n      }\n\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.processData({\n          filters: newFilters\n        }));\n      }\n    }\n  }, {\n    key: \"hasFilter\",\n    value: function hasFilter() {\n      var filters = this.getFilters();\n      return filters && Object.keys(filters).length > 0;\n    }\n  }, {\n    key: \"isFilterBlank\",\n    value: function isFilterBlank(filter) {\n      if (filter !== null && filter !== undefined) {\n        if (typeof filter === 'string' && filter.trim().length === 0 || filter instanceof Array && filter.length === 0) return true;else return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"hasFooter\",\n    value: function hasFooter() {\n      if (this.props.children) {\n        if (this.props.footerColumnGroup) {\n          return true;\n        } else {\n          if (this.props.children instanceof Array) {\n            for (var i = 0; i < this.props.children.length; i++) {\n              if (this.props.children[i].props.footer) {\n                return true;\n              }\n            }\n          } else {\n            return this.props.children.props.footer !== null;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"onColumnResizeStart\",\n    value: function onColumnResizeStart(event) {\n      var containerLeft = _DomHandler.default.getOffset(this.container).left;\n\n      this.resizeColumn = event.columnEl;\n      this.resizeColumnProps = event.columnProps;\n      this.columnResizing = true;\n      this.lastResizerHelperX = event.originalEvent.pageX - containerLeft + this.container.scrollLeft;\n      this.bindColumnResizeEvents();\n    }\n  }, {\n    key: \"onColumnResize\",\n    value: function onColumnResize(event) {\n      var containerLeft = _DomHandler.default.getOffset(this.container).left;\n\n      _DomHandler.default.addClass(this.container, 'p-unselectable-text');\n\n      this.resizerHelper.style.height = this.container.offsetHeight + 'px';\n      this.resizerHelper.style.top = 0 + 'px';\n      this.resizerHelper.style.left = event.pageX - containerLeft + this.container.scrollLeft + 'px';\n      this.resizerHelper.style.display = 'block';\n    }\n  }, {\n    key: \"onColumnResizeEnd\",\n    value: function onColumnResizeEnd(event) {\n      var delta = this.resizerHelper.offsetLeft - this.lastResizerHelperX;\n      var columnWidth = this.resizeColumn.offsetWidth;\n      var newColumnWidth = columnWidth + delta;\n      var minWidth = this.resizeColumn.style.minWidth || 15;\n\n      if (columnWidth + delta > parseInt(minWidth, 10)) {\n        if (this.props.columnResizeMode === 'fit') {\n          var nextColumn = this.resizeColumn.nextElementSibling;\n          var nextColumnWidth = nextColumn.offsetWidth - delta;\n\n          if (newColumnWidth > 15 && nextColumnWidth > 15) {\n            if (this.props.scrollable) {\n              var scrollableView = this.findParentScrollableView(this.resizeColumn);\n\n              var scrollableBodyTable = _DomHandler.default.findSingle(scrollableView, 'table.p-datatable-scrollable-body-table');\n\n              var scrollableHeaderTable = _DomHandler.default.findSingle(scrollableView, 'table.p-datatable-scrollable-header-table');\n\n              var scrollableFooterTable = _DomHandler.default.findSingle(scrollableView, 'table.p-datatable-scrollable-footer-table');\n\n              var resizeColumnIndex = _DomHandler.default.index(this.resizeColumn);\n\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              this.resizeColumn.style.width = newColumnWidth + 'px';\n\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        } else if (this.props.columnResizeMode === 'expand') {\n          if (this.props.scrollable) {\n            this.setScrollableItemsWidthOnExpandResize(this.resizeColumn, newColumnWidth, delta);\n          } else {\n            this.table.style.width = this.table.offsetWidth + delta + 'px';\n            this.resizeColumn.style.width = newColumnWidth + 'px';\n          }\n        }\n\n        if (this.props.onColumnResizeEnd) {\n          this.props.onColumnResizeEnd({\n            element: this.resizeColumn,\n            column: this.resizeColumnProps,\n            delta: delta\n          });\n        }\n\n        if (this.isStateful()) {\n          this.saveState();\n        }\n      }\n\n      this.resizerHelper.style.display = 'none';\n      this.resizeColumn = null;\n      this.resizeColumnProps = null;\n\n      _DomHandler.default.removeClass(this.container, 'p-unselectable-text');\n\n      this.unbindColumnResizeEvents();\n    }\n  }, {\n    key: \"setScrollableItemsWidthOnExpandResize\",\n    value: function setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n      var scrollableView = column ? this.findParentScrollableView(column) : this.container;\n\n      var scrollableBody = _DomHandler.default.findSingle(scrollableView, '.p-datatable-scrollable-body');\n\n      var scrollableHeader = _DomHandler.default.findSingle(scrollableView, '.p-datatable-scrollable-header');\n\n      var scrollableFooter = _DomHandler.default.findSingle(scrollableView, '.p-datatable-scrollable-footer');\n\n      var scrollableBodyTable = _DomHandler.default.findSingle(scrollableBody, 'table.p-datatable-scrollable-body-table');\n\n      var scrollableHeaderTable = _DomHandler.default.findSingle(scrollableHeader, 'table.p-datatable-scrollable-header-table');\n\n      var scrollableFooterTable = _DomHandler.default.findSingle(scrollableFooter, 'table.p-datatable-scrollable-footer-table');\n\n      var scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n      var scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n      var isContainerInViewport = this.container.offsetWidth >= scrollableBodyTableWidth;\n\n      var setWidth = function setWidth(container, table, width, isContainerInViewport) {\n        if (container && table) {\n          container.style.width = isContainerInViewport ? width + _DomHandler.default.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n          table.style.width = width + 'px';\n        }\n      };\n\n      setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n      setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n      setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n      if (column) {\n        var resizeColumnIndex = _DomHandler.default.index(column);\n\n        this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n        this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n        this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n      }\n    }\n  }, {\n    key: \"findParentScrollableView\",\n    value: function findParentScrollableView(column) {\n      if (column) {\n        var parent = column.parentElement;\n\n        while (parent && !_DomHandler.default.hasClass(parent, 'p-datatable-scrollable-view')) {\n          parent = parent.parentElement;\n        }\n\n        return parent;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"resizeColGroup\",\n    value: function resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n      if (table) {\n        var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n        if (colGroup) {\n          var col = colGroup.children[resizeColumnIndex];\n          var nextCol = col.nextElementSibling;\n          col.style.width = newColumnWidth + 'px';\n\n          if (nextCol && nextColumnWidth) {\n            nextCol.style.width = nextColumnWidth + 'px';\n          }\n        } else {\n          throw new Error(\"Scrollable tables require a colgroup to support resizable columns\");\n        }\n      }\n    }\n  }, {\n    key: \"bindColumnResizeEvents\",\n    value: function bindColumnResizeEvents() {\n      var _this3 = this;\n\n      this.documentColumnResizeListener = document.addEventListener('mousemove', function (event) {\n        if (_this3.columnResizing) {\n          _this3.onColumnResize(event);\n        }\n      });\n      this.documentColumnResizeEndListener = document.addEventListener('mouseup', function (event) {\n        if (_this3.columnResizing) {\n          _this3.columnResizing = false;\n\n          _this3.onColumnResizeEnd(event);\n        }\n      });\n    }\n  }, {\n    key: \"unbindColumnResizeEvents\",\n    value: function unbindColumnResizeEvents() {\n      document.removeEventListener('document', this.documentColumnResizeListener);\n      document.removeEventListener('document', this.documentColumnResizeEndListener);\n    }\n  }, {\n    key: \"findParentHeader\",\n    value: function findParentHeader(element) {\n      if (element.nodeName === 'TH') {\n        return element;\n      } else {\n        var parent = element.parentElement;\n\n        while (parent.nodeName !== 'TH') {\n          parent = parent.parentElement;\n          if (!parent) break;\n        }\n\n        return parent;\n      }\n    }\n  }, {\n    key: \"onColumnDragStart\",\n    value: function onColumnDragStart(event) {\n      if (this.columnResizing) {\n        event.preventDefault();\n        return;\n      }\n\n      this.iconWidth = _DomHandler.default.getHiddenElementOuterWidth(this.reorderIndicatorUp);\n      this.iconHeight = _DomHandler.default.getHiddenElementOuterHeight(this.reorderIndicatorUp);\n      this.draggedColumn = this.findParentHeader(event.target);\n      event.dataTransfer.setData('text', 'b'); // Firefox requires this to make dragging possible\n    }\n  }, {\n    key: \"onColumnDragOver\",\n    value: function onColumnDragOver(event) {\n      var dropHeader = this.findParentHeader(event.target);\n\n      if (this.props.reorderableColumns && this.draggedColumn && dropHeader) {\n        event.preventDefault();\n\n        var containerOffset = _DomHandler.default.getOffset(this.container);\n\n        var dropHeaderOffset = _DomHandler.default.getOffset(dropHeader);\n\n        if (this.draggedColumn !== dropHeader) {\n          var targetLeft = dropHeaderOffset.left - containerOffset.left; //let targetTop =  containerOffset.top - dropHeaderOffset.top;\n\n          var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n          this.reorderIndicatorUp.style.top = dropHeaderOffset.top - containerOffset.top - (this.iconHeight - 1) + 'px';\n          this.reorderIndicatorDown.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n          if (event.pageX > columnCenter) {\n            this.reorderIndicatorUp.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2) + 'px';\n            this.reorderIndicatorDown.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2) + 'px';\n            this.dropPosition = 1;\n          } else {\n            this.reorderIndicatorUp.style.left = targetLeft - Math.ceil(this.iconWidth / 2) + 'px';\n            this.reorderIndicatorDown.style.left = targetLeft - Math.ceil(this.iconWidth / 2) + 'px';\n            this.dropPosition = -1;\n          }\n\n          this.reorderIndicatorUp.style.display = 'block';\n          this.reorderIndicatorDown.style.display = 'block';\n        }\n      }\n    }\n  }, {\n    key: \"onColumnDragLeave\",\n    value: function onColumnDragLeave(event) {\n      if (this.props.reorderableColumns && this.draggedColumn) {\n        event.preventDefault();\n        this.reorderIndicatorUp.style.display = 'none';\n        this.reorderIndicatorDown.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"onColumnDrop\",\n    value: function onColumnDrop(event) {\n      event.preventDefault();\n\n      if (this.draggedColumn) {\n        var dragIndex = _DomHandler.default.index(this.draggedColumn);\n\n        var dropIndex = _DomHandler.default.index(this.findParentHeader(event.target));\n\n        var allowDrop = dragIndex !== dropIndex;\n\n        if (allowDrop && (dropIndex - dragIndex === 1 && this.dropPosition === -1 || dragIndex - dropIndex === 1 && this.dropPosition === 1)) {\n          allowDrop = false;\n        }\n\n        if (allowDrop) {\n          var columns = this.state.columnOrder ? this.getColumns() : _react.default.Children.toArray(this.props.children);\n\n          _ObjectUtils.default.reorderArray(columns, dragIndex, dropIndex);\n\n          var columnOrder = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var column = _step.value;\n              columnOrder.push(column.props.columnKey || column.props.field);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          this.setState({\n            columnOrder: columnOrder\n          });\n\n          if (this.props.onColReorder) {\n            this.props.onColReorder({\n              dragIndex: dragIndex,\n              dropIndex: dropIndex,\n              columns: columns\n            });\n          }\n        }\n\n        this.reorderIndicatorUp.style.display = 'none';\n        this.reorderIndicatorDown.style.display = 'none';\n        this.draggedColumn.draggable = false;\n        this.draggedColumn = null;\n        this.dropPosition = null;\n      }\n    }\n  }, {\n    key: \"onVirtualScroll\",\n    value: function onVirtualScroll(event) {\n      var _this4 = this;\n\n      if (this.virtualScrollTimer) {\n        clearTimeout(this.virtualScrollTimer);\n      }\n\n      this.virtualScrollTimer = setTimeout(function () {\n        if (_this4.props.onVirtualScroll) {\n          _this4.props.onVirtualScroll({\n            first: (event.page - 1) * _this4.props.rows,\n            rows: _this4.props.virtualScroll ? _this4.props.rows * 2 : _this4.props.rows\n          });\n        }\n      }, this.props.virtualScrollDelay);\n    }\n  }, {\n    key: \"exportCSV\",\n    value: function exportCSV() {\n      var _this5 = this;\n\n      var data = this.processData();\n      var csv = \"\\uFEFF\";\n\n      var columns = _react.default.Children.toArray(this.props.children); //headers\n\n\n      for (var i = 0; i < columns.length; i++) {\n        if (columns[i].props.field) {\n          csv += '\"' + (columns[i].props.header || columns[i].props.field) + '\"';\n\n          if (i < columns.length - 1) {\n            csv += this.props.csvSeparator;\n          }\n        }\n      } //body        \n\n\n      data.forEach(function (record, i) {\n        csv += '\\n';\n\n        for (var _i = 0; _i < columns.length; _i++) {\n          if (columns[_i].props.field) {\n            csv += '\"' + _ObjectUtils.default.resolveFieldData(record, columns[_i].props.field) + '\"';\n\n            if (_i < columns.length - 1) {\n              csv += _this5.props.csvSeparator;\n            }\n          }\n        }\n      });\n      var blob = new Blob([csv], {\n        type: 'text/csv;charset=utf-8;'\n      });\n\n      if (window.navigator.msSaveOrOpenBlob) {\n        navigator.msSaveOrOpenBlob(blob, this.props.exportFilename + '.csv');\n      } else {\n        var link = document.createElement(\"a\");\n        link.style.display = 'none';\n        document.body.appendChild(link);\n\n        if (link.download !== undefined) {\n          link.setAttribute('href', URL.createObjectURL(blob));\n          link.setAttribute('download', this.props.exportFilename + '.csv');\n          link.click();\n        } else {\n          csv = 'data:text/csv;charset=utf-8,' + csv;\n          window.open(encodeURI(csv));\n        }\n\n        document.body.removeChild(link);\n      }\n    }\n  }, {\n    key: \"closeEditingCell\",\n    value: function closeEditingCell() {\n      document.body.click();\n    }\n  }, {\n    key: \"onHeaderCheckboxClick\",\n    value: function onHeaderCheckboxClick(event) {\n      var selection;\n\n      if (!event.checked) {\n        var visibleData = this.hasFilter() ? this.processData() : this.props.value;\n        selection = _toConsumableArray(visibleData);\n      } else {\n        selection = [];\n      }\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange({\n          originalEvent: event,\n          value: selection\n        });\n      }\n    }\n  }, {\n    key: \"filterLocal\",\n    value: function filterLocal(value, localFilters) {\n      var filteredValue = [];\n      var filters = localFilters || this.getFilters();\n\n      var columns = _react.default.Children.toArray(this.props.children);\n\n      for (var i = 0; i < value.length; i++) {\n        var localMatch = true;\n        var globalMatch = false;\n\n        for (var j = 0; j < columns.length; j++) {\n          var col = columns[j];\n          var filterMeta = filters ? filters[col.props.field] : null; //local\n\n          if (filterMeta) {\n            var filterValue = filterMeta.value;\n            var filterField = col.props.field;\n            var filterMatchMode = filterMeta.matchMode || col.props.filterMatchMode;\n\n            var dataFieldValue = _ObjectUtils.default.resolveFieldData(value[i], filterField);\n\n            var filterConstraint = filterMatchMode === 'custom' ? col.props.filterFunction : _ObjectUtils.default.filterConstraints[filterMatchMode];\n\n            if (!filterConstraint(dataFieldValue, filterValue)) {\n              localMatch = false;\n            }\n\n            if (!localMatch) {\n              break;\n            }\n          } //global\n\n\n          if (!col.props.excludeGlobalFilter && this.props.globalFilter && !globalMatch) {\n            globalMatch = _ObjectUtils.default.filterConstraints['contains'](_ObjectUtils.default.resolveFieldData(value[i], col.props.field), this.props.globalFilter);\n          }\n        }\n\n        var matches = localMatch;\n\n        if (this.props.globalFilter) {\n          matches = localMatch && globalMatch;\n        }\n\n        if (matches) {\n          filteredValue.push(value[i]);\n        }\n      }\n\n      if (filteredValue.length === value.length) {\n        filteredValue = value;\n      }\n\n      return filteredValue;\n    }\n  }, {\n    key: \"processData\",\n    value: function processData(localState) {\n      var data = this.props.value;\n\n      if (!this.props.lazy) {\n        if (data && data.length) {\n          var sortField = localState && localState.sortField || this.getSortField();\n          var sortOrder = localState && localState.sortOrder || this.getSortOrder();\n          var multiSortMeta = localState && localState.multiSortMeta || this.getMultiSortMeta();\n\n          if (sortField || multiSortMeta) {\n            if (this.props.sortMode === 'single') data = this.sortSingle(data, sortField, sortOrder);else if (this.props.sortMode === 'multiple') data = this.sortMultiple(data, multiSortMeta);\n          }\n\n          var localFilters = localState && localState.filters || this.getFilters();\n\n          if (localFilters || this.props.globalFilter) {\n            data = this.filterLocal(data, localFilters);\n          }\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"isAllSelected\",\n    value: function isAllSelected() {\n      var visibleData = this.hasFilter() ? this.processData() : this.props.value;\n      return this.props.selection && visibleData && visibleData.length && this.props.selection.length === visibleData.length;\n    }\n  }, {\n    key: \"getFrozenColumns\",\n    value: function getFrozenColumns(columns) {\n      var frozenColumns = null;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = columns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var col = _step2.value;\n\n          if (col.props.frozen) {\n            frozenColumns = frozenColumns || [];\n            frozenColumns.push(col);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return frozenColumns;\n    }\n  }, {\n    key: \"getScrollableColumns\",\n    value: function getScrollableColumns(columns) {\n      var scrollableColumns = null;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = columns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var col = _step3.value;\n\n          if (!col.props.frozen) {\n            scrollableColumns = scrollableColumns || [];\n            scrollableColumns.push(col);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return scrollableColumns;\n    }\n  }, {\n    key: \"getFrozenSelectionModeInColumn\",\n    value: function getFrozenSelectionModeInColumn(columns) {\n      if (Array.isArray(columns)) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = columns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var col = _step4.value;\n            if (col.props.selectionMode) return col.props.selectionMode;\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"createTableHeader\",\n    value: function createTableHeader(value, columns, columnGroup) {\n      return _react.default.createElement(_TableHeader.TableHeader, {\n        value: value,\n        onSort: this.onSort,\n        sortField: this.getSortField(),\n        sortOrder: this.getSortOrder(),\n        multiSortMeta: this.getMultiSortMeta(),\n        columnGroup: columnGroup,\n        resizableColumns: this.props.resizableColumns,\n        onColumnResizeStart: this.onColumnResizeStart,\n        onFilter: this.onFilter,\n        onHeaderCheckboxClick: this.onHeaderCheckboxClick,\n        headerCheckboxSelected: this.isAllSelected(),\n        reorderableColumns: this.props.reorderableColumns,\n        onColumnDragStart: this.onColumnDragStart,\n        filters: this.getFilters(),\n        onColumnDragOver: this.onColumnDragOver,\n        onColumnDragLeave: this.onColumnDragLeave,\n        onColumnDrop: this.onColumnDrop,\n        tabIndex: this.props.tabIndex\n      }, columns);\n    }\n  }, {\n    key: \"createTableBody\",\n    value: function createTableBody(value, columns) {\n      return _react.default.createElement(_TableBody.TableBody, {\n        value: value,\n        first: this.getFirst(),\n        rows: this.getRows(),\n        lazy: this.props.lazy,\n        dataKey: this.props.dataKey,\n        compareSelectionBy: this.props.compareSelectionBy,\n        selectionMode: this.props.selectionMode,\n        selection: this.props.selection,\n        metaKeySelection: this.props.metaKeySelection,\n        frozenSelectionMode: this.frozenSelectionMode,\n        onSelectionChange: this.props.onSelectionChange,\n        onRowClick: this.props.onRowClick,\n        onRowDoubleClick: this.props.onRowDoubleClick,\n        onRowSelect: this.props.onRowSelect,\n        onRowUnselect: this.props.onRowUnselect,\n        contextMenuSelection: this.props.contextMenuSelection,\n        onContextMenuSelectionChange: this.props.onContextMenuSelectionChange,\n        onContextMenu: this.props.onContextMenu,\n        expandedRows: this.props.expandedRows,\n        onRowToggle: this.props.onRowToggle,\n        rowExpansionTemplate: this.props.rowExpansionTemplate,\n        onRowExpand: this.props.onRowExpand,\n        onRowCollapse: this.props.onRowCollapse,\n        responsive: this.props.responsive,\n        emptyMessage: this.props.emptyMessage,\n        virtualScroll: this.props.virtualScroll,\n        virtualRowHeight: this.props.virtualRowHeight,\n        loading: this.props.loading,\n        groupField: this.props.groupField,\n        rowGroupMode: this.props.rowGroupMode,\n        rowGroupHeaderTemplate: this.props.rowGroupHeaderTemplate,\n        rowGroupFooterTemplate: this.props.rowGroupFooterTemplate,\n        sortField: this.getSortField(),\n        rowClassName: this.props.rowClassName,\n        onRowReorder: this.props.onRowReorder\n      }, columns);\n    }\n  }, {\n    key: \"createTableLoadingBody\",\n    value: function createTableLoadingBody(columns) {\n      if (this.props.virtualScroll) {\n        return _react.default.createElement(_TableLoadingBody.TableLoadingBody, {\n          columns: columns,\n          rows: this.getRows()\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"createTableFooter\",\n    value: function createTableFooter(columns, columnGroup) {\n      if (this.hasFooter()) return _react.default.createElement(_TableFooter.TableFooter, {\n        columnGroup: columnGroup\n      }, columns);else return null;\n    }\n  }, {\n    key: \"createScrollableView\",\n    value: function createScrollableView(value, columns, frozen, headerColumnGroup, footerColumnGroup, totalRecords) {\n      return _react.default.createElement(_ScrollableView.ScrollableView, {\n        columns: columns,\n        header: this.createTableHeader(value, columns, headerColumnGroup),\n        body: this.createTableBody(value, columns),\n        loadingBody: this.createTableLoadingBody(columns),\n        frozenBody: this.props.frozenValue ? this.createTableBody(this.props.frozenValue, columns) : null,\n        footer: this.createTableFooter(columns, footerColumnGroup),\n        tableStyle: this.props.tableStyle,\n        tableClassName: this.props.tableClassName,\n        scrollHeight: this.props.scrollHeight,\n        frozen: frozen,\n        frozenWidth: this.props.frozenWidth,\n        virtualScroll: this.props.virtualScroll,\n        virtualRowHeight: this.props.virtualRowHeight,\n        rows: this.props.rows,\n        totalRecords: totalRecords,\n        onVirtualScroll: this.onVirtualScroll,\n        loading: this.props.loading\n      });\n    }\n  }, {\n    key: \"getColumns\",\n    value: function getColumns() {\n      var columns = _react.default.Children.toArray(this.props.children);\n\n      if (columns && columns.length) {\n        if (this.props.reorderableColumns && this.state.columnOrder) {\n          var orderedColumns = [];\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = this.state.columnOrder[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var columnKey = _step5.value;\n              var column = this.findColumnByKey(columns, columnKey);\n\n              if (column) {\n                orderedColumns.push(column);\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          return [].concat(orderedColumns, _toConsumableArray(columns.filter(function (item) {\n            return orderedColumns.indexOf(item) < 0;\n          })));\n        } else {\n          return columns;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findColumnByKey\",\n    value: function findColumnByKey(columns, key) {\n      if (columns && columns.length) {\n        for (var i = 0; i < columns.length; i++) {\n          var child = columns[i];\n\n          if (child.props.columnKey === key || child.props.field === key) {\n            return child;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getTotalRecords\",\n    value: function getTotalRecords(data) {\n      return this.props.lazy ? this.props.totalRecords : data ? data.length : 0;\n    }\n  }, {\n    key: \"resetColumnOrder\",\n    value: function resetColumnOrder() {\n      var columns = _react.default.Children.toArray(this.props.children);\n\n      var columnOrder = [];\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = columns[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var column = _step6.value;\n          columnOrder.push(column.props.columnKey || column.props.field);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      this.setState({\n        columnOrder: columnOrder\n      });\n    }\n  }, {\n    key: \"renderLoader\",\n    value: function renderLoader() {\n      var iconClassName = (0, _classnames.default)('p-datatable-loading-icon pi-spin', this.props.loadingIcon);\n      return _react.default.createElement(\"div\", {\n        className: \"p-datatable-loading\"\n      }, _react.default.createElement(\"div\", {\n        className: \"p-datatable-loading-overlay p-component-overlay\"\n      }), _react.default.createElement(\"div\", {\n        className: \"p-datatable-loading-content\"\n      }, _react.default.createElement(\"i\", {\n        className: iconClassName\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.isStateful() && this.props.resizableColumns) {\n        this.restoreColumnWidths();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.isStateful()) {\n        this.saveState();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var value = this.processData();\n      var columns = this.getColumns();\n      var totalRecords = this.getTotalRecords(value);\n      var className = (0, _classnames.default)('p-datatable p-component', {\n        'p-datatable-responsive': this.props.responsive,\n        'p-datatable-resizable': this.props.resizableColumns,\n        'p-datatable-resizable-fit': this.props.resizableColumns && this.props.columnResizeMode === 'fit',\n        'p-datatable-scrollable': this.props.scrollable,\n        'p-datatable-virtual-scrollable': this.props.virtualScroll,\n        'p-datatable-auto-layout': this.props.autoLayout,\n        'p-datatable-hoverable-rows': this.props.selectionMode\n      }, this.props.className);\n      var paginatorTop = this.props.paginator && this.props.paginatorPosition !== 'bottom' && this.createPaginator('top', totalRecords);\n      var paginatorBottom = this.props.paginator && this.props.paginatorPosition !== 'top' && this.createPaginator('bottom', totalRecords);\n\n      var headerFacet = this.props.header && _react.default.createElement(\"div\", {\n        className: \"p-datatable-header\"\n      }, this.props.header);\n\n      var footerFacet = this.props.footer && _react.default.createElement(\"div\", {\n        className: \"p-datatable-footer\"\n      }, this.props.footer);\n\n      var resizeHelper = this.props.resizableColumns && _react.default.createElement(\"div\", {\n        ref: function ref(el) {\n          _this6.resizerHelper = el;\n        },\n        className: \"p-column-resizer-helper p-highlight\",\n        style: {\n          display: 'none'\n        }\n      });\n\n      var tableContent = null;\n\n      var resizeIndicatorUp = this.props.reorderableColumns && _react.default.createElement(\"span\", {\n        ref: function ref(el) {\n          _this6.reorderIndicatorUp = el;\n        },\n        className: \"pi pi-arrow-down p-datatable-reorder-indicator-up\",\n        style: {\n          position: 'absolute',\n          display: 'none'\n        }\n      });\n\n      var resizeIndicatorDown = this.props.reorderableColumns && _react.default.createElement(\"span\", {\n        ref: function ref(el) {\n          _this6.reorderIndicatorDown = el;\n        },\n        className: \"pi pi-arrow-up p-datatable-reorder-indicator-down\",\n        style: {\n          position: 'absolute',\n          display: 'none'\n        }\n      });\n\n      var loader;\n\n      if (this.props.loading) {\n        loader = this.renderLoader();\n      }\n\n      if (this.props.scrollable) {\n        this.frozenSelectionMode = this.frozenSelectionMode || this.getFrozenSelectionModeInColumn(columns);\n        var frozenColumns = this.getFrozenColumns(columns);\n        var scrollableColumns = frozenColumns ? this.getScrollableColumns(columns) : columns;\n        var frozenView, scrollableView;\n\n        if (frozenColumns) {\n          frozenView = this.createScrollableView(value, frozenColumns, true, this.props.frozenHeaderColumnGroup, this.props.frozenFooterColumnGroup, totalRecords);\n        }\n\n        scrollableView = this.createScrollableView(value, scrollableColumns, false, this.props.headerColumnGroup, this.props.footerColumnGroup, totalRecords);\n        tableContent = _react.default.createElement(\"div\", {\n          className: \"p-datatable-scrollable-wrapper\"\n        }, frozenView, scrollableView);\n      } else {\n        var tableHeader = this.createTableHeader(value, columns, this.props.headerColumnGroup);\n        var tableBody = this.createTableBody(value, columns);\n        var tableFooter = this.createTableFooter(columns, this.props.footerColumnGroup);\n        tableContent = _react.default.createElement(\"div\", {\n          className: \"p-datatable-wrapper\"\n        }, _react.default.createElement(\"table\", {\n          style: this.props.tableStyle,\n          className: this.props.tableClassName,\n          ref: function ref(el) {\n            _this6.table = el;\n          }\n        }, tableHeader, tableFooter, tableBody));\n      }\n\n      return _react.default.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        style: this.props.style,\n        ref: function ref(el) {\n          _this6.container = el;\n        }\n      }, loader, headerFacet, paginatorTop, tableContent, paginatorBottom, footerFacet, resizeHelper, resizeIndicatorUp, resizeIndicatorDown);\n    }\n  }]);\n\n  return DataTable;\n}(_react.Component);\n\nexports.DataTable = DataTable;\n\n_defineProperty(DataTable, \"defaultProps\", {\n  id: null,\n  value: null,\n  header: null,\n  footer: null,\n  style: null,\n  className: null,\n  tableStyle: null,\n  tableClassName: null,\n  paginator: false,\n  paginatorPosition: 'bottom',\n  alwaysShowPaginator: true,\n  paginatorTemplate: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown',\n  paginatorLeft: null,\n  paginatorRight: null,\n  pageLinkSize: 5,\n  rowsPerPageOptions: null,\n  currentPageReportTemplate: '({currentPage} of {totalPages})',\n  first: null,\n  rows: null,\n  totalRecords: null,\n  lazy: false,\n  sortField: null,\n  sortOrder: null,\n  multiSortMeta: null,\n  sortMode: 'single',\n  defaultSortOrder: 1,\n  emptyMessage: null,\n  selectionMode: null,\n  selection: null,\n  onSelectionChange: null,\n  contextMenuSelection: null,\n  onContextMenuSelectionChange: null,\n  compareSelectionBy: 'deepEquals',\n  dataKey: null,\n  metaKeySelection: true,\n  headerColumnGroup: null,\n  footerColumnGroup: null,\n  frozenHeaderColumnGroup: null,\n  frozenFooterColumnGroup: null,\n  rowExpansionTemplate: null,\n  expandedRows: null,\n  onRowToggle: null,\n  responsive: false,\n  resizableColumns: false,\n  columnResizeMode: 'fit',\n  reorderableColumns: false,\n  filters: null,\n  globalFilter: null,\n  scrollable: false,\n  scrollHeight: null,\n  virtualScroll: false,\n  virtualScrollDelay: 150,\n  virtualRowHeight: 28,\n  frozenWidth: null,\n  frozenValue: null,\n  csvSeparator: ',',\n  exportFilename: 'download',\n  rowGroupMode: null,\n  autoLayout: false,\n  rowClassName: null,\n  rowGroupHeaderTemplate: null,\n  rowGroupFooterTemplate: null,\n  loading: false,\n  loadingIcon: 'pi pi-spinner',\n  tabIndex: '0',\n  stateKey: null,\n  stateStorage: 'session',\n  onColumnResizeEnd: null,\n  onSort: null,\n  onPage: null,\n  onFilter: null,\n  onVirtualScroll: null,\n  onRowClick: null,\n  onRowDoubleClick: null,\n  onRowSelect: null,\n  onRowUnselect: null,\n  onRowExpand: null,\n  onRowCollapse: null,\n  onContextMenu: null,\n  onColReorder: null,\n  onRowReorder: null,\n  onValueChange: null\n});\n\n_defineProperty(DataTable, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.array,\n  header: _propTypes.default.any,\n  footer: _propTypes.default.any,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  tableStyle: _propTypes.default.any,\n  tableClassName: _propTypes.default.string,\n  paginator: _propTypes.default.bool,\n  paginatorPosition: _propTypes.default.string,\n  alwaysShowPaginator: _propTypes.default.bool,\n  paginatorTemplate: _propTypes.default.string,\n  paginatorLeft: _propTypes.default.any,\n  paginatorRight: _propTypes.default.any,\n  pageLinkSize: _propTypes.default.number,\n  rowsPerPageOptions: _propTypes.default.array,\n  currentPageReportTemplate: _propTypes.default.string,\n  first: _propTypes.default.number,\n  rows: _propTypes.default.number,\n  totalRecords: _propTypes.default.number,\n  lazy: _propTypes.default.bool,\n  sortField: _propTypes.default.string,\n  sortOrder: _propTypes.default.number,\n  multiSortMeta: _propTypes.default.array,\n  sortMode: _propTypes.default.string,\n  defaultSortOrder: _propTypes.default.number,\n  emptyMessage: _propTypes.default.string,\n  selectionMode: _propTypes.default.string,\n  selection: _propTypes.default.any,\n  onSelectionChange: _propTypes.default.func,\n  compareSelectionBy: _propTypes.default.string,\n  dataKey: _propTypes.default.string,\n  metaKeySelection: _propTypes.default.bool,\n  headerColumnGroup: _propTypes.default.any,\n  footerColumnGroup: _propTypes.default.any,\n  frozenHeaderColumnGroup: _propTypes.default.any,\n  frozenFooterColumnGroup: _propTypes.default.any,\n  rowExpansionTemplate: _propTypes.default.func,\n  expandedRows: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),\n  onRowToggle: _propTypes.default.func,\n  responsive: _propTypes.default.bool,\n  resizableColumns: _propTypes.default.bool,\n  columnResizeMode: _propTypes.default.string,\n  reorderableColumns: _propTypes.default.bool,\n  filters: _propTypes.default.object,\n  globalFilter: _propTypes.default.any,\n  scrollable: _propTypes.default.bool,\n  scrollHeight: _propTypes.default.string,\n  virtualScroll: _propTypes.default.bool,\n  virtualScrollDelay: _propTypes.default.number,\n  virtualRowHeight: _propTypes.default.number,\n  frozenWidth: _propTypes.default.string,\n  frozenValue: _propTypes.default.array,\n  csvSeparator: _propTypes.default.string,\n  exportFilename: _propTypes.default.string,\n  rowGroupMode: _propTypes.default.string,\n  autoLayout: _propTypes.default.bool,\n  rowClassName: _propTypes.default.func,\n  rowGroupHeaderTemplate: _propTypes.default.func,\n  rowGroupFooterTemplate: _propTypes.default.func,\n  loading: _propTypes.default.bool,\n  loadingIcon: _propTypes.default.string,\n  tabIndex: _propTypes.default.string,\n  stateKey: _propTypes.default.string,\n  stateStorage: _propTypes.default.string,\n  onColumnResizeEnd: _propTypes.default.func,\n  onSort: _propTypes.default.func,\n  onPage: _propTypes.default.func,\n  onFilter: _propTypes.default.func,\n  onVirtualScroll: _propTypes.default.func,\n  onRowClick: _propTypes.default.func,\n  onRowDoubleClick: _propTypes.default.func,\n  onRowSelect: _propTypes.default.func,\n  onRowUnselect: _propTypes.default.func,\n  onRowExpand: _propTypes.default.func,\n  onRowCollapse: _propTypes.default.func,\n  onContextMenu: _propTypes.default.func,\n  onColReorder: _propTypes.default.func,\n  onRowReorder: _propTypes.default.func,\n  onValueChange: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}