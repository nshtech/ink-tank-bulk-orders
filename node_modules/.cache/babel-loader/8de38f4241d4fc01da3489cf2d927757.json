{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Spinner = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _InputText = require(\"../inputtext/InputText\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Tooltip = _interopRequireDefault(require(\"../tooltip/Tooltip\"));\n\nvar _DomHandler = _interopRequireDefault(require(\"../utils/DomHandler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Spinner = /*#__PURE__*/function (_Component) {\n  _inherits(Spinner, _Component);\n\n  function Spinner(props) {\n    var _this;\n\n    _classCallCheck(this, Spinner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spinner).call(this, props));\n\n    if (_this.props.value && _this.props.value.toString().indexOf('.') > 0) {\n      _this.precision = _this.props.value.toString().split(/[.]/)[1].length;\n    } else if (_this.props.step % 1 !== 0) {\n      // If step is not an integer then extract the length of the decimal part\n      _this.precision = _this.props.step.toString().split(/[,]|[.]/)[1].length;\n    }\n\n    if (_this.props.formatInput) {\n      _this.localeDecimalSeparator = 1.1.toLocaleString().substring(1, 2);\n      _this.localeThousandSeparator = 1000 .toLocaleString().substring(1, 2);\n      _this.thousandRegExp = new RegExp(\"[\".concat(_this.props.thousandSeparator || _this.localeThousandSeparator, \"]\"), 'gim');\n\n      if (_this.props.decimalSeparator && _this.props.thousandSeparator && _this.props.decimalSeparator === _this.props.thousandSeparator) {\n        console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n      }\n    }\n\n    _this.formatValue(_this.props.value);\n\n    _this.onInputKeyDown = _this.onInputKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputBlur = _this.onInputBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onInputFocus = _this.onInputFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpButtonMouseLeave = _this.onUpButtonMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpButtonMouseDown = _this.onUpButtonMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpButtonMouseUp = _this.onUpButtonMouseUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpButtonKeyDown = _this.onUpButtonKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpButtonKeyUp = _this.onUpButtonKeyUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDownButtonMouseLeave = _this.onDownButtonMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDownButtonMouseDown = _this.onDownButtonMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDownButtonMouseUp = _this.onDownButtonMouseUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDownButtonKeyDown = _this.onDownButtonKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDownButtonKeyUp = _this.onDownButtonKeyUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Spinner, [{\n    key: \"repeat\",\n    value: function repeat(event, interval, dir) {\n      var _this2 = this;\n\n      var i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this2.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(event, dir) {\n      var step = this.props.step * dir;\n      var currentValue;\n      var newValue;\n      if (this.props.value) currentValue = typeof this.props.value === 'string' ? this.parseValue(this.props.value) : this.props.value;else currentValue = 0;\n      if (this.precision) newValue = parseFloat(this.toFixed(currentValue + step, this.precision));else newValue = currentValue + step;\n\n      if (this.props.maxlength !== null && this.props.value.toString().length > this.props.maxlength) {\n        newValue = currentValue;\n      }\n\n      if (this.props.min !== null && newValue < this.props.min) {\n        newValue = this.props.min;\n      }\n\n      if (this.props.max !== null && newValue > this.props.max) {\n        newValue = this.props.max;\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange({\n          originalEvent: event,\n          value: newValue,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: newValue\n          }\n        });\n      }\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed(value, precision) {\n      var power = Math.pow(10, precision || 0);\n      return String(Math.round(value * power) / power);\n    }\n  }, {\n    key: \"onUpButtonMouseDown\",\n    value: function onUpButtonMouseDown(event) {\n      if (!this.props.disabled) {\n        this.inputEl.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseUp\",\n    value: function onUpButtonMouseUp(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseLeave\",\n    value: function onUpButtonMouseLeave(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonKeyUp\",\n    value: function onUpButtonKeyUp(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonKeyDown\",\n    value: function onUpButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, 1);\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseDown\",\n    value: function onDownButtonMouseDown(event, focusInput) {\n      if (!this.props.disabled) {\n        this.inputEl.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseUp\",\n    value: function onDownButtonMouseUp(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseLeave\",\n    value: function onDownButtonMouseLeave(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonKeyUp\",\n    value: function onDownButtonKeyUp(event) {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonKeyDown\",\n    value: function onDownButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, -1);\n      }\n    }\n  }, {\n    key: \"onInputKeyDown\",\n    value: function onInputKeyDown(event) {\n      if (event.which === 38) {\n        this.spin(event, 1);\n        event.preventDefault();\n      } else if (event.which === 40) {\n        this.spin(event, -1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(val) {\n      var value = val.trim();\n\n      if (val === '') {\n        value = this.props.min != null ? this.props.min : null;\n      } else {\n        if (this.props.formatInput) {\n          val = val.replace(this.thousandRegExp, '');\n        }\n\n        if (this.precision) {\n          val = this.props.formatInput ? val.replace(this.props.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n          value = parseFloat(val);\n        } else {\n          value = parseInt(val, 10);\n        }\n\n        if (!isNaN(value)) {\n          if (this.props.max !== null && value > this.props.max) {\n            value = this.props.max;\n          }\n\n          if (this.props.min !== null && value < this.props.min) {\n            value = this.props.min;\n          }\n        } else {\n          value = null;\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      _DomHandler.default.addClass(this.element, 'p-inputwrapper-focus');\n    }\n  }, {\n    key: \"onInputChange\",\n    value: function onInputChange(event) {\n      if (this.props.onChange) {\n        this.props.onChange({\n          originalEvent: event,\n          value: event.target.value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: event.target.value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      _DomHandler.default.removeClass(this.element, 'p-inputwrapper-focus');\n\n      if (this.props.onChange) {\n        var parsedValue = this.parseValue(event.target.value);\n        this.props.onChange({\n          originalEvent: event,\n          value: parsedValue,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: parsedValue\n          }\n        });\n      }\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      if (value != null) {\n        if (this.props.formatInput) {\n          value = value.toLocaleString(undefined, {\n            maximumFractionDigits: 20\n          });\n\n          if (this.props.decimalSeparator && this.props.thousandSeparator) {\n            value = value.split(this.localeDecimalSeparator);\n\n            if (this.precision && value[1]) {\n              value[1] = (this.props.decimalSeparator || this.localeDecimalSeparator) + value[1];\n            }\n\n            if (this.props.thousandSeparator && value[0].length > 3) {\n              value[0] = value[0].replace(new RegExp(\"[\".concat(this.localeThousandSeparator, \"]\"), 'gim'), this.props.thousandSeparator);\n            }\n\n            value = value.join('');\n          }\n        }\n\n        this.formattedValue = value.toString();\n      }\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        this.formatValue(nextProps.value);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.tooltip && prevProps.tooltip !== this.props.tooltip) {\n        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = new _Tooltip.default({\n        target: this.element,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderInputElement\",\n    value: function renderInputElement() {\n      var _this3 = this;\n\n      var className = (0, _classnames.default)('p-spinner-input', this.props.inputClassName);\n      return _react.default.createElement(_InputText.InputText, {\n        ref: function ref(el) {\n          return _this3.inputEl = _reactDom.default.findDOMNode(el);\n        },\n        id: this.props.inputId,\n        style: this.props.inputStyle,\n        className: className,\n        value: this.formattedValue || '',\n        type: \"text\",\n        size: this.props.size,\n        maxLength: this.props.maxlength,\n        disabled: this.props.disabled,\n        required: this.props.required,\n        pattern: this.props.pattern,\n        placeholder: this.props.placeholder,\n        readOnly: this.props.readonly,\n        name: this.props.name,\n        onKeyDown: this.onInputKeyDown,\n        onBlur: this.onInputBlur,\n        onChange: this.onInputChange,\n        onFocus: this.onInputFocus\n      });\n    }\n  }, {\n    key: \"renderUpButton\",\n    value: function renderUpButton() {\n      var className = (0, _classnames.default)(\"p-spinner-button p-spinner-button-up p-button p-component\", {\n        'p-disabled': this.props.disabled\n      });\n      return _react.default.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onMouseLeave: this.onUpButtonMouseLeave,\n        onMouseDown: this.onUpButtonMouseDown,\n        onMouseUp: this.onUpButtonMouseUp,\n        onKeyDown: this.onUpButtonKeyDown,\n        onKeyUp: this.onUpButtonKeyUp,\n        disabled: this.props.disabled\n      }, _react.default.createElement(\"span\", {\n        className: \"p-spinner-button-icon pi pi-caret-up\"\n      }));\n    }\n  }, {\n    key: \"renderDownButton\",\n    value: function renderDownButton() {\n      var className = (0, _classnames.default)(\"p-spinner-button p-spinner-button-down p-button p-component\", {\n        'p-disabled': this.props.disabled\n      });\n      return _react.default.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onMouseLeave: this.onDownButtonMouseLeave,\n        onMouseDown: this.onDownButtonMouseDown,\n        onMouseUp: this.onDownButtonMouseUp,\n        onKeyDown: this.onDownButtonKeyDown,\n        onKeyUp: this.onDownButtonKeyUp,\n        disabled: this.props.disabled\n      }, _react.default.createElement(\"span\", {\n        className: \"p-spinner-button-icon pi pi-caret-down\"\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var className = (0, _classnames.default)(\"p-spinner p-component\", this.props.className, {\n        'p-inputwrapper-filled': this.props.value != null\n      });\n      var inputElement = this.renderInputElement();\n      var upButton = this.renderUpButton();\n      var downButton = this.renderDownButton();\n      return _react.default.createElement(\"span\", {\n        ref: function ref(el) {\n          return _this4.element = el;\n        },\n        id: this.props.id,\n        className: className,\n        style: this.props.style\n      }, inputElement, upButton, downButton);\n    }\n  }]);\n\n  return Spinner;\n}(_react.Component);\n\nexports.Spinner = Spinner;\n\n_defineProperty(Spinner, \"defaultProps\", {\n  id: null,\n  value: null,\n  name: null,\n  step: 1,\n  min: null,\n  max: null,\n  formatInput: false,\n  decimalSeparator: null,\n  thousandSeparator: null,\n  disabled: false,\n  required: false,\n  pattern: null,\n  placeholder: null,\n  readonly: false,\n  maxlength: null,\n  size: null,\n  style: null,\n  className: null,\n  inputId: null,\n  inputStyle: null,\n  inputClassName: null,\n  tooltip: null,\n  tooltipOptions: null,\n  onChange: null,\n  onBlur: null\n});\n\n_defineProperty(Spinner, \"propTypes\", {\n  id: _propTypes.default.string,\n  value: _propTypes.default.any,\n  name: _propTypes.default.string,\n  step: _propTypes.default.number,\n  min: _propTypes.default.number,\n  max: _propTypes.default.number,\n  formatInput: _propTypes.default.bool,\n  decimalSeparator: _propTypes.default.string,\n  thousandSeparator: _propTypes.default.string,\n  disabled: _propTypes.default.bool,\n  required: _propTypes.default.bool,\n  pattern: _propTypes.default.string,\n  placeholder: _propTypes.default.string,\n  readonly: _propTypes.default.bool,\n  maxlength: _propTypes.default.number,\n  size: _propTypes.default.number,\n  style: _propTypes.default.object,\n  className: _propTypes.default.string,\n  inputId: _propTypes.default.string,\n  inputStyle: _propTypes.default.object,\n  inputClassName: _propTypes.default.string,\n  tooltip: _propTypes.default.string,\n  tooltipOptions: _propTypes.default.object,\n  onChange: _propTypes.default.func,\n  onBlur: _propTypes.default.func\n});","map":null,"metadata":{},"sourceType":"script"}