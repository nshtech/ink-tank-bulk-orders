[{"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/index.js":"1","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/ScrollToTop.js":"2","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/App.js":"3","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppMenu.js":"4","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppFooter.js":"5","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppTopbar.js":"6","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppProfile.js":"7","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/Dashboard.js":"8","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/OrderSheet.js":"9","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/AddCustomers.js":"10","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/BagTracker.js":"11","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/PanelsDemo.js":"12","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/OverlaysDemo.js":"13","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/ChartsDemo.js":"14","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MenusDemo.js":"15","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/SampleDemo.js":"16","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MessagesDemo.js":"17","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/CustomerSearch.js":"18","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/FormsDemo.js":"19","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/DataDemo.js":"20","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MiscDemo.js":"21","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/EmptyPage.js":"22","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/Documentation.js":"23","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/CustomerSheet.js":"24","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/EventService.js":"25","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/CarService.js":"26","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/NodeService.js":"27","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/CountryService.js":"28"},{"size":655,"mtime":1616878532461,"results":"29","hashOfConfig":"30"},{"size":361,"mtime":1616878532456,"results":"31","hashOfConfig":"30"},{"size":11724,"mtime":1621226331213,"results":"32","hashOfConfig":"30"},{"size":3290,"mtime":1616878532455,"results":"33","hashOfConfig":"30"},{"size":305,"mtime":1616878532455,"results":"34","hashOfConfig":"30"},{"size":1265,"mtime":1616878532456,"results":"35","hashOfConfig":"30"},{"size":1504,"mtime":1616878532455,"results":"36","hashOfConfig":"30"},{"size":323,"mtime":1616878532458,"results":"37","hashOfConfig":"30"},{"size":5928,"mtime":1616878532460,"results":"38","hashOfConfig":"30"},{"size":19652,"mtime":1616878532456,"results":"39","hashOfConfig":"30"},{"size":25820,"mtime":1621221130614,"results":"40","hashOfConfig":"30"},{"size":7785,"mtime":1616878532460,"results":"41","hashOfConfig":"30"},{"size":5026,"mtime":1616878532460,"results":"42","hashOfConfig":"30"},{"size":5698,"mtime":1616878532457,"results":"43","hashOfConfig":"30"},{"size":19029,"mtime":1616878532459,"results":"44","hashOfConfig":"30"},{"size":34835,"mtime":1616878532461,"results":"45","hashOfConfig":"30"},{"size":3816,"mtime":1616878532460,"results":"46","hashOfConfig":"30"},{"size":22249,"mtime":1621221130615,"results":"47","hashOfConfig":"30"},{"size":24637,"mtime":1616878532459,"results":"48","hashOfConfig":"30"},{"size":13173,"mtime":1616878532458,"results":"49","hashOfConfig":"30"},{"size":1697,"mtime":1616878532460,"results":"50","hashOfConfig":"30"},{"size":469,"mtime":1616878532459,"results":"51","hashOfConfig":"30"},{"size":13379,"mtime":1616878532458,"results":"52","hashOfConfig":"30"},{"size":7044,"mtime":1616878532457,"results":"53","hashOfConfig":"30"},{"size":188,"mtime":1616878532466,"results":"54","hashOfConfig":"30"},{"size":463,"mtime":1616878532466,"results":"55","hashOfConfig":"30"},{"size":808,"mtime":1616878532467,"results":"56","hashOfConfig":"30"},{"size":322,"mtime":1616878532466,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t6rh16",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/index.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/ScrollToTop.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/App.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppMenu.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppFooter.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppTopbar.js",["136"],"import React, {Component} from 'react';\nimport {InputText} from 'primereact/inputtext';\nimport PropTypes from 'prop-types';\n\nexport class AppTopbar extends Component {\n    \n\n    static defaultProps = {\n        onToggleMenu: null,\n        logout: null\n    }\n\n    static propTypes = {\n        onToggleMenu: PropTypes.func.isRequired,\n        logout: PropTypes.func.isRequired\n    }\n\n    render() {\n        return (\n            <div className=\"layout-topbar clearfix\">\n                <button className=\"p-link layout-menu-button\" onClick={this.props.onToggleMenu}>\n                    <span className=\"pi pi-bars\"/>\n                </button>\n\n                <div className=\"layout-topbar-icons\">\n                    <button className=\"p-link\" onClick={this.props.logout}>\n                        <span className=\"layout-topbar-item-text\">Logout</span>\n                        <span className=\"layout-topbar-icon pi pi-fw pi-power-off\" />\n                    </button>\n                    {/* <button className=\"p-link\">\n                        <span className=\"layout-topbar-item-text\">User</span>\n                        <span className=\"layout-topbar-icon pi pi-user\"/>\n                    </button> */}\n                </div>\n            </div>\n        );\n    }\n}","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/AppProfile.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/Dashboard.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/OrderSheet.js",["137"],"import React, { Component } from 'react';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column'\nimport { InputText } from 'primereact/inputtext';\nimport { Growl } from 'primereact/growl';\n\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// import classNames from 'classnames';\n\nimport '../Dashboard.css';\n//import { arrayToHash } from '@fullcalendar/core/util/object';\n\n\nexport class OrderSheet extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            customers: [],\n            orders: [],\n            selectedStatus: null,\n            editing: false\n        };\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.export = this.export.bind(this);\n        this.onStatusFilterChange = this.onStatusFilterChange.bind(this);\n\n        this.generalEditor = this.generalEditor.bind(this);\n    }\n    export() {\n        this.dt.exportCSV();\n    }\n\n    /* --------------- Editing ---------------- */\n    edit() {\n        this.setState({ editing: true });\n        this.growl.show({ severity: 'info', summary: 'Editing Enabled', detail: 'Save changes before continuing' });\n    }\n\n    save() {\n        this.setState({ editing: false });\n        this.growl.clear();\n    }\n\n    onEditorValueChange(props, value) {\n        firebase.database().ref('/customers/' + props.rowData.id + '/' + props.field).set(value)\n        let updatedCustomers = [...props.value];\n        updatedCustomers[props.rowIndex][props.field] = value;\n        this.setState({ customers: updatedCustomers });\n        console.log(props)\n    }\n\n    inputTextEditor(props, field) {\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(props, e.target.value)} />;\n    }\n\n    generalEditor(props) {\n        return this.inputTextEditor(props, ' ');\n    }\n\n    phoneValidator(props) {\n        let value = props.rowData[props.field]\n        return value[3] === '-' && value.length === 12;\n    }\n    emailValidator(props) {\n        let value = props.rowData[props.field]\n        return value && value.length > 0;\n    }\n\n    /* --------------- Filters ---------------- */\n    statusBodyTemplate(rowData) {\n        var laundryStatusDisplay = {\n            'picked-up': 'picked up',\n            'delivered-to-SH': 'delivered to SH',\n            'delivered-to-dorm': 'delivered to dorm',\n            'out-of-service': 'out of service',\n            'bag-missing': 'bag missing'\n        }\n        return <span className={rowData.laundrystatus}>{laundryStatusDisplay[rowData.laundrystatus]}</span>\n    }\n\n    weightBodyTemplate(rowData) {\n        return <span className={rowData.weightstatus}>{rowData.weightstatus}</span>;\n    }\n\n    renderStatusFilter() {\n        var statuses = [\n            { label: 'Picked Up', value: 'picked-up' },\n            { label: 'Out of Service', value: 'out-of-service' },\n            { label: 'Delivered to SH', value: 'delivered-to-SH' },\n            { label: 'Delivered to Dorm', value: 'delivered-to-dorm' },\n            { label: 'Bag Missing', value: 'bag-missing' }\n        ];\n        return (\n            <Dropdown value={this.state.selectedStatus} options={statuses} onChange={this.onStatusFilterChange}\n                showClear={true} placeholder=\"Select a Status\" className=\"p-column-filter\" style={{ maxWidth: 200, minWidth: 50 }} />\n        );\n    }\n\n    onStatusFilterChange(event) {\n        this.dt.filter(event.value, 'laundrystatus', 'equals');\n        this.setState({ selectedStatus: event.value });\n    }\n\n    componentDidMount() {\n        const customerArray = [];\n        firebase.database().ref('/customers').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                customerArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ customers: customerArray });\n        const orderArray = [];\n        firebase.database().ref('/orders').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                orderArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ orders: orderArray });\n    }\n\n    render() {\n        const statusFilter = this.renderStatusFilter();\n        /* --------------- RETURN ---------------- */\n        /* ---------------- edit mode ------------*/\n        var header = <div style={{ textAlign: 'left' }}></div>;\n        return (\n            <div>\n                <Growl ref={(el) => this.growl = el} />\n                <div className=\"card\">\n                    <h1>Order Database</h1>\n                    <p>All members of the RezLaundry team should have read and write access to this database.</p>\n                    <DataTable value={this.state.orders} header={header} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} responsive={true} autoLayout={true} editMode=\"row\" rowEditorValidator={this.onRowEditorValidator} onRowEditInit={this.onRowEditInit} onRowEditSave={this.onRowEditSave} onRowEditCancel={this.onRowEditCancel}>\n                        <Column field=\"date\" header=\"Date\" sortable={true} filter filterPlaceholder=\"Search by date\"/>\n                        <Column field=\"id\" header=\"ID\" sortable={true} filter filterPlaceholder=\"Search by ID\"/>\n                        <Column field=\"weight\" header=\"Weight\" sortable={true} filter filterPlaceholder=\"Search by weight\"/>\n                        <Column field=\"weightstatus\" header=\"Overweight\" sortable={true} body={this.weightBodyTemplate} />\n                        <Column field=\"laundrystatus\" header=\"Status\" sortable={true} body={this.statusBodyTemplate} filter filterElement={statusFilter}/>\n                    </DataTable>\n                </div>\n            </div>\n        )\n\n    }\n}","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/AddCustomers.js",["138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"import React, { Component } from 'react';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column'\nimport { Chart } from 'primereact/chart'\nimport { InputText } from 'primereact/inputtext';\nimport { Editor } from 'primereact/editor';\nimport {InputTextarea} from 'primereact/inputtextarea';\nimport {Messages} from 'primereact/messages';\nimport {Message} from 'primereact/message';\n\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport validator from 'validator'\n\n\nimport customerData from '../customers.json';\n// import classNames from 'classnames';\n\nimport '../Dashboard.css';\n//import { arrayToHash } from '@fullcalendar/core/util/object';\n\n\nexport class AddCustomers extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            customers: [],\n            orders: [],\n            selectedCustomer: null,\n            editing: false,\n            idcount: null,\n            newfirstname: null,\n            newlastname: null,\n            newid: null,\n            newplanYear: null,\n            newplanQuarter: null,\n            newmax: null,\n            newreshall: null,\n            newphone: null,\n            newemail: null,\n            planSelectYear: [\n                {label: '2020-2021', value: '2020-2021'},\n                {label: '2021-2022', value: '2021-2022'},\n                {label: '2022-2023', value: '2022-2023'},\n                {label: '2023-2024', value: '2023-2024'}\n            ],\n            planSelectQuarter: [\n                {label: 'Full Year', value: '-F-W-S'},\n                {label: 'Winter/Spring Quarter', value: '-W-S'},\n                {label: 'Fall Quarter', value: '-F'},\n                {label: 'Winter Quarter', value: '-W'},\n                {label: 'Spring Quarter', value: '-S'},\n            ],\n            planSelectWeight: [\n                {label: '15 lb/week', value: '15'},\n                {label: '20 lb/week', value: '20'},\n                {label: '25 lb/week', value: '25'},\n            ],\n            planSelectReshall:[\n                {label: 'Choose later', value: 'Choose later'},\n                {label: '560 Lincoln', value: '560 Lincoln'},\n                {label: '720 Emerson', value: '720 Emerson'},\n                { label: '1715 Chicago', value: '1715 Chicago'},\n                {label: '1838 Chicago', value: '1838 Chicago'},\n                {label: '1856 Orrington', value: '1856 Orrington'},\n                {label: '2303 Sheridan', value: '2303 Sheridan'},\n                {label: 'Ayers', value: 'Ayers'},\n                {label: 'Allison', value: 'Allison'},\n                {label: 'Bobb', value: 'Bobb'},\n                {label: 'Chapin', value: 'Chapin'},\n                {label: 'East Fairchild', value: 'East Fairchild'},\n                {label: 'Elder', value: 'Elder'},\n                {label: 'West Fairchild', value: 'West Fairchild'},\n                {label: 'Foster-Walker (PLEX)', value: 'Foster-Walker (PLEX)'},\n                {label: 'Goodrich', value: 'Goodrich'},\n                {label: 'Hobart', value: 'Hobart'},\n                {label: 'Jones', value: 'Jones'},\n                {label: 'Kemper', value: 'Kemper'},\n                {label: 'McCulloch', value: 'McCulloch'},\n                {label: 'PARC (North Mid Quads)', value: 'PARC (North Mid Quads)'},\n                {label: 'Rogers House', value: 'Rogers House'},\n                {label: 'Sargent', value: 'Sargent'},\n                {label: 'Shepard Residential College (South Mid Quads)', value: 'Shepard Residential College (South Mid Quads)'},\n                {label: 'Shepard Hall', value: 'Shepard Hall'},\n                {label: 'Slivka', value: 'Slivka'},\n                {label: 'Willard', value: 'Willard'},\n                {label: 'Delta Gamma', value: 'Delta Gamma'},\n                {label: 'Kappa Kappa Gamma', value: 'Kappa Kappa Gamma'},\n                {label: 'Zeta Beta Tau (ZBT)', value: 'Zeta Beta Tau (ZBT)'}\n\n            ],\n\n        };\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.onPlanYearValueChange = this.onPlanYearValueChange.bind(this)\n        this.onPlanQuarterValueChange = this.onPlanQuarterValueChange.bind(this)\n        //this.getCustomerHistory = this.getCustomerHistory.bind(this)\n        this.displayPlanQuarters = this.displayPlanQuarters.bind(this)\n        this.resetNewInfo = this.resetNewInfo.bind(this)\n        this.addCustomer = this.addCustomer.bind(this)\n        this.padId = this.padId.bind(this)\n    }\n\n\n    padId(idNum) {\n        var digitLength = (idNum.toString()).length;\n        if (digitLength === 1) {\n            var result = '0000'+idNum;\n        }\n        else if (digitLength === 2) {\n            var result = '000'+idNum;\n        }\n        else if (digitLength === 3) {\n            var result = '00'+idNum;\n        }\n        else if (digitLength === 4) {\n            var result = '0'+idNum;\n        }\n        else if (digitLength === 5) {\n            var result = idNum.toString();\n        }\n        return result;\n\n    }\n    edit() {\n        this.setState({ editing: true });\n        //this.resetNewInfo();\n    }\n\n    save(customer) {\n        this.setState({ editing: false });\n        //console.log(this.state.newplan)\n        let allcustomers = [...this.state.customers];\n        let newcustomer = {...this.state.selectedCustomer};\n        if (this.state.newplanyear && this.state.newplanquarter) {\n             newcustomer.plan = this.state.newplanyear+this.state.newplanquarter;\n             //console.log('newplanQuarter: ', this.state.newplanQuarter);\n             //console.log('newplanYear', this.state.newplanYear)\n             firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n        }\n        else if (this.state.newplanyear) {\n            newcustomer.plan = this.state.newplanyear+customer.plan.substring(9);\n            //console.log('newcustomer.plan: ', newcustomer.plan);\n            //console.log('newplanYear', this.state.newplanYear)\n            //console.log('customer quarter: ', customer.plan.substring(9));\n            firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n       }\n       else if (this.state.newplanquarter) {\n            newcustomer.plan = customer.plan.substring(0,9)+this.state.newplanquarter;\n            //console.log('newcustomer.plan: ', newcustomer.plan);\n            //console.log('customer year', customer.plan.substring(0,9))\n            //console.log('newplanQuarter: ', this.state.newplanQuarter);\n            firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n   }\n        if (this.state.newmax) {\n            newcustomer.maxweight = this.state.newmax;\n            firebase.database().ref('/customers/' + customer.id + '/maxweight').set(newcustomer.maxweight);\n       }\n        if (this.state.newreshall) {\n            newcustomer.reshall = this.state.newreshall;\n            firebase.database().ref('/customers/' + customer.id + '/reshall').set(newcustomer.reshall);\n        }\n        if (this.state.newphone) {\n            newcustomer.phone = this.state.newphone;\n            firebase.database().ref('/customers/' + customer.id + '/phone').set(newcustomer.phone);\n        }\n        if (this.state.newemail) {\n            newcustomer.email = this.state.newemail;\n            firebase.database().ref('/customers/' + customer.id + '/email').set(newcustomer.email)\n        }\n        let count = 0;\n        let individual=null;\n        allcustomers.map(each => {\n            if (newcustomer.id == each.id) {\n                individual = {...allcustomers[count]};\n                individual= newcustomer;\n                allcustomers[count] = individual;\n            }\n            count = count+1\n        })\n        this.setState({ customers: allcustomers });\n        this.setState({selectedCustomer: newcustomer});\n        \n    }\n\n    //CUSTOMER INFORMATION EDITING\n    onFirstNameValueChange(value) {\n        //console.log('new first name: ', value)\n        this.setState({newfirstname: value});\n        \n    }\n    onLastNameValueChange(value) {\n        //console.log('new last name: ', value)\n        this.setState({newlastname: value});\n    }\n    onIdValueChange(value) {\n        //console.log('new id name: ', value)\n        this.setState({ newid: value });\n    }\n\n    onPlanYearValueChange(value) {\n        //console.log('newPlanYear: ', value)\n        this.setState({ newplanyear: value });\n    }\n    onPlanQuarterValueChange(value) {\n        //console.log('newPlanQuarter: ', value)\n        this.setState({ newplanquarter: value });\n    }\n    onMaxweightValueChange(value) {\n        this.setState({ newmax: value });\n    }\n    onReshallValueChange(value) {\n        this.setState({ newreshall: value });\n    }\n    onPhoneValueChange(value) {\n        if(value[3] ==='-' && value[7]==='-' && value.length===12) {\n            this.setState({ newphone: value });\n        }\n        //this.setState({ newphone: value });\n    }\n    onEmailValueChange(value) {\n        if (value.includes('@') && value.includes('.')) {\n            this.setState({ newemail: value });\n        }\n    }\n    resetNewInfo() {\n        this.setState({newfirstname: ''});\n        this.setState({newlastname: ''});\n        this.setState({ newid: '' });\n        this.setState({ newplanyear: '' });\n        this.setState({ newplanquarter: ''});\n        this.setState({ newmax: '' });\n        this.setState({ newreshall: '' });\n        this.setState({ newphone: '' });\n        this.setState({ newemail: '' });\n        this.setState({newoverage: ''});\n    }\n\n    addCustomer() {\n        //console.log('new first name: ', this.state.newfirstname);\n        //console.log('new last name: ', this.state.newlastname);\n        // console.log('new plan year: ', this.state.newplanyear);\n        // console.log('new plan quarter: ', this.state.newplanquarter);\n        // console.log('new max weight: ', this.state.newmax);\n        // console.log('new res hall: ', this.state.newreshall);\n        // console.log('new phone: ', this.state.newphone);\n        // console.log('new email: ', this.state.newemail);\n        //this.setState({idcount: this.state.idcount+1});\n        //console.log('updated id Count', this.state.idcount);\n        if(this.state.newfirstname !=='' && this.state.newlastname !== '' && this.state.newemail !=='' && this.state.newphone !== '' && this.state.newreshall!=='' && this.state.newmax!=='' && this.state.newplanyear!==null && this.state.newplanquarter !== null) {\n            \n            var idNum = this.padId(this.state.idcount);\n            // var id = this.state.newfirstname.substring(0,1).toLowerCase() +this.state.newlastname.substring(0,1).toLowerCase()+idNum;\n            var id = this.state.newid;\n            //console.log('NEW ID: ', id);\n            this.messages.show({severity: 'success', summary: 'Success', detail: 'Customer Added!'});\n            const db = firebase.database().ref()\n            //updating id count in firebase and then updating state variable\n            db.child('/idcount').set(this.state.idcount+1);\n            db.child('/idcount').once('value')\n                .then(snapshot => {\n                    this.setState({idcount: snapshot.val()})\n                    console.log('state var idcount: ', this.state.idcount);\n                    //idNum = snapshot.val();\n                    console.log('id from firebase: ', snapshot.val());\n                });\n\n            const fullname = this.state.newfirstname + ' ' + this.state.newlastname;\n            const email = this.state.newemail\n            const phone = this.state.newphone\n            const reshall = this.state.newreshall\n            const maxweight = this.state.newmax\n            const plan = this.state.newplanyear+this.state.newplanquarter\n            db.child('/customers/'+id).once(\"value\")\n                .then(snapshot => {\n                    if(!snapshot.val()) {\n                        db.child('/customers/'+id+'/activestatus').set(\"active\");\n                        db.child('/customers/'+id+'/bag-condition').set(\"good\");\n                        db.child('/customers/'+id+'/bag-missing').set(\"false\");\n                        db.child('/customers/'+id+'/detergent').set('unscented');\n                        db.child('/customers/'+id+'/email').set(email);\n                        db.child('/customers/'+id+'/fabric_softener').set('No');\n                        db.child('/customers/'+id+'/id').set(id);\n                        db.child('/customers/'+id+'/last_status_updated').set('N/A');\n                        db.child('/customers/'+id+'/last_weight_updated').set('N/A');\n                        db.child('/customers/'+id+'/laundrystatus').set('out-of-service');\n                        db.child('/customers/'+id+'/maxweight').set(maxweight);\n                        db.child('/customers/'+id+'/name').set(fullname);\n                        db.child('/customers/'+id+'/phone').set(phone);\n                        db.child('/customers/'+id+'/plan').set(plan);\n                        db.child('/customers/'+id+'/reshall').set(reshall);\n                        db.child('/customers/'+id+'/weekweight').set(\"N/A\");\n                        db.child('/customers/'+id+'/weightstatus').set(\"N/A\");\n\n                    }\n                })\n\n            this.setState({newfirstname: ''});\n            this.setState({newlastname: ''});\n            this.setState({ newid: '' });\n            this.setState({ newplanyear: ''});\n            this.setState({ newplanquarter: '' });\n            this.setState({ newmax: '' });\n            this.setState({ newreshall: '' });\n            this.setState({ newphone: '' });\n            this.setState({ newemail: '' });\n            //const curr  = await this.resetNewInfo();\n       \n            //console.log('reset info: ', this.state.newfirstname);\n            //document.getElementById(\"form\").reset();\n        }\n        else {\n            this.messages.show({severity: \"error\", summary: \"Missing Fields\", detail: \"Please enter all information\"});\n        }\n\n    }\n\n    displayPlanQuarters(customerPlan) {\n        if (customerPlan) {\n\n            if (customerPlan === 'F') {\n                const result = 'Fall Quarter';\n                return result;\n            }\n            else if (customerPlan === 'W') {\n                const result = 'Winter Quarter' ;\n                return result;\n            }\n            else if (customerPlan === 'S') {\n                const result = 'Spring Quarter' ;\n                return result;\n            }\n            else if (customerPlan === 'W-S') {\n                const result = 'Winter/Spring Quarter' ;\n                return result;\n            }\n            else if (customerPlan === 'F-W-S') {\n                const result = 'Full Year' ;\n                return result;\n            }\n        }\n    }\n\n\n\n    /* --------------- Filters ---------------- */\n    componentDidMount() {\n        const customerArray = [];\n        firebase.database().ref('/customers').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                customerArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ customers: customerArray });\n        const orderArray = [];\n        firebase.database().ref('/orders').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                orderArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ orders: orderArray });\n        //var idNum = 0;\n        firebase.database().ref('/idcount').once('value')\n            .then(snapshot => {\n                this.setState({idcount: snapshot.val()})\n                console.log('state var idcount: ', this.state.idcount);\n                //idNum = snapshot.val();\n                console.log('id from firebase: ', snapshot.val());\n            });\n        //console.log('var idNum: ', idNum);\n        //this.setState({idcount: idNum});\n    }\n\n    render() {\n            var header = <div style={{ textAlign: 'left' }}></div>\n            var customer = this.state.selectedCustomer\n            //var history = this.getCustomerHistory(customer)\n            var laundryStatusDisplay = {\n                'picked-up': 'picked up',\n                'delivered-to-SH': 'delivered to SH',\n                'delivered-to-dorm': 'delivered to dorm',\n                'out-of-service': 'out of service',\n                'bag-missing': 'bag missing'\n            }\n\n            return (\n            <div className=\"card\" id=\"form\">\n                <h1>Add New Customer</h1>\n\n\n                <div className=\"p-fluid p-formgrid p-grid\">\n    <div className=\"p-field p-col-12 p-md-4\">\n        <label htmlFor=\"firstname6\">First Name</label>\n        <InputText value={this.state.newfirstname} id=\"firstname\" type=\"text\" onChange={(e) => { this.onFirstNameValueChange(e.target.value); }}/>\n    </div>\n    <div className=\"p-field p-col-12 p-md-4\">\n        <label htmlFor=\"lastname6\">Last Name</label>\n        <InputText value={this.state.newlastname} id=\"lastname\" type=\"text\" onChange={(e) => { this.onLastNameValueChange(e.target.value); }}/>\n    </div>\n    <div className=\"p-field p-col-12 p-md-4\">\n        <label htmlFor=\"firstname6\">ID</label>\n        <InputText value={this.state.newid} id=\"firstname\" type=\"text\" onChange={(e) => { this.onIdValueChange(e.target.value); }} />\n    </div>\n    <div className=\"p-field p-col-12 p-md-6\">\n        <label htmlFor=\"firstname6\">Email</label>\n        <InputText value={this.state.newemail} id=\"newemail\" type=\"text\" onChange={(e) => { this.onEmailValueChange(e.target.value); }}/>\n    </div>\n    <div className=\"p-field p-col-12 p-md-6\">\n        <label htmlFor=\"firstname6\">Phone</label>\n        <InputText value={this.state.newphone} id=\"newphone\" type=\"text\" onChange={(e) => { this.onPhoneValueChange(e.target.value); }}/>\n    </div>\n    <div className=\"p-field p-col-12 p-md-3\">\n        <label htmlFor=\"address\">Laundry Plan Year</label>\n        <Dropdown  value={this.state.newplanyear} options={this.state.planSelectYear} onChange={(e) => {this.onPlanYearValueChange(e.target.value);}} placeholder='Select School Year'/>\n\n    </div>\n    <div className=\"p-field p-col-12 p-md-3\">\n        <label htmlFor=\"lastname6\">Laundry Plan Quarter(s)</label>\n        <Dropdown  value={this.state.newplanquarter} options={this.state.planSelectQuarter} onChange={(e) => {this.onPlanQuarterValueChange(e.target.value);}} placeholder='Select Quarter(s)'/>\n\n    </div>\n    <div className=\"p-field p-col-12 p-md-3\">\n        <label htmlFor=\"city\">Maximum Weight/week</label>\n        <Dropdown  value={this.state.newmax} options={this.state.planSelectWeight} onChange={(e) => {this.onMaxweightValueChange(e.target.value);}} placeholder='Select Weight'/>\n\n    </div>\n    <div className=\"p-field p-col-12 p-md-3\">\n        <label htmlFor=\"state\">Residence Hall</label>\n        <Dropdown  value={this.state.newreshall} options={this.state.planSelectReshall} onChange={(e) => {this.onReshallValueChange(e.target.value);}} placeholder='Select Residence Hall'/>\n    </div>\n    <div className = \"p-field p-col-12\">\n    <Button type=\"button\" style={{ color: 'white', backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginTop: 30 }} label=\"ADD CUSTOMER\" onClick={() => {this.addCustomer()}} />\n    </div>\n    <div className = \"p-field p-col-12\">\n    <Messages ref={(el) => this.messages = el}></Messages>\n    </div>\n\n\n</div>\n</div>\n            );\n\n\n\n\n    }\n}\n","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/BagTracker.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React, { Component } from 'react';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column'\nimport { InputText } from 'primereact/inputtext';\n\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport validator from 'validator'\n\n\nimport customerData from '../customers.json';\n// import classNames from 'classnames';\n\nimport '../Dashboard.css';\n//import { arrayToHash } from '@fullcalendar/core/util/object';\n\n\nexport class BagTracker extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            customers: [],\n            selectedStatus: null,\n            selectedReshall: null,\n            editing: false,\n            loading: true,\n            selectedCustomers: null\n        };\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.export = this.export.bind(this);\n        this.onStatusFilterChange = this.onStatusFilterChange.bind(this);\n        this.onReshallFilterChange = this.onReshallFilterChange.bind(this);\n        this.bagStatusEditor = this.bagStatusEditor.bind(this)\n        this.displaySelection = this.displaySelection.bind(this)\n        this.loadInitialState = this.loadInitialState.bind(this)\n        this.generalEditor = this.generalEditor.bind(this);\n\n\n\n    }\n    export() {\n        this.dt.exportCSV();\n    }\n\n    /* --------------- Editing ---------------- */\n    edit() {\n        this.setState({ editing: true });\n    }\n\n    save() {\n        this.setState({ editing: false });\n    }\n\n\n    updateWeightStatus(props,value, currDate) {\n\n        console.log(this.state.customers[props.rowIndex])\n        // console.log(props.rowIndex)\n\n        //if (value > props.rowData.maxweight) {\n        \n        //if (value > firebase.database().ref('/customers/'+props.rowData.id+'/maxweight')) {\n        console.log('value: ',value);\n        console.log('maxweight comparison: ',parseInt(this.state.customers[props.rowIndex].maxweight));\n        if (parseFloat(value) > parseFloat(this.state.customers[props.rowIndex].maxweight)) {\n            let over = parseFloat(value) - parseFloat(this.state.customers[props.rowIndex].maxweight)\n            console.log('marking as overweight.');\n            firebase.database().ref('/customers/' + props.rowData.id + '/'+'weightstatus').set('overweight')\n            /*let temp = firebase.database().ref('/customers/' + props.rowData.id + '/' + 'quarter-overages')\n            temp.once('value', (snapshot) => {\n                let total = snapshot.val()+over\n                firebase.database().ref('/customers/' + props.rowData.id + '/' + 'quarter-overages').set(total)\n            })*/\n            let updatedCustomers = this.state.customers;\n            updatedCustomers[props.rowIndex][props.field] = value;\n            updatedCustomers[props.rowIndex]['weightstatus'] = 'overweight';\n            //updatedCustomers[props.rowIndex]['quarter-overages'] += parseFloat(value);\n            // this.setState({ customers: updatedCustomers });\n            return value\n        }\n        else {\n            console.log('marking as underweight');\n            firebase.database().ref('/customers/' + props.rowData.id + '/'+'weightstatus').set('underweight')\n            let updatedCustomers = this.state.customers;\n            updatedCustomers[props.rowIndex][props.field] = value;\n            updatedCustomers[props.rowIndex]['weightstatus'] = 'underweight';\n            // this.setState({ customers: updatedCustomers });\n            return value\n        }\n    }\n\n    async onEditorValueChange(props, value) {\n\n        firebase.database().ref('/customers/' + props.rowData.id + '/' + props.field).set(value)\n        const db = firebase.database().ref();\n        var currWeight = value;\n        var currDay = new Date().getDate();\n        var currMonth = new Date().getMonth() +1;\n        if (currMonth < 10) {\n            currMonth = '0'+currMonth\n        }\n        if (currDay < 10) {\n            currDay = '0' + currDay\n        }\n        var currYear = new Date().getFullYear();\n        var currDate = currYear + '-' + currMonth + '-'+currDay;\n        var fullDate = new Date().toDateString();\n        var currTime = new Date().toLocaleTimeString('it-IT');\n        db.child('/orders/' + currDate + props.rowData.id).once(\"value\")\n            .then(snapshot => {\n                if (!snapshot.val()) {\n                    db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id).set(0)\n                    db.child('/orders/' + currDate +' '+currTime+' - '+props.rowData.id + '/weight').set(currWeight);\n                    db.child('/orders/' + currDate+' '+currTime+' - ' + props.rowData.id + '/maxweight').set(props.rowData.maxweight);\n                    db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/id').set(props.rowData.id);\n                    db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/laundrystatus').set(props.rowData.laundrystatus);\n                    db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/weightstatus').set(props.rowData.weightstatus);\n                }\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/date').set(currDate+' '+ currTime);\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/weight').set(currWeight);\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/maxweight').set(props.rowData.maxweight);\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/id').set(props.rowData.id);\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/laundrystatus').set(props.rowData.laundrystatus);\n                db.child('/orders/' + currDate +' '+currTime+' - '+ props.rowData.id + '/weightstatus').set(props.rowData.weightstatus);\n\n            })\n        firebase.database().ref('/customers/' + props.rowData.id + '/last_weight_updated').set(currDate + ' ' + currTime)\n        const curr = await this.updateWeightStatus(props,value, currDate);\n    }\n\n    inputTextEditor(props, field) {\n        return <InputText type=\"text\" value={props.rowData[field]} style={{ maxWidth: 100 }} onChange={(e) => { this.onEditorValueChange(props, e.target.value);}}/>\n    }\n\n    generalEditor(props) {\n        return this.inputTextEditor(props, ' ');\n    }\n\n    // onRowEditInit(event) {\n    //     this.clonedCars[event.data.vin] = { ...event.data };\n    // }\n\n    // onRowEditSave(event) {\n    //     if (this.onRowEditorValidator(event.data)) {\n    //         delete this.clonedCars[event.data.vin];\n    //         this.growl.show({ severity: 'success', summary: 'Success', detail: 'Car is updated' });\n    //     }\n    //     else {\n    //         this.growl.show({ severity: 'error', summary: 'Error', detail: 'Brand is required' });\n    //     }\n    // }\n\n    // onRowEditCancel(event) {\n    //     let cars = [...this.state.cars2];\n    //     cars[event.index] = this.clonedCars[event.data.vin];\n    //     delete this.clonedCars[event.data.vin];\n    //     this.setState({\n    //         cars2: cars\n    //     })\n    // }\n\n    bagStatusEditor(allcustomers, currentcustomers, newstatus) {\n        let updatedCustomers = [...allcustomers];\n        const db = firebase.database().ref()\n        var currDay = new Date().getDate();\n        var currMonth = new Date().getMonth() +1;\n        if (currMonth < 10) {\n            currMonth = '0'+currMonth\n        }\n        if (currDay < 10) {\n            currDay = '0' + currDay\n        }\n        var currYear = new Date().getFullYear();\n        var currDate = currYear + '-' + currMonth + '-'+currDay;\n        //var currDate = new Date().toDateString();\n        var currTime = new Date().toLocaleTimeString('it-IT');\n\n        if (currentcustomers) {\n            var ids = Object.keys(currentcustomers).map(function (key) {\n                return currentcustomers[key].id;\n            });\n            updatedCustomers.map(each => {\n                if (ids.includes(each.id)) {\n                    each.laundrystatus = newstatus;\n                    if (newstatus == 'out-of-service') {\n                        each.weightstatus = 'N/A'\n                        each.weekweight = 'N/A'\n                        db.child('/customers/'+each.id+'/weekweight').set('N/A');\n                        db.child('/customers/'+each.id+'/weightstatus').set('N/A');\n                    }\n                    firebase.database().ref('/customers/' + each.id + '/last_status_updated').set(currDate + ' ' + currTime)\n\n                    db.child('/orders/' + currDate + each.id).once(\"value\")\n                        .then(snapshot => {\n                            if (!snapshot.val()) {\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id).set(0)\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/weight').set(each.weekweight);\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/maxweight').set(each.maxweight);\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/id').set(each.id);\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/laundrystatus').set(each.laundrystatus);\n                                db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/weightstatus').set(each.weightstatus);\n                            }\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/date').set(currDate+' '+ currTime);\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/weight').set(each.weekweight);\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/maxweight').set(each.maxweight);\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/id').set(each.id);\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/laundrystatus').set(each.laundrystatus);\n                            db.child('/orders/' + currDate +' '+currTime+' - '+ each.id + '/weightstatus').set(each.weightstatus);\n\n                        })\n\n                }\n            })\n            this.setState({ customers: updatedCustomers });\n        }\n        console.log('bagStatusEditor currentcustomers: ',currentcustomers);\n        this.dothisfirst(currentcustomers, newstatus)\n\n    }\n\n\n    dothisfirst(currentcustomers, newstatus) {\n        console.log('currentcustomers: ',currentcustomers);\n        console.log('newstatus: ',newstatus);\n        if (currentcustomers) {\n            var ids = Object.keys(currentcustomers).map(function (key) {\n                return currentcustomers[key].id;\n            });\n            console.log('ids: ',ids);\n            var query = firebase.database().ref(\"customers\").orderByKey();\n            query.once(\"value\")\n                .then(function (snapshot) {\n                    var counter=0;\n                    snapshot.forEach(function (childSnapshot) {\n                        var key = childSnapshot.key;\n                        if (ids.includes(key)) {\n                            var key = childSnapshot.key;\n                            firebase.database().ref('/customers/' + key + '/' + \"laundrystatus\").set(newstatus);\n                            console.log('currentcustomers in forEach: ',currentcustomers);\n                            if (newstatus === 'delivered-to-SH' && parseFloat(currentcustomers[counter].weekweight) > parseFloat(currentcustomers[counter].maxweight)) {\n                                firebase.database().ref('/customers/' + key + '/' + \"quarter_overages\").transaction(function(currOverages) {\n                                    //return currOverages+1;\n                                    return currOverages + parseFloat(currentcustomers[counter].weekweight) - parseFloat(currentcustomers[counter].maxweight);\n                                });\n                            }\n                            counter = counter+1;\n\n                        }\n                    });\n                });\n        }\n        return currentcustomers\n    }\n\n\n    displaySelection(data) {\n        if (this.state.editing && (!data || data.length === 0)) {\n            return <div style={{ textAlign: 'left' }}>No Selection</div>;\n        }\n    }\n\n\n    /* --------------- Filters ---------------- */\n\n//dropdown for laundrystats\n    statusBodyTemplate(rowData) {\n        var laundryStatusDisplay = {\n            'picked-up': 'picked up',\n            'delivered-to-SH': 'delivered to SH',\n            'delivered-to-dorm': 'delivered to dorm',\n            'out-of-service': 'out of service',\n            'bag-missing': 'bag missing',\n            'start-of-quarter': 'start of quarter'\n        }\n        return <span className={rowData.laundrystatus}>{laundryStatusDisplay[rowData.laundrystatus]}</span>\n    }\n\n\n    renderStatusFilter() {\n        var statuses = [\n            { label: 'Picked Up', value: 'picked-up' },\n            { label: 'Out of Service', value: 'out-of-service' },\n            { label: 'Delivered to SH', value: 'delivered-to-SH' },\n            { label: 'Delivered to Dorm', value: 'delivered-to-dorm' },\n            { label: 'Bag Missing', value: 'bag-missing' },\n            { label: 'Start of Quarter', value: 'start-of-quarter' }\n        ];\n\n        return (\n\n            <Dropdown value={this.state.selectedStatus} options={statuses} onChange={this.onStatusFilterChange}\n             showClear={true} placeholder=\"Select a Status\" className=\"p-column-filter\" style={{maxWidth: 200, minWidth: 50}} />\n        );\n    }\n\n    weightBodyTemplate(rowData) {\n        return <span className={rowData.weightstatus}>{rowData.weightstatus}</span>;\n    }\n\n\n    onStatusFilterChange(event) {\n        this.dt.filter(event.value, 'laundrystatus', 'equals');\n        this.setState({ selectedStatus: event.value });\n    }\n\n\n//dropdown for reshall\n\n    reshallBodyTemplate(rowData) {\n        var reshallDisplay = {\n          '560 Lincoln': '560 Lincoln',\n          '720 Emerson': '720 Emerson',\n            '1715 Chicago Ave': '1715 Chicago Ave',\n          '1838 Chicago': '1838 Chicago',\n          '1856 Orrington': '1856 Orrington',\n          '2303 Sheridan': '2303 Sheridan',\n          'Ayers': 'Ayers',\n          'Allison': 'Allison',\n          'Bobb': 'Bobb',\n          'Chapin': 'Chapin',\n          'East Fairchild': 'East Fairchild',\n          'Elder': 'Elder',\n          'West Fairchild': 'West Fairchild',\n          'Foster-Walker': 'Foster-Walker',\n          'Goodrich': 'Goodrich',\n          'Hobart': 'Hobart',\n          'Jones': 'Jones',\n          'Kemper': 'Kemper',\n          'McCulloch': 'McCulloch',\n          'PARC': 'PARC (North Mid Quads)',\n          'Rogers House': 'Rogers House',\n          'Sargent': 'Sargent',\n          'SMQ': 'Shepard Residential College (South Mid Quads)',\n          'Shepard': 'Shepard',\n          'Slivka': 'Slivka',\n          'Willard':  'Willard',\n          'Delta Gamma': 'Delta Gamma',\n          'Kappa Kappa Gamma': 'Kappa Kappa Gamma',\n          'Foster-Walker': 'Foster-Walker',\n            'Zeta Beta Tau (ZBT)': 'Zeta Beta Tau (ZBT)'\n          }\n          return <span className={rowData.reshall}>{reshallDisplay[rowData.reshall]}</span>\n    }\n\n    renderReshallFilter() {\n        var reshalls = [\n            { label: '560 Lincoln', value: '560 Lincoln' },\n            { label: '720 Emerson', value: '720 Emerson'},\n            { label: '1715 Chicago', value: '1715 Chicago'},\n            { label: '1838 Chicago', value: '1838 Chicago'},\n            { label: '1856 Orrington', value: '1856 Orrington'},\n            { label: '2303 Sheridan', value: '2303 Sheridan'},\n            { label: 'Ayers', value: 'Ayers'},\n            { label: 'Allison', value: 'Allison'},\n            { label: 'Bobb', value: 'Bobb' },\n            { label: 'Chapin', value: 'Chapin'},\n            { label: 'East Fairchild', value: 'East Fairchild'},\n            { label: 'Elder', value: 'Elder'},\n            { label: 'West Fairchild', value: 'West Fairchild'},\n            { label: 'Foster-Walker', value: 'Foster-Walker'},\n            { label: 'Goodrich', value: 'Goodrich'},\n            { label: 'Hobart', value: 'Hobart'},\n            { label: 'Jones', value: 'Jones' },\n            { label: 'Kemper', value: 'Kemper'},\n            { label: 'McCulloch', value: 'McCulloch'},\n            { label: 'PARC (North Mid Quads)', value: 'PARC'},\n            { label: 'Rogers House', value: 'Rogers House' },\n            { label: 'Sargent', value: 'Sargent'},\n            { label: 'Shepard Residential College (South Mid Quads)', value: 'SMQ'},\n            { label: 'Shepard', value: 'Shepard'},\n            { label: 'Slivka', value: 'Slivka'},\n            { label: 'Willard', value: 'Willard'},\n            { label: 'Delta Gamma', value: 'Delta Gamma'},\n            { label: 'Kappa Kappa Gamma', value: 'Kappa Kappa Gamma'},\n            { label: 'Foster-Walker', value: 'Foster-Walker'},\n            { label: 'Zeta Beta Tau (ZBT)', value: 'Zeta Beta Tau (ZBT)'}\n    ];\n\n        return (\n\n            <Dropdown value={this.state.selectedReshall} options={reshalls} onChange={this.onReshallFilterChange}\n             showClear={true} placeholder=\"Select a Dorm\" className=\"p-column-filter\" style={{maxWidth: 200, minWidth: 50}} />\n        );\n    }\n\n\n    onReshallFilterChange(event) {\n        this.dt.filter(event.value, 'reshall', 'equals');\n        this.setState({ selectedReshall: event.value });\n    }\n\n\n\n\n\n\n    loadInitialState = async () => {\n        const customerArray = [];\n        firebase.database().ref('/customers').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                if (childSnapshot.val().activestatus === 'active' ) {\n                    customerArray.push(childSnapshot.toJSON());\n                }\n\n            });\n        });\n        this.setState({ customers: customerArray });\n        this.setState({ loading: false });\n\n    }\n\n    componentWillMount() {\n        this.loadInitialState()\n    }\n\n    render() {\n        const statusFilter = this.renderStatusFilter();\n        const reshallFilter = this.renderReshallFilter();\n        const allcustomers = this.state.customers;\n        const currentcustomers = this.state.selectedCustomers;\n\n        /* --------------- RETURN ---------------- */\n        /* ---------------- edit mode ------------*/\n        if (this.state.editing) {\n            var header = <div style={{ textAlign: 'left' }}>\n                <div style={{ marginBottom: 10 }}>\n                    <Button type=\"button\" style={{ backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginRight: 10 }} icon=\"pi pi-external-link\" iconPos=\"left\" label=\"CSV\" onClick={this.export}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: 'white', backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginRight: 10 }} icon=\"pi pi-save\" iconPos=\"left\" label=\"SAVE\" onClick={this.save}>\n                    </Button>\n                </div>\n                <div>\n                    <Button type=\"button\" style={{ color: '#23547B', backgroundColor: '#B3E5FC', borderColor: '#23547B', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"PICKED UP\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'picked-up')}}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: '#694382', backgroundColor: '#ECCFFF', borderColor: '#694382', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"SH\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'delivered-to-SH') }}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: '#256029', backgroundColor: '#C8E6C9', borderColor: '#256029', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"DORM\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'delivered-to-dorm') }}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: '#474549', backgroundColor: 'lightgrey', borderColor: '#474549', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"NO SERVICE\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'out-of-service') }}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: '#C63737', backgroundColor: '#FFCDD2', borderColor: '#C63737', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"MISSING\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'bag-missing') }}>\n                    </Button>\n                    <Button type=\"button\" style={{ color: '#474549', backgroundColor: 'lightgrey', borderColor: '#474549', marginRight: 10 }} icon=\"pi pi-check\" iconPos=\"left\" label=\"START\" onClick={() => { this.bagStatusEditor(allcustomers, currentcustomers, 'start-of-quarter') }}>\n                    </Button>\n\n                </div>\n                <div>\n\n                </div>\n            </div>;\n            //loading = {true} loadingIcon = \"pi pi-spinner\"\n            return (\n                <div id=\"elmid\">\n                    <div className=\"card\">\n                        <h1>Rez Ops Bag Tracker</h1>\n                        <p>The BagTracker is used to update bag statuses, including location, warnings, or overages of bags each the week.</p>\n                        <p>ONLY individuals running operations should be accessing this page.</p>\n                        <DataTable value={this.state.customers} header={header} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} responsive={true} autoLayout={true}\n                        editMode=\"row\" rowEditorValidator={this.onRowEditorValidator} onRowEditInit={this.onRowEditInit} onRowEditSave={this.onRowEditSave} onRowEditCancel={this.onRowEditCancel}\n                        footer={this.displaySelection(this.state.selectedCustomers)} selection={this.state.selectedCustomers} onSelectionChange={e => this.setState({ selectedCustomers: e.value })}>\n                            <Column selectionMode=\"multiple\" style={{ width: '3em' }} />\n                            <Column field=\"id\" header=\"ID\" sortable={true} />\n                            <Column field=\"name\" header=\"Name\" style={{ maxWidth: 150 }} sortable filter filterPlaceholder=\"Search by name\" />\n                            <Column field=\"reshall\" header=\"Residential Hall\" style={{ maxWidth: 200 }} sortable={true} filter filterElement={reshallFilter} body={this.reshallBodyTemplate}/>\n                            <Column field=\"laundrystatus\" header=\"Bag Status\" style={{ maxWidth: 150 }} sortable={true} filter filterElement={statusFilter} body={this.statusBodyTemplate}/>\n                            <Column field=\"weightstatus\" header=\"Weight Status\" style={{ maxWidth: 150 }} sortable={true} body={this.weightBodyTemplate}/>\n\n                            <Column field=\"weekweight\" header=\"Bag Weight\" sortable={true} style={{ backgroundColor: '#6a09a4', color: 'white', maxWidth: 100 }} editor={this.generalEditor}/>\n                        </DataTable>\n                    </div>\n                </div>\n            );\n            /* ---------------- NOT edit mode ------------*/\n        } else {\n            var header = <div style={{ textAlign: 'left' }}>\n                <Button type=\"button\" style={{ backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginRight: 10 }} icon=\"pi pi-external-link\" iconPos=\"left\" label=\"CSV\" onClick={this.export}>\n                </Button>\n                <Button type=\"button\" style={{ backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginRight: 10 }} icon=\"pi pi-pencil\" iconPos=\"left\" label=\"EDIT\" onClick={this.edit}>\n                </Button>\n            </div>;\n            return (\n\n                <div id=\"elmid\">\n                    <div className=\"card\">\n                        <h1>Rez Ops Bag Tracker</h1>\n                        <p>The BagTracker is used to update bag statuses, including location, warnings, or overages of bags each the week.</p>\n                        <p>ONLY individuals running operations should be accessing this page.</p>\n                        <DataTable value={this.state.customers} header={header} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} responsive={true} autoLayout={true} editMode=\"row\" rowEditorValidator={this.onRowEditorValidator} onRowEditInit={this.onRowEditInit} onRowEditSave={this.onRowEditSave} onRowEditCancel={this.onRowEditCancel}>\n                            <Column field=\"id\" header=\"ID\" sortable={true} />\n                            <Column field=\"name\" header=\"Name\" style={{ maxWidth: 150 }} sortable filter filterPlaceholder=\"Search by name\" />\n                            <Column field=\"reshall\" header=\"Residential Hall\" style={{ maxWidth: 200 }} sortable={true} filter filterElement={reshallFilter} body={this.reshallBodyTemplate}/>\n                            <Column field=\"laundrystatus\" header=\"Bag Status\" style={{ maxWidth: 150 }} sortable={true} filter filterElement={statusFilter} body={this.statusBodyTemplate} />\n                            <Column field=\"weightstatus\" header=\"Weight Status\" style={{ maxWidth: 150 }} sortable={true} body={this.weightBodyTemplate}/>\n                            <Column field=\"weekweight\" header=\"Bag Weight\" style={{ maxWidth: 100 }} sortable={true} />\n\n                        </DataTable>\n                    </div>\n                </div>\n            );\n\n        }\n\n    }\n}\n","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/PanelsDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/OverlaysDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/ChartsDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MenusDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/SampleDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MessagesDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/CustomerSearch.js",["170","171","172","173","174","175","176","177","178"],"import React, { Component } from 'react';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column'\nimport { Chart } from 'primereact/chart'\nimport { InputText } from 'primereact/inputtext';\nimport { Editor } from 'primereact/editor';\nimport {ToggleButton} from 'primereact/togglebutton';\nimport {RadioButton} from 'primereact/radiobutton';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport validator from 'validator'\n\n\nimport customerData from '../customers.json';\n// import classNames from 'classnames';\n\nimport '../Dashboard.css';\n//import { arrayToHash } from '@fullcalendar/core/util/object';\n\n\nexport class CustomerSearch extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            customers: [],\n            orders: [],\n            selectedCustomer: null,\n            editing: false,\n            newplanYear: null,\n            newplanQuarter: null,\n            newmax: null,\n            newreshall: null,\n            newphone: null,\n            newemail: null,\n            newactive: null,\n            planSelectYear: [\n                {label: '2020-2021', value: '2020-2021'},\n                {label: '2021-2022', value: '2021-2022'},\n                {label: '2022-2023', value: '2022-2023'},\n                {label: '2023-2024', value: '2023-2024'}\n            ],\n            planSelectQuarter: [\n                {label: 'Full Year', value: '-F-W-S'},\n                {label: 'Winter/Spring Quarter', value: '-W-S'},\n                {label: 'Fall Quarter', value: '-F'},\n                {label: 'Winter Quarter', value: '-W'},\n                {label: 'Spring Quarter', value: '-S'},\n            ],\n            planSelectWeight: [\n                {label: '15 lb/week', value: '15'},\n                {label: '20 lb/week', value: '20'},\n                {label: '25 lb/week', value: '25'},\n            ],\n            planSelectReshall:[\n                {label: 'Choose later', value: 'Choose later'},\n                {label: '560 Lincoln', value: '560 Lincoln'},\n                {label: '720 Emerson', value: '720 Emerson'},\n                {label: '1715 Chicago', value: '1715 Chicago'},\n                {label: '1838 Chicago', value: '1838 Chicago'},\n                {label: '1856 Orrington', value: '1856 Orrington'},\n                {label: '2303 Sheridan', value: '2303 Sheridan'},\n                {label: 'Ayers', value: 'Ayers'},\n                {label: 'Allison', value: 'Allison'},\n                {label: 'Bobb', value: 'Bobb'},\n                {label: 'Chapin', value: 'Chapin'},\n                {label: 'East Fairchild', value: 'East Fairchild'},\n                {label: 'Elder', value: 'Elder'},\n                {label: 'West Fairchild', value: 'West Fairchild'},\n                {label: 'Foster-Walker (PLEX)', value: 'Foster-Walker (PLEX)'},\n                {label: 'Goodrich', value: 'Goodrich'},\n                {label: 'Hobart', value: 'Hobart'},\n                {label: 'Jones', value: 'Jones'},\n                {label: 'Kemper', value: 'Kemper'},\n                {label: 'McCulloch', value: 'McCulloch'},\n                {label: 'PARC (North Mid Quads)', value: 'PARC (North Mid Quads)'},\n                {label: 'Rogers House', value: 'Rogers House'},\n                {label: 'Sargent', value: 'Sargent'},\n                {label: 'Shepard Residential College (South Mid Quads)', value: 'Shepard Residential College (South Mid Quads)'},\n                {label: 'Shepard Hall', value: 'Shepard Hall'},\n                {label: 'Slivka', value: 'Slivka'},\n                {label: 'Willard', value: 'Willard'},\n                {label: 'Delta Gamma', value: 'Delta Gamma'},\n                {label: 'Kappa Kappa Gamma', value: 'Kappa Kappa Gamma'},\n                { label: 'Zeta Beta Tau (ZBT)', value: 'Zeta Beta Tau (ZBT)'}\n            ]\n\n        };\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.onPlanYearValueChange = this.onPlanYearValueChange.bind(this)\n        this.onPlanQuarterValueChange = this.onPlanQuarterValueChange.bind(this)\n        this.getCustomerHistory = this.getCustomerHistory.bind(this)\n        this.displayPlanQuarters = this.displayPlanQuarters.bind(this)\n        this.resetNewInfo = this.resetNewInfo.bind(this)\n    }\n\n    edit() {\n        this.setState({ editing: true });\n        this.resetNewInfo();\n    }\n\n    save(customer) {\n        this.setState({ editing: false });\n        //console.log(this.state.newplan)\n        let allcustomers = [...this.state.customers];\n        let newcustomer = {...this.state.selectedCustomer};\n        if (this.state.newplanYear && this.state.newplanQuarter) {\n             newcustomer.plan = this.state.newplanYear+this.state.newplanQuarter;\n             //console.log('newplanQuarter: ', this.state.newplanQuarter);\n             //console.log('newplanYear', this.state.newplanYear)\n             firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n        }\n        else if (this.state.newplanYear) {\n            newcustomer.plan = this.state.newplanYear+customer.plan.substring(9);\n            //console.log('newcustomer.plan: ', newcustomer.plan);\n            //console.log('newplanYear', this.state.newplanYear)\n            //console.log('customer quarter: ', customer.plan.substring(9));\n            firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n       }\n       else if (this.state.newplanQuarter) {\n            newcustomer.plan = customer.plan.substring(0,9)+this.state.newplanQuarter;\n            //console.log('newcustomer.plan: ', newcustomer.plan);\n            //console.log('customer year', customer.plan.substring(0,9))\n            //console.log('newplanQuarter: ', this.state.newplanQuarter);\n            firebase.database().ref('/customers/' + customer.id + '/plan').set(newcustomer.plan);\n   }\n        if (this.state.newmax) {\n            newcustomer.maxweight = this.state.newmax;\n            firebase.database().ref('/customers/' + customer.id + '/maxweight').set(newcustomer.maxweight);\n       }\n        if (this.state.newreshall) {\n            newcustomer.reshall = this.state.newreshall;\n            firebase.database().ref('/customers/' + customer.id + '/reshall').set(newcustomer.reshall);\n        }\n        if (this.state.newphone) {\n            newcustomer.phone = this.state.newphone;\n            firebase.database().ref('/customers/' + customer.id + '/phone').set(newcustomer.phone);\n        }\n        if (this.state.newemail) {\n            newcustomer.email = this.state.newemail;\n            firebase.database().ref('/customers/' + customer.id + '/email').set(newcustomer.email)\n        }\n        if (this.state.newactive) {\n            newcustomer.activestatus = this.state.newactive;\n            firebase.database().ref('/customers/' + customer.id + '/activestatus').set(newcustomer.activestatus)\n        }\n        let count = 0;\n        let individual=null;\n        allcustomers.map(each => {\n            if (newcustomer.id === each.id) {\n                individual = {...allcustomers[count]};\n                individual= newcustomer;\n                allcustomers[count] = individual;\n            }\n            count = count+1\n        })\n        this.setState({ customers: allcustomers });\n        this.setState({selectedCustomer: newcustomer});\n\n    }\n\n    //CUSTOMER INFORMATION EDITING\n    onPlanYearValueChange(value) {\n        //console.log('newPlanYear: ', value)\n        this.setState({ newplanYear: value });\n    }\n    onPlanQuarterValueChange(value) {\n        //console.log('newPlanQuarter: ', value)\n        this.setState({ newplanQuarter: value });\n    }\n    onMaxweightValueChange(value) {\n        this.setState({ newmax: value });\n    }\n    onReshallValueChange(value) {\n        this.setState({ newreshall: value });\n    }\n    onPhoneValueChange(value) {\n        if(value[3] ==='-' && value[7] ==='-' && value.length===12) {\n            this.setState({ newphone: value });\n        }\n    }\n    onEmailValueChange(value) {\n        if (value.includes('@') && value.includes('.')) {\n            this.setState({ newemail: value });\n        }\n    }\n    onActiveValueChange(value) {\n        this.setState({ newactive:value})\n\n\n    }\n\n    getCustomerHistory(customer) {\n        var history = []\n        firebase.database().ref('/orders').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                var cid = childSnapshot.key;\n                var res = cid.split('-');\n                //console.log(res[1])\n                if (res[1] === customer.id) {\n                    history.push(childSnapshot.toJSON())\n                }\n            });\n        });\n        //console.log(history)\n        return history;\n    }\n\n    displayPlanQuarters(customerPlan) {\n        if (customerPlan) {\n\n            if (customerPlan === 'F') {\n                const result = 'Fall Quarter';\n                return result;\n            }\n            else if (customerPlan === 'W') {\n                const result = 'Winter Quarter' ;\n                return result;\n            }\n            else if (customerPlan === 'S') {\n                const result = 'Spring Quarter' ;\n                return result;\n            }\n            else if (customerPlan === 'F-W-S') {\n                const result = 'Full Year' ;\n                return result;\n            }\n        }\n    }\n\n    resetNewInfo() {\n        this.setState({ newplanYear: null });\n        this.setState({ newplanQuarter: null });\n        this.setState({ newmax: null });\n        this.setState({ newreshall: null });\n        this.setState({ newphone: null });\n        this.setState({ newemail: null });\n        this.setState({ newactive: null })\n    }\n\n    /* --------------- Filters ---------------- */\n    componentDidMount() {\n        const customerArray = [];\n        firebase.database().ref('/customers').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                customerArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ customers: customerArray });\n        const orderArray = [];\n        firebase.database().ref('/orders').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                orderArray.push(childSnapshot.toJSON());\n            });\n        });\n        this.setState({ orders: orderArray });\n    }\n\n    render() {\n        if (this.state.selectedCustomer) {\n            var header = <div style={{ textAlign: 'left' }}></div>\n            var customer = this.state.selectedCustomer\n            var history = this.getCustomerHistory(customer)\n            var laundryStatusDisplay = {\n                'picked-up': 'picked up',\n                'delivered-to-SH': 'delivered to SH',\n                'delivered-to-dorm': 'delivered to dorm',\n                'out-of-service': 'out of service',\n                'bag-missing': 'bag missing'\n            }\n\n\n            if (this.state.editing) {\n                \n                //this.setState({ newplanYear: null });\n                //this.setState({ newplanQuarter: null });\n                return (\n                <div style={{ display: 'flex' }}>\n                    <div className=\"card card-search\">\n                        <DataTable value={this.state.customers} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} selectionMode=\"single\"\n                            responsive={true} autoLayout={true} selection={this.state.selectedCustomer} onSelectionChange={e => this.setState({ selectedCustomer: e.value })}>\n                            <Column field=\"id\" header=\"ID\" sortable={true} />\n                            <Column field=\"name\" header=\"Name\" sortable filter filterPlaceholder=\"Search by name\" />\n                        </DataTable>\n                    </div>\n                    <div className=\"card card-list\"> <p className={customer.activestatus} style={{ marginRight: 15 }}>{customer.activestatus}</p>\n                        <h1>{customer.name}</h1>\n                        <div style={{ display: 'flex' }}>\n                            <p className={customer.laundrystatus} style={{ marginRight: 15 }}>{laundryStatusDisplay[customer.laundrystatus]}</p>\n                            <p className={customer.weightstatus} style={{ marginRight: 15 }}>{customer.weightstatus}</p>\n                        </div>\n                        <div style={{ display: 'flex' }}>\n                            <div style={{ minWidth: '50%' }}>\n                                <h3 style={{ marginBlockStart: 0, marginBlockEnd: '0.25em' }}>Account Information</h3>\n                                <p style={{ marginBlockStart: 0, marginBlockEnd: '1em', paddingRight: 15 }}>Customer ID: {customer.id}</p>\n                                <div className=\"p-field p-grid\">\n                                    <label htmlFor=\"firstname3\" className=\"p-col-fixed\" style={{ width: '110px' }}>Laundry Plan:</label>\n                                    <div className=\"p-col\">\n                                        <Dropdown  value={this.state.newplanYear} options={this.state.planSelectYear} onChange={(e) => {this.onPlanYearValueChange(e.target.value);}} placeholder={customer.plan.substring(0,9)}/>\n                                        <Dropdown  value={this.state.newplanQuarter} options={this.state.planSelectQuarter} onChange={(e) => {this.onPlanQuarterValueChange(e.target.value);}} placeholder={this.displayPlanQuarters(customer.plan.substring(10))}/>\n\n                                    </div>\n                                </div>\n                                <div className=\"p-field p-grid\">\n                                    <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '110px' }}>Max Weight:</label>\n                                    <div className=\"p-col\">\n                                    <Dropdown  value={this.state.newmax} options={this.state.planSelectWeight} onChange={(e) => {this.onMaxweightValueChange(e.target.value);}} placeholder={customer.maxweight}/>\n                                    </div>\n\n                                </div>\n                                <div className=\"p-field p-grid\">\n\n                                <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '200px' }}>Active Status:</label>\n\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '110px' }}>Active:</label>\n                                    <RadioButton value=\"active\" name=\"Active\" onChange={(e) => this.setState({newactive: e.value})} checked={customer.activestatus === 'active'} />\n\n\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '110px' }}>Inactive:</label>\n                                    <RadioButton value=\"inactive\" name=\"Inactive\" onChange={(e) => this.setState({newactive: e.value})} checked={customer.activestatus === 'inactive'} />\n                                </div>\n                                </div>\n                            </div>\n                            <div style={{ minWidth: '50%' }}>\n                                <h3 style={{ marginBlockStart: 0, marginBlockEnd: '0.25em' }}>Contact Information</h3>\n                                <div className=\"p-field p-grid\">\n                                    <label htmlFor=\"firstname3\" className=\"p-col-fixed\" style={{ width: '120px' }}>Residential Hall:</label>\n                                    <div className=\"p-col\">\n                                        <Dropdown  value={this.state.newreshall} options={this.state.planSelectReshall} onChange={(e) => {this.onReshallValueChange(e.target.value);}} placeholder={customer.reshall}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-field p-grid\">\n                                    <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '120px' }}>Email:</label>\n                                    <div className=\"p-col\">\n                                        <InputText type=\"text\" placeholder={customer.email} onChange={(e) => { this.onEmailValueChange(e.target.value); }}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-field p-grid\">\n                                    <label htmlFor=\"lastname3\" className=\"p-col-fixed\" style={{ width: '120px' }}>Phone:</label>\n                                    <div className=\"p-col\">\n                                        <InputText type=\"text\" placeholder={customer.phone} onChange={(e) => { this.onPhoneValueChange(e.target.value); }}/>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <Button type=\"button\" style={{ color: 'white', backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginTop: 30 }} icon=\"pi pi-save\" iconPos=\"left\" label=\"SAVE\" onClick={() => {this.save(customer)}}>\n                        </Button>\n                    </div>\n                </div>\n                );\n            } else {\n                return (\n                    <div style={{display: 'flex'}}>\n                        <div className=\"card card-search\">\n                            <DataTable value={this.state.customers} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} selectionMode=\"single\"\n                                responsive={true} autoLayout={true} selection={this.state.selectedCustomer} onSelectionChange={e => this.setState({ selectedCustomer: e.value })}>\n                                <Column field=\"id\" header=\"ID\" sortable={true} filter filterPlaceholder=\"Search id\"/>\n                                <Column field=\"name\" header=\"Name\" sortable filter filterPlaceholder=\"Search name\" />\n                            </DataTable>\n                        </div>\n                        <div className=\"card card-list\">  <p className={customer.activestatus} style={{ marginRight: 15 }}>{customer.activestatus}</p>\n                            <h1>{customer.name}</h1>\n                            <div style={{ display: 'flex' }}>\n                                <p className={customer.laundrystatus} style={{ marginRight: 15 }}>{laundryStatusDisplay[customer.laundrystatus]}</p>\n                                <p className={customer.weightstatus} style={{ marginRight: 15 }}>{customer.weightstatus}</p>\n\n                            </div>\n                            <div style={{ display: 'flex' }}>\n                                <div style={{ minWidth: '50%'  }}>\n                                    <h3 style={{ marginBlockStart: 0, marginBlockEnd: '0.25em' }}>Account Information</h3>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Customer ID: {customer.id}</p>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Laundry Plan: {customer.plan}</p>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Max Weight: {customer.maxweight}</p>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Overages: {customer.quarter_overages}</p>\n                                \n                                </div>\n                                <div style={{ minWidth: '50%' }}>\n                                    <h3 style={{ marginBlockStart: 0, marginBlockEnd: '0.25em' }}>Contact Information</h3>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Residential Hall: {customer.reshall}</p>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Email: {customer.email}</p>\n                                    <p style={{ marginBlockStart: 0, marginBlockEnd: '0.25em', paddingRight: 15 }}>Phone: {customer.phone}</p>\n                                </div>\n                            </div>\n                            <Button type=\"button\" style={{ color: 'white', backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginTop: 30 }} icon=\"pi pi-pencil\" iconPos=\"left\" label=\"EDIT\" onClick={this.edit}>\n                            </Button>\n                            {/* <h3 style={{ marginBlockStart: '1em', marginBlockEnd: 0 }}>Bag Weight History</h3> */}\n                            {/* <Chart type=\"line\" data={data} /> */}\n                            {/* <Editor style={{ height: '320px' }} value={this.state.text} onTextChange={(e) => this.setState({ text: e.htmlValue })} /> */}\n                        </div>\n                    </div>\n                );\n            }\n        } else {\n            var header = <div style={{ textAlign: 'left' }}>\n            </div>;\n\n            return (\n                <div style={{ display: 'flex' }}>\n                    <div className=\"card card-search\">\n                        <DataTable value={this.state.customers} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} selectionMode=\"single\"\n                        responsive={true} autoLayout={true} selection={this.state.selectedCustomer} onSelectionChange={e => this.setState({ selectedCustomer: e.value })}>\n                            <Column field=\"id\" header=\"ID\" sortable={true} filter filterPlaceholder=\"Search id\"/>\n                            <Column field=\"name\" header=\"Name\" sortable filter filterPlaceholder=\"Search name\" />\n                        </DataTable>\n                    </div>\n                    <div className=\"card card-list\">\n                        <h1>Select a Customer</h1>\n                    </div>\n                </div>\n            );\n        }\n\n\n    }\n}\n","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/FormsDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/DataDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/MiscDemo.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/EmptyPage.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/Documentation.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/components/CustomerSheet.js",["179","180"],"import React, { Component } from 'react';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column'\nimport { InputText } from 'primereact/inputtext';\nimport { Growl } from 'primereact/growl';\n\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport validator from 'validator'\n\n\nimport customerData from '../customers.json';\n// import classNames from 'classnames';\n\nimport '../Dashboard.css';\n//import { arrayToHash } from '@fullcalendar/core/util/object';\n\n\nexport class CustomerSheet extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            customers: [],\n            selectedStatus: null,\n            editing: false\n        };\n        // this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.export = this.export.bind(this);\n        this.onStatusFilterChange = this.onStatusFilterChange.bind(this);\n\n        this.generalEditor = this.generalEditor.bind(this);\n    }\n    export() {\n        this.dt.exportCSV();\n    }\n\n/* --------------- Editing ---------------- */\n    // edit() {\n    //     this.setState({editing: true});\n    //     this.growl.show({ severity: 'info', summary: 'Editing Enabled', detail: 'Save changes before continuing' });\n    // }\n\n    save() {\n        this.setState({ editing: false });\n        this.growl.clear();\n    }\n\n    onEditorValueChange(props, value) {\n        firebase.database().ref('/customers/' + props.rowData.id + '/' + props.field).set(value)\n        let updatedCustomers = [...props.value];\n        updatedCustomers[props.rowIndex][props.field] = value;\n        this.setState({ customers: updatedCustomers });\n        console.log(props)\n    }\n\n    inputTextEditor(props, field) {\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(props, e.target.value)} />;\n    }\n\n    generalEditor(props) {\n        return this.inputTextEditor(props, ' ');\n    }\n\n    phoneValidator(props) {\n        let value = props.rowData[props.field]\n        return value[3] === '-' && value.length === 12;\n    }\n    emailValidator(props) {\n        let value = props.rowData[props.field]\n        return value && value.length > 0;\n    }\n\n/* --------------- Filters ---------------- */\n    statusBodyTemplate(rowData) {\n        var laundryStatusDisplay = {\n            'picked-up': 'picked up',\n            'delivered-to-SH': 'delivered to SH',\n            'delivered-to-dorm': 'delivered to dorm',\n            'out-of-service': 'out of service',\n            'bag-missing': 'bag missing',\n            'start-of-quarter': 'start of quarter'\n        }\n        return <span className={rowData.laundrystatus}>{laundryStatusDisplay[rowData.laundrystatus]}</span>;\n    }\n\n    weightBodyTemplate(rowData) {\n        return <span className={rowData.weightstatus}>{rowData.weightstatus}</span>;\n    }\n\n    activeBodyTemplate(rowData) {\n        return <span className={rowData.activestatus}>{rowData.activestatus}</span>;\n    }\n\n    detergentBodyTemplate(rowData){\n        return <span className={rowData.detergent}>{rowData.detergent}</span>;\n    }\n\n    fabricSoftenerBodyTemplate(rowData){\n        return <span className={rowData.fabric_softener}>{rowData.fabric_softener}</span>;\n    }\n\n    specialRequestBodyTemplate(rowData){\n        return <span className={rowData.special_request}>{rowData.special_request}</span>;\n    }\n\n    renderStatusFilter() {\n        var statuses =  [\n            {label: 'Picked Up', value: 'picked-up'},\n            {label: 'Out of Service', value: 'out-of-service'},\n            {label: 'Delivered to SH', value: 'delivered-to-SH'},\n            {label: 'Delivered to Dorm', value: 'delivered-to-dorm'},\n            {label: 'Bag Missing', value: 'bag-missing'},\n            { label: 'Start of Quarter', value: 'start-of-quarter' }\n                ];\n        return (\n            <Dropdown value={this.state.selectedStatus} options={statuses} onChange={this.onStatusFilterChange}\n                showClear={true} placeholder=\"Filter Status\" className=\"p-column-filter\" style={{ maxWidth: 200, minWidth: 50 }}/>\n        );\n    }\n\n    onStatusFilterChange(event) {\n        this.dt.filter(event.value, 'laundrystatus', 'equals');\n        this.setState({selectedStatus: event.value});\n    }\n\n    componentDidMount() {\n        const customerArray = [];\n        firebase.database().ref('/customers').on('value', function (snapshot) {\n            snapshot.forEach(function (childSnapshot) {\n                if (childSnapshot.val().activestatus === 'active') {\n                    customerArray.push(childSnapshot.toJSON());\n                }\n            });\n            console.log(customerArray)\n            console.log(customerArray[0])\n        });\n        this.setState({ customers: customerArray });\n    }\n\n    render() {\n        const statusFilter = this.renderStatusFilter();\n\n\n        var header = <div style={{ textAlign: 'left' }}>\n            <Button type=\"button\" style={{ backgroundColor: '#6a09a4', borderColor: '#6a09a4', marginRight: 10 }} icon=\"pi pi-external-link\" iconPos=\"left\" label=\"CSV\" onClick={this.export}>\n            </Button>\n        </div>;\n        return (\n            <div>\n                <Growl ref={(el) => this.growl = el} />\n                <div className=\"card\">\n                    <h1>RezLaundry Dashboard</h1>\n                    <DataTable value={this.state.customers} header={header} ref={(el) => { this.dt = el; }} style={{ marginBottom: '20px' }} responsive={true} autoLayout={true} editMode=\"row\" rowEditorValidator={this.onRowEditorValidator} onRowEditInit={this.onRowEditInit} onRowEditSave={this.onRowEditSave} onRowEditCancel={this.onRowEditCancel}>\n                        <Column field=\"id\" header=\"ID\" sortable={true} />\n                        <Column field=\"name\" header=\"Name\" style={{ maxWidth: 150 }} sortable filter filterPlaceholder=\"Search name\" exportable={false}/>\n                        <Column field=\"laundrystatus\" header=\"Bag Status\" style={{ maxWidth: 150 }} sortable={true} filter filterElement={statusFilter} body={this.statusBodyTemplate} exportable={false}/>\n                        <Column field=\"weightstatus\" header=\"Weight Status\" style={{ maxWidth: 150 }}  sortable={true} body={this.weightBodyTemplate} exportable={false}/>\n                        <Column field=\"detergent\" header=\"Detergent\" style={{ maxWidth: 100 }} sortable={true} body={this.detergentBodyTemplate} />\n                        <Column field=\"fabric_softener\" header=\"Fabric Softener\" style={{ maxWidth: 100 }} sortable={true} body={this.fabricSoftenerBodyTemplate} exportable={false}/>\n                        <Column field=\"special_request\" header=\"Special Requests\" style={{ maxWidth: 100 }} sortable={true} body={this.specialRequestBodyTemplate} exportable={false}/>\n                        \n                    </DataTable>\n                </div>\n            </div>\n        );\n\n        }\n    }\n\n","/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/EventService.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/CarService.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/NodeService.js",[],"/Users/carolinelobel/Documents/GitHub/ink-tank-bulk-orders/src/service/CountryService.js",[],{"ruleId":"181","severity":1,"message":"182","line":14,"column":9,"nodeType":"183","messageId":"184","endLine":14,"endColumn":18},{"ruleId":"181","severity":1,"message":"185","line":15,"column":9,"nodeType":"183","messageId":"184","endLine":15,"endColumn":19},{"ruleId":"181","severity":1,"message":"186","line":16,"column":9,"nodeType":"183","messageId":"184","endLine":16,"endColumn":17},{"ruleId":"181","severity":1,"message":"187","line":17,"column":9,"nodeType":"183","messageId":"184","endLine":17,"endColumn":19},{"ruleId":"181","severity":1,"message":"188","line":18,"column":9,"nodeType":"183","messageId":"184","endLine":18,"endColumn":21},{"ruleId":"181","severity":1,"message":"189","line":20,"column":9,"nodeType":"183","messageId":"184","endLine":20,"endColumn":21},{"ruleId":"181","severity":1,"message":"190","line":21,"column":9,"nodeType":"183","messageId":"184","endLine":21,"endColumn":19},{"ruleId":"181","severity":1,"message":"191","line":22,"column":9,"nodeType":"183","messageId":"184","endLine":22,"endColumn":17},{"ruleId":"181","severity":1,"message":"192","line":23,"column":9,"nodeType":"183","messageId":"184","endLine":23,"endColumn":18},{"ruleId":"181","severity":1,"message":"193","line":24,"column":9,"nodeType":"183","messageId":"184","endLine":24,"endColumn":22},{"ruleId":"194","severity":1,"message":"195","line":89,"column":17,"nodeType":"196","messageId":"197","endLine":89,"endColumn":43},{"ruleId":"194","severity":1,"message":"195","line":90,"column":17,"nodeType":"196","messageId":"197","endLine":90,"endColumn":40},{"ruleId":"194","severity":1,"message":"195","line":102,"column":17,"nodeType":"196","messageId":"197","endLine":102,"endColumn":50},{"ruleId":"181","severity":1,"message":"198","line":219,"column":13,"nodeType":"183","messageId":"184","endLine":219,"endColumn":17},{"ruleId":"181","severity":1,"message":"199","line":220,"column":13,"nodeType":"183","messageId":"184","endLine":220,"endColumn":20},{"ruleId":"181","severity":1,"message":"200","line":221,"column":13,"nodeType":"183","messageId":"184","endLine":221,"endColumn":29},{"ruleId":"181","severity":1,"message":"201","line":2,"column":9,"nodeType":"183","messageId":"184","endLine":2,"endColumn":18},{"ruleId":"181","severity":1,"message":"202","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":16},{"ruleId":"181","severity":1,"message":"203","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":19},{"ruleId":"181","severity":1,"message":"204","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":16},{"ruleId":"181","severity":1,"message":"205","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":15},{"ruleId":"181","severity":1,"message":"206","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"207","line":9,"column":9,"nodeType":"183","messageId":"184","endLine":9,"endColumn":22},{"ruleId":"181","severity":1,"message":"208","line":11,"column":9,"nodeType":"183","messageId":"184","endLine":11,"endColumn":16},{"ruleId":"181","severity":1,"message":"209","line":16,"column":8,"nodeType":"183","messageId":"184","endLine":16,"endColumn":17},{"ruleId":"181","severity":1,"message":"210","line":19,"column":8,"nodeType":"183","messageId":"184","endLine":19,"endColumn":20},{"ruleId":"211","severity":1,"message":"212","line":116,"column":17,"nodeType":"183","messageId":"213","endLine":116,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":119,"column":17,"nodeType":"183","messageId":"213","endLine":119,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":122,"column":17,"nodeType":"183","messageId":"213","endLine":122,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":125,"column":17,"nodeType":"183","messageId":"213","endLine":125,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":178,"column":31,"nodeType":"216","messageId":"217","endLine":178,"endColumn":33},{"ruleId":"218","severity":1,"message":"219","line":179,"column":32,"nodeType":"220","messageId":"221","endLine":179,"endColumn":34},{"ruleId":"181","severity":1,"message":"222","line":257,"column":17,"nodeType":"183","messageId":"184","endLine":257,"endColumn":22},{"ruleId":"181","severity":1,"message":"223","line":380,"column":17,"nodeType":"183","messageId":"184","endLine":380,"endColumn":23},{"ruleId":"181","severity":1,"message":"224","line":381,"column":17,"nodeType":"183","messageId":"184","endLine":381,"endColumn":25},{"ruleId":"181","severity":1,"message":"225","line":383,"column":17,"nodeType":"183","messageId":"184","endLine":383,"endColumn":37},{"ruleId":"181","severity":1,"message":"209","line":11,"column":8,"nodeType":"183","messageId":"184","endLine":11,"endColumn":17},{"ruleId":"181","severity":1,"message":"210","line":14,"column":8,"nodeType":"183","messageId":"184","endLine":14,"endColumn":20},{"ruleId":"181","severity":1,"message":"226","line":71,"column":17,"nodeType":"183","messageId":"184","endLine":71,"endColumn":21},{"ruleId":"227","severity":1,"message":"228","line":73,"column":75,"nodeType":"220","messageId":"229","endLine":73,"endColumn":76},{"ruleId":"227","severity":1,"message":"228","line":88,"column":75,"nodeType":"220","messageId":"229","endLine":88,"endColumn":76},{"ruleId":"181","severity":1,"message":"230","line":112,"column":13,"nodeType":"183","messageId":"184","endLine":112,"endColumn":21},{"ruleId":"181","severity":1,"message":"231","line":133,"column":15,"nodeType":"183","messageId":"184","endLine":133,"endColumn":19},{"ruleId":"214","severity":1,"message":"215","line":187,"column":39,"nodeType":"216","messageId":"217","endLine":187,"endColumn":41},{"ruleId":"218","severity":1,"message":"219","line":190,"column":35,"nodeType":"220","messageId":"221","endLine":190,"endColumn":37},{"ruleId":"211","severity":1,"message":"232","line":242,"column":33,"nodeType":"183","messageId":"213","endLine":242,"endColumn":36},{"ruleId":"227","severity":1,"message":"228","line":243,"column":79,"nodeType":"220","messageId":"229","endLine":243,"endColumn":80},{"ruleId":"227","severity":1,"message":"228","line":246,"column":83,"nodeType":"220","messageId":"229","endLine":246,"endColumn":84},{"ruleId":"233","severity":1,"message":"234","line":344,"column":11,"nodeType":"235","messageId":"221","endLine":344,"endColumn":26},{"ruleId":"211","severity":1,"message":"236","line":480,"column":17,"nodeType":"183","messageId":"213","endLine":480,"endColumn":23},{"ruleId":"181","severity":1,"message":"205","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":15},{"ruleId":"181","severity":1,"message":"206","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"237","line":9,"column":9,"nodeType":"183","messageId":"184","endLine":9,"endColumn":21},{"ruleId":"181","severity":1,"message":"209","line":13,"column":8,"nodeType":"183","messageId":"184","endLine":13,"endColumn":17},{"ruleId":"181","severity":1,"message":"210","line":16,"column":8,"nodeType":"183","messageId":"184","endLine":16,"endColumn":20},{"ruleId":"214","severity":1,"message":"215","line":152,"column":31,"nodeType":"216","messageId":"217","endLine":152,"endColumn":33},{"ruleId":"181","severity":1,"message":"238","line":266,"column":17,"nodeType":"183","messageId":"184","endLine":266,"endColumn":24},{"ruleId":"211","severity":1,"message":"236","line":400,"column":17,"nodeType":"183","messageId":"213","endLine":400,"endColumn":23},{"ruleId":"181","severity":1,"message":"223","line":400,"column":17,"nodeType":"183","messageId":"184","endLine":400,"endColumn":23},{"ruleId":"181","severity":1,"message":"209","line":12,"column":8,"nodeType":"183","messageId":"184","endLine":12,"endColumn":17},{"ruleId":"181","severity":1,"message":"210","line":15,"column":8,"nodeType":"183","messageId":"184","endLine":15,"endColumn":20},"no-unused-vars","'FormsDemo' is defined but never used.","Identifier","unusedVar","'SampleDemo' is defined but never used.","'DataDemo' is defined but never used.","'PanelsDemo' is defined but never used.","'OverlaysDemo' is defined but never used.","'MessagesDemo' is defined but never used.","'ChartsDemo' is defined but never used.","'MiscDemo' is defined but never used.","'EmptyPage' is defined but never used.","'Documentation' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'user' is assigned a value but never used.","'signOut' is assigned a value but never used.","'signInWithGoogle' is assigned a value but never used.","'InputText' is defined but never used.","'Button' is defined but never used.","'DataTable' is defined but never used.","'Column' is defined but never used.","'Chart' is defined but never used.","'Editor' is defined but never used.","'InputTextarea' is defined but never used.","'Message' is defined but never used.","'validator' is defined but never used.","'customerData' is defined but never used.","no-redeclare","'result' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'idNum' is assigned a value but never used.","'header' is assigned a value but never used.","'customer' is assigned a value but never used.","'laundryStatusDisplay' is assigned a value but never used.","'over' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'fullDate' is assigned a value but never used.","'curr' is assigned a value but never used.","'key' is already defined.","no-dupe-keys","Duplicate key 'Foster-Walker'.","ObjectExpression","'header' is already defined.","'ToggleButton' is defined but never used.","'history' is assigned a value but never used."]